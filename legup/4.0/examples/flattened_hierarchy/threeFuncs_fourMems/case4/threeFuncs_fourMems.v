//----------------------------------------------------------------------------//
// Generated by LegUp High-Level Synthesis Tool Version 3.0 (http://legup.org)
// Compiled: Fri Mar  6 13:48:28 2015
// University of Toronto
// For research and academic purposes only. Commercial use is prohibited.
// Please send bugs to: legup@eecg.toronto.edu
// Date: Fri Mar  6 16:32:01 2015
//----------------------------------------------------------------------------//

`define MEMORY_CONTROLLER_ADDR_SIZE 32
`define MEMORY_CONTROLLER_DATA_SIZE 64
// Number of RAM elements: 4
`define MEMORY_CONTROLLER_TAG_SIZE 9
`define TAG_NULL `MEMORY_CONTROLLER_TAG_SIZE'd0
`define TAG_PROCESSOR `MEMORY_CONTROLLER_TAG_SIZE'd1
// @memB = internal global [10 x i32] zeroinitializer, align 4
`define TAG_g_memB `MEMORY_CONTROLLER_TAG_SIZE'd3
`define TAG_g_memB_a {`TAG_g_memB, 23'd0}
// @memC = internal global [10 x i32] [i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9], align 4
`define TAG_g_memC `MEMORY_CONTROLLER_TAG_SIZE'd2
`define TAG_g_memC_a {`TAG_g_memC, 23'd0}

// Turn off warning 'ignoring unsupported system task'
// altera message_off 10175

`timescale 1 ns / 1 ns
module top
	(
		clk,
		reset,
		start,
		finish,
		waitrequest,
		return_val
	);
input clk;
input reset;
input start;
output wire finish;
input waitrequest;
output wire [31:0] return_val;
wire memory_controller_waitrequest;
wire memory_controller_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
wire memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
wire [1:0] memory_controller_size_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;

wire memory_controller_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
wire memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
wire [1:0] memory_controller_size_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;

/* synthesis translate_off */
assign memory_controller_waitrequest = waitrequest;
/* synthesis translate_on */

wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] funcA_memory_controller_address_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] funcA_memory_controller_address_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] funcA_memory_controller_in_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] funcA_memory_controller_in_b;
wire [1:0] funcA_memory_controller_size_a;
wire [1:0] funcA_memory_controller_size_b;

wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] funcB_memory_controller_address_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] funcB_memory_controller_address_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] funcB_memory_controller_in_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] funcB_memory_controller_in_b;
wire [1:0] funcB_memory_controller_size_a;
wire [1:0] funcB_memory_controller_size_b;

wire [31:0] funcA_return_val;
wire [31:0] funcB_arg_sum;
wire [31:0] funcB_return_val;

memory_controller memory_controller_inst (
	.clk( clk ),
	.memory_controller_enable_a( memory_controller_enable_a | funcA_memory_controller_enable_a | funcB_memory_controller_enable_a),
	.memory_controller_enable_b( memory_controller_enable_b | funcA_memory_controller_enable_b | funcB_memory_controller_enable_b),
	.memory_controller_address_a( memory_controller_address_a | funcA_memory_controller_address_a | funcB_memory_controller_address_a),
	.memory_controller_address_b( memory_controller_address_b | funcA_memory_controller_address_b | funcB_memory_controller_address_b),
	.memory_controller_write_enable_a( memory_controller_write_enable_a | funcA_memory_controller_write_enable_a | funcB_memory_controller_write_enable_a ),
	.memory_controller_write_enable_b( memory_controller_write_enable_b | funcA_memory_controller_write_enable_b | funcB_memory_controller_write_enable_b ),
	.memory_controller_in_a( memory_controller_in_a | funcA_memory_controller_in_a | funcB_memory_controller_in_a),
	.memory_controller_in_b( memory_controller_in_b | funcA_memory_controller_in_b | funcB_memory_controller_in_b),
	.memory_controller_size_a( memory_controller_size_a | funcA_memory_controller_size_a | funcB_memory_controller_size_a),
	.memory_controller_size_b( memory_controller_size_b | funcA_memory_controller_size_b | funcB_memory_controller_size_b),
	.memory_controller_waitrequest( memory_controller_waitrequest ),
	.memory_controller_out_reg_a( memory_controller_out_a ),
	.memory_controller_out_reg_b( memory_controller_out_b )
);

main main_inst(
	.clk( clk ),
	.clk2x( clk2x ),
	.clk1x_follower( clk1x_follower ),
	.reset( reset ),
	.start( start ),
	.finish( finish ),
	.return_val( return_val ),
	.memory_controller_enable_a(memory_controller_enable_a),
	.memory_controller_address_a(memory_controller_address_a),
	.memory_controller_write_enable_a(memory_controller_write_enable_a),
	.memory_controller_in_a(memory_controller_in_a),
	.memory_controller_size_a(memory_controller_size_a),
	.memory_controller_out_a(memory_controller_out_a),
	.memory_controller_enable_b(memory_controller_enable_b),
	.memory_controller_address_b(memory_controller_address_b),
	.memory_controller_write_enable_b(memory_controller_write_enable_b),
	.memory_controller_in_b(memory_controller_in_b),
	.memory_controller_size_b(memory_controller_size_b),
	.memory_controller_out_b(memory_controller_out_b),
	.memory_controller_waitrequest(memory_controller_waitrequest),
    .funcA_start(funcA_start),
    .funcA_finish(funcA_finish),
    .funcA_return_val(funcA_return_val)
);

funcA funcA (
	.memory_controller_enable_a (funcA_memory_controller_enable_a),
	.memory_controller_address_a (funcA_memory_controller_address_a),
	.memory_controller_write_enable_a (funcA_memory_controller_write_enable_a),
	.memory_controller_in_a (funcA_memory_controller_in_a),
	.memory_controller_size_a (funcA_memory_controller_size_a),
	.memory_controller_out_a (memory_controller_out_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.memory_controller_enable_b (funcA_memory_controller_enable_b),
	.memory_controller_address_b (funcA_memory_controller_address_b),
	.memory_controller_write_enable_b (funcA_memory_controller_write_enable_b),
	.memory_controller_in_b (funcA_memory_controller_in_b),
	.memory_controller_size_b (funcA_memory_controller_size_b),
	.memory_controller_out_b (memory_controller_out_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.memory_controller_waitrequest (memory_controller_waitrequest),
	.clk (clk),
	.clk2x (clk2x),
	.clk1x_follower (clk1x_follower),
	.reset (reset),
	.start (funcA_start),
	.finish (funcA_finish),
	.return_val (funcA_return_val),
    .funcB_start (funcB_start),
    .funcB_finish (funcB_finish),
    .funcB_return_val (funcB_return_val),    
    .funcB_arg_sum (funcB_arg_sum)
);

funcB funcB (
	.memory_controller_enable_a (funcB_memory_controller_enable_a),
	.memory_controller_address_a (funcB_memory_controller_address_a),
	.memory_controller_write_enable_a (funcB_memory_controller_write_enable_a),
	.memory_controller_in_a (funcB_memory_controller_in_a),
	.memory_controller_size_a (funcB_memory_controller_size_a),
	.memory_controller_out_a (memory_controller_out_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.memory_controller_enable_b (funcB_memory_controller_enable_b),
	.memory_controller_address_b (funcB_memory_controller_address_b),
	.memory_controller_write_enable_b (funcB_memory_controller_write_enable_b),
	.memory_controller_in_b (funcB_memory_controller_in_b),
	.memory_controller_size_b (funcB_memory_controller_size_b),
	.memory_controller_out_b (memory_controller_out_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.memory_controller_waitrequest (memory_controller_waitrequest),
	.clk (clk),
	.clk2x (clk2x),
	.clk1x_follower (clk1x_follower),
	.reset (reset),
	.start (funcB_start),
	.finish (funcB_finish),
	.return_val (funcB_return_val),
	.arg_sum (funcB_arg_sum)
);

endmodule
`timescale 1 ns / 1 ns
module memory_controller
(
	clk,
	memory_controller_address_a,
	memory_controller_address_b,
	memory_controller_enable_a,
	memory_controller_enable_b,
	memory_controller_write_enable_a,
	memory_controller_write_enable_b,
	memory_controller_in_a,
	memory_controller_in_b,
	memory_controller_size_a,
	memory_controller_size_b,
	memory_controller_waitrequest,
	memory_controller_out_reg_a,
	memory_controller_out_reg_b
);

parameter latency = 2;

parameter ram_latency = latency-1;

integer j;

input clk;
input memory_controller_waitrequest;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
input memory_controller_enable_a;
input memory_controller_write_enable_a;
input [64-1:0] memory_controller_in_a;
input [1:0] memory_controller_size_a;
output reg [64-1:0] memory_controller_out_reg_a;
reg [64-1:0] memory_controller_out_prev_a;
reg [64-1:0] memory_controller_out_a;

reg memory_controller_enable_reg_a;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
input memory_controller_enable_b;
input memory_controller_write_enable_b;
input [64-1:0] memory_controller_in_b;
input [1:0] memory_controller_size_b;
output reg [64-1:0] memory_controller_out_reg_b;
reg [64-1:0] memory_controller_out_prev_b;
reg [64-1:0] memory_controller_out_b;

reg memory_controller_enable_reg_b;

reg [3:0] memC_address_a;
reg [3:0] memC_address_b;
reg memC_write_enable_a;
reg memC_write_enable_b;
reg [31:0] memC_in_a;
reg [31:0] memC_in_b;
wire [31:0] memC_out_a;
wire [31:0] memC_out_b;

// @memC = internal global [10 x i32] [i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9], align 4
ram_dual_port memC (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( memC_address_a ),
	.address_b( memC_address_b ),
	.wren_a( memC_write_enable_a ),
	.wren_b( memC_write_enable_b ),
	.data_a( memC_in_a ),
	.data_b( memC_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( memC_out_a ),
	.q_b( memC_out_b)
);
defparam memC.width_a = 32;
defparam memC.width_b = 32;
defparam memC.widthad_a = 4;
defparam memC.widthad_b = 4;
defparam memC.width_be_a = 1;
defparam memC.width_be_b = 1;
defparam memC.numwords_a = 10;
defparam memC.numwords_b = 10;
defparam memC.latency = ram_latency;
defparam memC.init_file = "memC.mif";

reg [3:0] memB_address_a;
reg [3:0] memB_address_b;
reg memB_write_enable_a;
reg memB_write_enable_b;
reg [31:0] memB_in_a;
reg [31:0] memB_in_b;
wire [31:0] memB_out_a;
wire [31:0] memB_out_b;

// @memB = internal global [10 x i32] zeroinitializer, align 4
ram_dual_port memB (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( memB_address_a ),
	.address_b( memB_address_b ),
	.wren_a( memB_write_enable_a ),
	.wren_b( memB_write_enable_b ),
	.data_a( memB_in_a ),
	.data_b( memB_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( memB_out_a ),
	.q_b( memB_out_b)
);
defparam memB.width_a = 32;
defparam memB.width_b = 32;
defparam memB.widthad_a = 4;
defparam memB.widthad_b = 4;
defparam memB.width_be_a = 1;
defparam memB.width_be_b = 1;
defparam memB.numwords_a = 10;
defparam memB.numwords_b = 10;
defparam memB.latency = ram_latency;
defparam memB.init_file = "memB.mif";
wire [`MEMORY_CONTROLLER_TAG_SIZE-1:0] tag_a;
assign tag_a = memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:`MEMORY_CONTROLLER_ADDR_SIZE-`MEMORY_CONTROLLER_TAG_SIZE];
always @(*)
if (memory_controller_enable_a & (tag_a == 0))
begin
   $display("Error: Null pointer exception! Are you trying to read from a local ram? Use: 'set_memory_global <ram_name>' To debug this error try: 'set_parameter PRINT_STATES 1'");
   $finish;
end
reg [2:0] prevAddr_a;
reg [1:0] prevSize_a;
reg [2:0] prevSize_a_and;

always @(posedge clk)
if (!memory_controller_waitrequest)
begin
	prevAddr_a <= memory_controller_address_a[2:0];
	prevSize_a <= memory_controller_size_a;
end
wire [`MEMORY_CONTROLLER_TAG_SIZE-1:0] tag_b;
assign tag_b = memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:`MEMORY_CONTROLLER_ADDR_SIZE-`MEMORY_CONTROLLER_TAG_SIZE];
always @(*)
if (memory_controller_enable_b & (tag_b == 0))
begin
   $display("Error: Null pointer exception! Are you trying to read from a local ram? Use: 'set_memory_global <ram_name>' To debug this error try: 'set_parameter PRINT_STATES 1'");
   $finish;
end
reg [2:0] prevAddr_b;
reg [1:0] prevSize_b;
reg [2:0] prevSize_b_and;

always @(posedge clk)
if (!memory_controller_waitrequest)
begin
	prevAddr_b <= memory_controller_address_b[2:0];
	prevSize_b <= memory_controller_size_b;
end

reg [2:0] select_not_struct_a;

wire select_memC_a;
assign select_memC_a = (tag_a == `TAG_g_memC);
reg [ram_latency:0] select_memC_reg_a;
wire [31:0] memory_controller_memC_out_a;
assign memory_controller_memC_out_a = {32{ select_memC_reg_a[ram_latency]}} & memC_out_a;

wire select_memB_a;
assign select_memB_a = (tag_a == `TAG_g_memB);
reg [ram_latency:0] select_memB_reg_a;
wire [31:0] memory_controller_memB_out_a;
assign memory_controller_memB_out_a = {32{ select_memB_reg_a[ram_latency]}} & memB_out_a;

always @(*)
begin
	memC_address_a = memory_controller_address_a [4-1+2:2] & {4{select_memC_a}};
	memC_write_enable_a = memory_controller_write_enable_a & select_memC_a;
	memC_in_a [32-1:0] = memory_controller_in_a[32-1:0];

	memB_address_a = memory_controller_address_a [4-1+2:2] & {4{select_memB_a}};
	memB_write_enable_a = memory_controller_write_enable_a & select_memB_a;
	memB_in_a [32-1:0] = memory_controller_in_a[32-1:0];

end
always @(*)
begin
	select_not_struct_a [2:0] = 3'b0 | {2{select_memC_reg_a[ram_latency]}} | {2{select_memB_reg_a[ram_latency]}};
	if (prevAddr_a[2:0] & select_not_struct_a[2:0] != 0 && memory_controller_enable_a)
	begin
		$display("Error: memory address not aligned to ram word size!");
		$finish;
	end

	prevSize_a_and[0] = prevSize_a[1] | prevSize_a[0];
	prevSize_a_and[1] = prevSize_a[1];
	prevSize_a_and[2] = prevSize_a[1] & prevSize_a[0];
	if ((prevAddr_a & prevSize_a_and) != 0 && memory_controller_enable_a)
	begin
		$display("Error: memory address not aligned to ram word size!");
		$finish;
	end
	memory_controller_out_prev_a = memory_controller_out_reg_a & { 64{!memory_controller_enable_reg_a}};
	memory_controller_out_a = 1'b0 | memory_controller_out_prev_a | memory_controller_memC_out_a | memory_controller_memB_out_a;
end

always @(posedge clk)
if (!memory_controller_waitrequest)
begin
memory_controller_out_reg_a <= memory_controller_out_a;
memory_controller_enable_reg_a <= memory_controller_enable_a;
end

always @(posedge clk)
if (!memory_controller_waitrequest)
for (j = 0; j < ram_latency; j=j+1)
begin
select_memC_reg_a[j+1] <= select_memC_reg_a[j];
select_memB_reg_a[j+1] <= select_memB_reg_a[j];
end
always @(*)
begin
select_memC_reg_a[0] <= select_memC_a;
select_memB_reg_a[0] <= select_memB_a;
end

reg [2:0] select_not_struct_b;

wire select_memC_b;
assign select_memC_b = (tag_b == `TAG_g_memC);
reg [ram_latency:0] select_memC_reg_b;
wire [31:0] memory_controller_memC_out_b;
assign memory_controller_memC_out_b = {32{ select_memC_reg_b[ram_latency]}} & memC_out_b;

wire select_memB_b;
assign select_memB_b = (tag_b == `TAG_g_memB);
reg [ram_latency:0] select_memB_reg_b;
wire [31:0] memory_controller_memB_out_b;
assign memory_controller_memB_out_b = {32{ select_memB_reg_b[ram_latency]}} & memB_out_b;

always @(*)
begin
	memC_address_b = memory_controller_address_b [4-1+2:2] & {4{select_memC_b}};
	memC_write_enable_b = memory_controller_write_enable_b & select_memC_b;
	memC_in_b [32-1:0] = memory_controller_in_b[32-1:0];

	memB_address_b = memory_controller_address_b [4-1+2:2] & {4{select_memB_b}};
	memB_write_enable_b = memory_controller_write_enable_b & select_memB_b;
	memB_in_b [32-1:0] = memory_controller_in_b[32-1:0];

end
always @(*)
begin
	select_not_struct_b [2:0] = 3'b0 | {2{select_memC_reg_b[ram_latency]}} | {2{select_memB_reg_b[ram_latency]}};
	if (prevAddr_b[2:0] & select_not_struct_b[2:0] != 0 && memory_controller_enable_b)
	begin
		$display("Error: memory address not aligned to ram word size!");
		$finish;
	end

	prevSize_b_and[0] = prevSize_b[1] | prevSize_b[0];
	prevSize_b_and[1] = prevSize_b[1];
	prevSize_b_and[2] = prevSize_b[1] & prevSize_b[0];
	if ((prevAddr_b & prevSize_b_and) != 0 && memory_controller_enable_b)
	begin
		$display("Error: memory address not aligned to ram word size!");
		$finish;
	end
	memory_controller_out_prev_b = memory_controller_out_reg_b & { 64{!memory_controller_enable_reg_b}};
	memory_controller_out_b = 1'b0 | memory_controller_out_prev_b | memory_controller_memC_out_b | memory_controller_memB_out_b;
end

always @(posedge clk)
if (!memory_controller_waitrequest)
begin
memory_controller_out_reg_b <= memory_controller_out_b;
memory_controller_enable_reg_b <= memory_controller_enable_b;
end

always @(posedge clk)
if (!memory_controller_waitrequest)
for (j = 0; j < ram_latency; j=j+1)
begin
select_memC_reg_b[j+1] <= select_memC_reg_b[j];
select_memB_reg_b[j+1] <= select_memB_reg_b[j];
end
always @(*)
begin
select_memC_reg_b[0] <= select_memC_b;
select_memB_reg_b[0] <= select_memB_b;
end

endmodule 

`timescale 1 ns / 1 ns
module funcB
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b,
	memory_controller_waitrequest,
	return_val,
	arg_sum
);

parameter [3:0] LEGUP_0 = 4'd0;
parameter [3:0] LEGUP_F_funcB_BB_0_1 = 4'd1;
parameter [3:0] LEGUP_F_funcB_BB_0_2 = 4'd2;
parameter [3:0] LEGUP_F_funcB_BB_0_3 = 4'd3;
parameter [3:0] LEGUP_F_funcB_BB_0_4 = 4'd4;
parameter [3:0] LEGUP_F_funcB_BB_0_5 = 4'd5;
parameter [3:0] LEGUP_F_funcB_BB_0_6 = 4'd6;
parameter [3:0] LEGUP_F_funcB_BB_0_7 = 4'd7;
parameter [3:0] LEGUP_F_funcB_BB_0_8 = 4'd8;
parameter [3:0] LEGUP_F_funcB_BB_0_9 = 4'd9;
parameter [8:0] tag_offset = 9'd0;
parameter [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tag_addr_offset = {tag_offset, 23'd0};

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
input  memory_controller_waitrequest;
output reg [31:0] return_val;
input [31:0] arg_sum;
reg [3:0] cur_state;
reg [31:0] funcB_0_1;
reg [31:0] funcB_0_1_reg;
reg [31:0] funcB_0_2;
reg [31:0] funcB_0_2_reg;
reg [31:0] funcB_0_3;
reg [31:0] funcB_0_3_reg;
reg [31:0] funcB_0_4;
reg [31:0] funcB_0_4_reg;
reg [31:0] funcB_0_5;
reg [31:0] funcB_0_5_reg;
reg [31:0] funcB_0_6;
reg [31:0] funcB_0_6_reg;
reg [31:0] funcB_0_7;
reg [31:0] funcB_0_7_reg;
reg [31:0] funcB_0_8;
reg [31:0] funcB_0_8_reg;
reg [31:0] funcB_0_9;
reg [31:0] funcB_0_9_reg;
reg [31:0] funcB_0_10;
reg [31:0] funcB_0_10_reg;
reg [31:0] funcB_0_11;
reg [31:0] funcB_0_11_reg;
reg [31:0] funcB_0_12;
reg [31:0] funcB_0_12_reg;
reg [31:0] funcB_0_13;
reg [31:0] funcB_0_13_reg;
reg [31:0] funcB_0_14;
reg [31:0] funcB_0_14_reg;
reg [31:0] funcB_0_15;
reg [31:0] funcB_0_15_reg;
reg [31:0] funcB_0_16;
reg [31:0] funcB_0_16_reg;
reg [31:0] funcB_0_17;
reg [31:0] funcB_0_17_reg;
reg [31:0] funcB_0_18;
reg [31:0] funcB_0_18_reg;
reg [31:0] funcB_0_19;
reg [31:0] funcB_0_19_reg;
reg [31:0] funcB_0_20;
reg [31:0] funcB_0_20_reg;
reg [31:0] funcB_0_21;
reg [31:0] funcB_0_21_reg;
reg [31:0] funcB_0_22;
reg [31:0] funcB_0_22_reg;
reg [31:0] funcB_0_23;
reg [31:0] funcB_0_23_reg;
reg [31:0] funcB_0_24;
reg [31:0] funcB_0_24_reg;
reg [31:0] funcB_0_25;
reg [31:0] funcB_0_25_reg;
reg [31:0] funcB_0_26;
reg [31:0] funcB_0_26_reg;
reg [31:0] funcB_0_27;
reg [31:0] funcB_0_27_reg;
reg [31:0] funcB_0_28;
reg [31:0] funcB_0_28_reg;
reg [31:0] funcB_0_29;
reg [31:0] funcB_0_29_reg;
reg [31:0] funcB_0_30;
reg [31:0] funcB_0_30_reg;
reg [31:0] funcB_0_31;
reg [31:0] funcB_0_31_reg;
reg [31:0] funcB_0_32;
reg [31:0] funcB_0_32_reg;
reg [31:0] funcB_0_33;
reg [31:0] funcB_0_33_reg;
reg [31:0] funcB_0_34;
reg [31:0] funcB_0_34_reg;
reg [31:0] funcB_0_35;
reg [31:0] funcB_0_35_reg;
reg [31:0] funcB_0_36;
reg [31:0] funcB_0_36_reg;
reg [31:0] funcB_0_37;
reg [31:0] funcB_0_37_reg;
reg [31:0] funcB_0_38;
reg [31:0] funcB_0_38_reg;
reg [31:0] funcB_0_39;
reg [31:0] funcB_0_39_reg;
reg [31:0] funcB_0_40;
reg [31:0] funcB_0_40_reg;
wire [3:0] memA_address_a;
wire  memA_write_enable_a;
wire [31:0] memA_in_a;
wire [31:0] memA_out_a;
wire [3:0] memA_address_b;
wire  memA_write_enable_b;
wire [31:0] memA_in_b;
wire [31:0] memA_out_b;
wire [3:0] memC_address_a;
wire  memC_write_enable_a;
wire [31:0] memC_in_a;
wire [31:0] memC_out_a;
wire [3:0] memC_address_b;
wire  memC_write_enable_b;
wire [31:0] memC_in_b;
wire [31:0] memC_out_b;
reg [3:0] memD_address_a;
reg  memD_write_enable_a;
wire [31:0] memD_in_a;
wire [31:0] memD_out_a;
reg [3:0] memD_address_b;
reg  memD_write_enable_b;
wire [31:0] memD_in_b;
wire [31:0] memD_out_b;
wire [3:0] memB_address_a;
wire  memB_write_enable_a;
wire [31:0] memB_in_a;
wire [31:0] memB_out_a;
wire [3:0] memB_address_b;
wire  memB_write_enable_b;
wire [31:0] memB_in_b;
wire [31:0] memB_out_b;

// Local Rams


// @memD = internal global [10 x i32] [i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9], align 4
ram_dual_port memD (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( memD_address_a ),
	.address_b( memD_address_b ),
	.wren_a( memD_write_enable_a ),
	.wren_b( memD_write_enable_b ),
	.data_a( memD_in_a ),
	.data_b( memD_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( memD_out_a ),
	.q_b( memD_out_b)
);
defparam memD.width_a = 32;
defparam memD.width_b = 32;
defparam memD.widthad_a = 4;
defparam memD.widthad_b = 4;
defparam memD.width_be_a = 1;
defparam memD.width_be_b = 1;
defparam memD.numwords_a = 10;
defparam memD.numwords_b = 10;
defparam memD.latency = 1;
defparam memD.init_file = "memD.mif";


always @(posedge clk) begin
	if (((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd1))) begin
		cur_state <= LEGUP_0;
		if (start == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
	end
	if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd1))) begin
		cur_state <= LEGUP_F_funcB_BB_0_1;
		if (start == 1'b0 && ^(LEGUP_F_funcB_BB_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
	end
	if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd0))) begin
		cur_state <= LEGUP_0;
		if (start == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
	end
	if (((cur_state == LEGUP_F_funcB_BB_0_1) & (memory_controller_waitrequest == 1'd1))) begin
		cur_state <= LEGUP_F_funcB_BB_0_1;
		if (start == 1'b0 && ^(LEGUP_F_funcB_BB_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
	end
	if (((cur_state == LEGUP_F_funcB_BB_0_1) & (memory_controller_waitrequest == 1'd0))) begin
		cur_state <= LEGUP_F_funcB_BB_0_2;
		if (start == 1'b0 && ^(LEGUP_F_funcB_BB_0_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
	end
	if (((cur_state == LEGUP_F_funcB_BB_0_2) & (memory_controller_waitrequest == 1'd1))) begin
		cur_state <= LEGUP_F_funcB_BB_0_2;
		if (start == 1'b0 && ^(LEGUP_F_funcB_BB_0_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
	end
	if (((cur_state == LEGUP_F_funcB_BB_0_2) & (memory_controller_waitrequest == 1'd0))) begin
		cur_state <= LEGUP_F_funcB_BB_0_3;
		if (start == 1'b0 && ^(LEGUP_F_funcB_BB_0_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
	end
	if (((cur_state == LEGUP_F_funcB_BB_0_3) & (memory_controller_waitrequest == 1'd1))) begin
		cur_state <= LEGUP_F_funcB_BB_0_3;
		if (start == 1'b0 && ^(LEGUP_F_funcB_BB_0_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
	end
	if (((cur_state == LEGUP_F_funcB_BB_0_3) & (memory_controller_waitrequest == 1'd0))) begin
		cur_state <= LEGUP_F_funcB_BB_0_4;
		if (start == 1'b0 && ^(LEGUP_F_funcB_BB_0_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
	end
	if (((cur_state == LEGUP_F_funcB_BB_0_4) & (memory_controller_waitrequest == 1'd1))) begin
		cur_state <= LEGUP_F_funcB_BB_0_4;
		if (start == 1'b0 && ^(LEGUP_F_funcB_BB_0_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
	end
	if (((cur_state == LEGUP_F_funcB_BB_0_4) & (memory_controller_waitrequest == 1'd0))) begin
		cur_state <= LEGUP_F_funcB_BB_0_5;
		if (start == 1'b0 && ^(LEGUP_F_funcB_BB_0_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
	end
	if (((cur_state == LEGUP_F_funcB_BB_0_5) & (memory_controller_waitrequest == 1'd1))) begin
		cur_state <= LEGUP_F_funcB_BB_0_5;
		if (start == 1'b0 && ^(LEGUP_F_funcB_BB_0_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
	end
	if (((cur_state == LEGUP_F_funcB_BB_0_5) & (memory_controller_waitrequest == 1'd0))) begin
		cur_state <= LEGUP_F_funcB_BB_0_6;
		if (start == 1'b0 && ^(LEGUP_F_funcB_BB_0_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
	end
	if (((cur_state == LEGUP_F_funcB_BB_0_6) & (memory_controller_waitrequest == 1'd1))) begin
		cur_state <= LEGUP_F_funcB_BB_0_6;
		if (start == 1'b0 && ^(LEGUP_F_funcB_BB_0_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
	end
	if (((cur_state == LEGUP_F_funcB_BB_0_6) & (memory_controller_waitrequest == 1'd0))) begin
		cur_state <= LEGUP_F_funcB_BB_0_7;
		if (start == 1'b0 && ^(LEGUP_F_funcB_BB_0_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
	end
	if (((cur_state == LEGUP_F_funcB_BB_0_7) & (memory_controller_waitrequest == 1'd1))) begin
		cur_state <= LEGUP_F_funcB_BB_0_7;
		if (start == 1'b0 && ^(LEGUP_F_funcB_BB_0_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
	end
	if (((cur_state == LEGUP_F_funcB_BB_0_7) & (memory_controller_waitrequest == 1'd0))) begin
		cur_state <= LEGUP_F_funcB_BB_0_8;
		if (start == 1'b0 && ^(LEGUP_F_funcB_BB_0_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
	end
	if (((cur_state == LEGUP_F_funcB_BB_0_8) & (memory_controller_waitrequest == 1'd1))) begin
		cur_state <= LEGUP_F_funcB_BB_0_8;
		if (start == 1'b0 && ^(LEGUP_F_funcB_BB_0_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
	end
	if (((cur_state == LEGUP_F_funcB_BB_0_8) & (memory_controller_waitrequest == 1'd0))) begin
		cur_state <= LEGUP_F_funcB_BB_0_9;
		if (start == 1'b0 && ^(LEGUP_F_funcB_BB_0_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
	end
	if (((cur_state == LEGUP_F_funcB_BB_0_9) & (memory_controller_waitrequest == 1'd1))) begin
		cur_state <= LEGUP_F_funcB_BB_0_9;
		if (start == 1'b0 && ^(LEGUP_F_funcB_BB_0_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
	end
	if (((cur_state == LEGUP_F_funcB_BB_0_9) & (memory_controller_waitrequest == 1'd0))) begin
		cur_state <= LEGUP_0;
		if (start == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
	end
	if ((reset == 1'd1)) begin
		cur_state <= 4'd0;
		if (start == 1'b0 && ^(4'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
	end
end
always @(*) begin
	/* funcB: %0*/
	/*   %1 = load volatile i32* getelementptr inbounds ([10 x i32]* @memC, i32 0, i32 0), align 4, !tbaa !1*/
		funcB_0_1 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* funcB: %0*/
	/*   %1 = load volatile i32* getelementptr inbounds ([10 x i32]* @memC, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_funcB_BB_0_3)) begin
		funcB_0_1_reg <= funcB_0_1;
		if (start == 1'b0 && ^(funcB_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to funcB_0_1_reg"); $finish; end
	end
end
always @(*) begin
	/* funcB: %0*/
	/*   %2 = load volatile i32* getelementptr inbounds ([10 x i32]* @memD, i32 0, i32 0), align 4, !tbaa !1*/
		funcB_0_2 = memD_out_a;
end
always @(posedge clk) begin
	/* funcB: %0*/
	/*   %2 = load volatile i32* getelementptr inbounds ([10 x i32]* @memD, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_funcB_BB_0_2)) begin
		funcB_0_2_reg <= funcB_0_2;
		if (start == 1'b0 && ^(funcB_0_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to funcB_0_2_reg"); $finish; end
	end
end
always @(*) begin
	/* funcB: %0*/
	/*   %3 = add i32 %1, %2*/
		funcB_0_3 = (funcB_0_1 + funcB_0_2_reg);
end
always @(posedge clk) begin
	/* funcB: %0*/
	/*   %3 = add i32 %1, %2*/
	if ((cur_state == LEGUP_F_funcB_BB_0_3)) begin
		funcB_0_3_reg <= funcB_0_3;
		if (start == 1'b0 && ^(funcB_0_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to funcB_0_3_reg"); $finish; end
	end
end
always @(*) begin
	/* funcB: %0*/
	/*   %4 = load volatile i32* getelementptr inbounds ([10 x i32]* @memC, i32 0, i32 1), align 4, !tbaa !1*/
		funcB_0_4 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* funcB: %0*/
	/*   %4 = load volatile i32* getelementptr inbounds ([10 x i32]* @memC, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_funcB_BB_0_3)) begin
		funcB_0_4_reg <= funcB_0_4;
		if (start == 1'b0 && ^(funcB_0_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to funcB_0_4_reg"); $finish; end
	end
end
always @(*) begin
	/* funcB: %0*/
	/*   %5 = load volatile i32* getelementptr inbounds ([10 x i32]* @memD, i32 0, i32 1), align 4, !tbaa !1*/
		funcB_0_5 = memD_out_b;
end
always @(posedge clk) begin
	/* funcB: %0*/
	/*   %5 = load volatile i32* getelementptr inbounds ([10 x i32]* @memD, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_funcB_BB_0_2)) begin
		funcB_0_5_reg <= funcB_0_5;
		if (start == 1'b0 && ^(funcB_0_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to funcB_0_5_reg"); $finish; end
	end
end
always @(*) begin
	/* funcB: %0*/
	/*   %6 = add i32 %4, %3*/
		funcB_0_6 = (funcB_0_4 + funcB_0_3);
end
always @(posedge clk) begin
	/* funcB: %0*/
	/*   %6 = add i32 %4, %3*/
	if ((cur_state == LEGUP_F_funcB_BB_0_3)) begin
		funcB_0_6_reg <= funcB_0_6;
		if (start == 1'b0 && ^(funcB_0_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to funcB_0_6_reg"); $finish; end
	end
end
always @(*) begin
	/* funcB: %0*/
	/*   %7 = add i32 %6, %5*/
		funcB_0_7 = (funcB_0_6 + funcB_0_5_reg);
end
always @(posedge clk) begin
	/* funcB: %0*/
	/*   %7 = add i32 %6, %5*/
	if ((cur_state == LEGUP_F_funcB_BB_0_3)) begin
		funcB_0_7_reg <= funcB_0_7;
		if (start == 1'b0 && ^(funcB_0_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to funcB_0_7_reg"); $finish; end
	end
end
always @(*) begin
	/* funcB: %0*/
	/*   %8 = load volatile i32* getelementptr inbounds ([10 x i32]* @memC, i32 0, i32 2), align 4, !tbaa !1*/
		funcB_0_8 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* funcB: %0*/
	/*   %8 = load volatile i32* getelementptr inbounds ([10 x i32]* @memC, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_funcB_BB_0_4)) begin
		funcB_0_8_reg <= funcB_0_8;
		if (start == 1'b0 && ^(funcB_0_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to funcB_0_8_reg"); $finish; end
	end
end
always @(*) begin
	/* funcB: %0*/
	/*   %9 = load volatile i32* getelementptr inbounds ([10 x i32]* @memD, i32 0, i32 2), align 4, !tbaa !1*/
		funcB_0_9 = memD_out_a;
end
always @(posedge clk) begin
	/* funcB: %0*/
	/*   %9 = load volatile i32* getelementptr inbounds ([10 x i32]* @memD, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_funcB_BB_0_3)) begin
		funcB_0_9_reg <= funcB_0_9;
		if (start == 1'b0 && ^(funcB_0_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to funcB_0_9_reg"); $finish; end
	end
end
always @(*) begin
	/* funcB: %0*/
	/*   %10 = add i32 %8, %7*/
		funcB_0_10 = (funcB_0_8 + funcB_0_7_reg);
end
always @(posedge clk) begin
	/* funcB: %0*/
	/*   %10 = add i32 %8, %7*/
	if ((cur_state == LEGUP_F_funcB_BB_0_4)) begin
		funcB_0_10_reg <= funcB_0_10;
		if (start == 1'b0 && ^(funcB_0_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to funcB_0_10_reg"); $finish; end
	end
end
always @(*) begin
	/* funcB: %0*/
	/*   %11 = add i32 %10, %9*/
		funcB_0_11 = (funcB_0_10 + funcB_0_9_reg);
end
always @(posedge clk) begin
	/* funcB: %0*/
	/*   %11 = add i32 %10, %9*/
	if ((cur_state == LEGUP_F_funcB_BB_0_4)) begin
		funcB_0_11_reg <= funcB_0_11;
		if (start == 1'b0 && ^(funcB_0_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to funcB_0_11_reg"); $finish; end
	end
end
always @(*) begin
	/* funcB: %0*/
	/*   %12 = load volatile i32* getelementptr inbounds ([10 x i32]* @memC, i32 0, i32 3), align 4, !tbaa !1*/
		funcB_0_12 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* funcB: %0*/
	/*   %12 = load volatile i32* getelementptr inbounds ([10 x i32]* @memC, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_funcB_BB_0_4)) begin
		funcB_0_12_reg <= funcB_0_12;
		if (start == 1'b0 && ^(funcB_0_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to funcB_0_12_reg"); $finish; end
	end
end
always @(*) begin
	/* funcB: %0*/
	/*   %13 = load volatile i32* getelementptr inbounds ([10 x i32]* @memD, i32 0, i32 3), align 4, !tbaa !1*/
		funcB_0_13 = memD_out_b;
end
always @(posedge clk) begin
	/* funcB: %0*/
	/*   %13 = load volatile i32* getelementptr inbounds ([10 x i32]* @memD, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_funcB_BB_0_3)) begin
		funcB_0_13_reg <= funcB_0_13;
		if (start == 1'b0 && ^(funcB_0_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to funcB_0_13_reg"); $finish; end
	end
end
always @(*) begin
	/* funcB: %0*/
	/*   %14 = add i32 %12, %11*/
		funcB_0_14 = (funcB_0_12 + funcB_0_11);
end
always @(posedge clk) begin
	/* funcB: %0*/
	/*   %14 = add i32 %12, %11*/
	if ((cur_state == LEGUP_F_funcB_BB_0_4)) begin
		funcB_0_14_reg <= funcB_0_14;
		if (start == 1'b0 && ^(funcB_0_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to funcB_0_14_reg"); $finish; end
	end
end
always @(*) begin
	/* funcB: %0*/
	/*   %15 = add i32 %14, %13*/
		funcB_0_15 = (funcB_0_14_reg + funcB_0_13_reg);
end
always @(posedge clk) begin
	/* funcB: %0*/
	/*   %15 = add i32 %14, %13*/
	if ((cur_state == LEGUP_F_funcB_BB_0_5)) begin
		funcB_0_15_reg <= funcB_0_15;
		if (start == 1'b0 && ^(funcB_0_15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to funcB_0_15_reg"); $finish; end
	end
end
always @(*) begin
	/* funcB: %0*/
	/*   %16 = load volatile i32* getelementptr inbounds ([10 x i32]* @memC, i32 0, i32 4), align 4, !tbaa !1*/
		funcB_0_16 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* funcB: %0*/
	/*   %16 = load volatile i32* getelementptr inbounds ([10 x i32]* @memC, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_funcB_BB_0_5)) begin
		funcB_0_16_reg <= funcB_0_16;
		if (start == 1'b0 && ^(funcB_0_16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to funcB_0_16_reg"); $finish; end
	end
end
always @(*) begin
	/* funcB: %0*/
	/*   %17 = load volatile i32* getelementptr inbounds ([10 x i32]* @memD, i32 0, i32 4), align 4, !tbaa !1*/
		funcB_0_17 = memD_out_a;
end
always @(posedge clk) begin
	/* funcB: %0*/
	/*   %17 = load volatile i32* getelementptr inbounds ([10 x i32]* @memD, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_funcB_BB_0_4)) begin
		funcB_0_17_reg <= funcB_0_17;
		if (start == 1'b0 && ^(funcB_0_17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to funcB_0_17_reg"); $finish; end
	end
end
always @(*) begin
	/* funcB: %0*/
	/*   %18 = add i32 %16, %15*/
		funcB_0_18 = (funcB_0_16 + funcB_0_15);
end
always @(posedge clk) begin
	/* funcB: %0*/
	/*   %18 = add i32 %16, %15*/
	if ((cur_state == LEGUP_F_funcB_BB_0_5)) begin
		funcB_0_18_reg <= funcB_0_18;
		if (start == 1'b0 && ^(funcB_0_18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to funcB_0_18_reg"); $finish; end
	end
end
always @(*) begin
	/* funcB: %0*/
	/*   %19 = add i32 %18, %17*/
		funcB_0_19 = (funcB_0_18 + funcB_0_17_reg);
end
always @(posedge clk) begin
	/* funcB: %0*/
	/*   %19 = add i32 %18, %17*/
	if ((cur_state == LEGUP_F_funcB_BB_0_5)) begin
		funcB_0_19_reg <= funcB_0_19;
		if (start == 1'b0 && ^(funcB_0_19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to funcB_0_19_reg"); $finish; end
	end
end
always @(*) begin
	/* funcB: %0*/
	/*   %20 = load volatile i32* getelementptr inbounds ([10 x i32]* @memC, i32 0, i32 5), align 4, !tbaa !1*/
		funcB_0_20 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* funcB: %0*/
	/*   %20 = load volatile i32* getelementptr inbounds ([10 x i32]* @memC, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_funcB_BB_0_5)) begin
		funcB_0_20_reg <= funcB_0_20;
		if (start == 1'b0 && ^(funcB_0_20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to funcB_0_20_reg"); $finish; end
	end
end
always @(*) begin
	/* funcB: %0*/
	/*   %21 = load volatile i32* getelementptr inbounds ([10 x i32]* @memD, i32 0, i32 5), align 4, !tbaa !1*/
		funcB_0_21 = memD_out_b;
end
always @(posedge clk) begin
	/* funcB: %0*/
	/*   %21 = load volatile i32* getelementptr inbounds ([10 x i32]* @memD, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_funcB_BB_0_4)) begin
		funcB_0_21_reg <= funcB_0_21;
		if (start == 1'b0 && ^(funcB_0_21) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to funcB_0_21_reg"); $finish; end
	end
end
always @(*) begin
	/* funcB: %0*/
	/*   %22 = add i32 %20, %19*/
		funcB_0_22 = (funcB_0_20_reg + funcB_0_19_reg);
end
always @(posedge clk) begin
	/* funcB: %0*/
	/*   %22 = add i32 %20, %19*/
	if ((cur_state == LEGUP_F_funcB_BB_0_6)) begin
		funcB_0_22_reg <= funcB_0_22;
		if (start == 1'b0 && ^(funcB_0_22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to funcB_0_22_reg"); $finish; end
	end
end
always @(*) begin
	/* funcB: %0*/
	/*   %23 = add i32 %22, %21*/
		funcB_0_23 = (funcB_0_22 + funcB_0_21_reg);
end
always @(posedge clk) begin
	/* funcB: %0*/
	/*   %23 = add i32 %22, %21*/
	if ((cur_state == LEGUP_F_funcB_BB_0_6)) begin
		funcB_0_23_reg <= funcB_0_23;
		if (start == 1'b0 && ^(funcB_0_23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to funcB_0_23_reg"); $finish; end
	end
end
always @(*) begin
	/* funcB: %0*/
	/*   %24 = load volatile i32* getelementptr inbounds ([10 x i32]* @memC, i32 0, i32 6), align 4, !tbaa !1*/
		funcB_0_24 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* funcB: %0*/
	/*   %24 = load volatile i32* getelementptr inbounds ([10 x i32]* @memC, i32 0, i32 6), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_funcB_BB_0_6)) begin
		funcB_0_24_reg <= funcB_0_24;
		if (start == 1'b0 && ^(funcB_0_24) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to funcB_0_24_reg"); $finish; end
	end
end
always @(*) begin
	/* funcB: %0*/
	/*   %25 = load volatile i32* getelementptr inbounds ([10 x i32]* @memD, i32 0, i32 6), align 4, !tbaa !1*/
		funcB_0_25 = memD_out_a;
end
always @(posedge clk) begin
	/* funcB: %0*/
	/*   %25 = load volatile i32* getelementptr inbounds ([10 x i32]* @memD, i32 0, i32 6), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_funcB_BB_0_5)) begin
		funcB_0_25_reg <= funcB_0_25;
		if (start == 1'b0 && ^(funcB_0_25) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to funcB_0_25_reg"); $finish; end
	end
end
always @(*) begin
	/* funcB: %0*/
	/*   %26 = add i32 %24, %23*/
		funcB_0_26 = (funcB_0_24 + funcB_0_23);
end
always @(posedge clk) begin
	/* funcB: %0*/
	/*   %26 = add i32 %24, %23*/
	if ((cur_state == LEGUP_F_funcB_BB_0_6)) begin
		funcB_0_26_reg <= funcB_0_26;
		if (start == 1'b0 && ^(funcB_0_26) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to funcB_0_26_reg"); $finish; end
	end
end
always @(*) begin
	/* funcB: %0*/
	/*   %27 = add i32 %26, %25*/
		funcB_0_27 = (funcB_0_26_reg + funcB_0_25_reg);
end
always @(posedge clk) begin
	/* funcB: %0*/
	/*   %27 = add i32 %26, %25*/
	if ((cur_state == LEGUP_F_funcB_BB_0_7)) begin
		funcB_0_27_reg <= funcB_0_27;
		if (start == 1'b0 && ^(funcB_0_27) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to funcB_0_27_reg"); $finish; end
	end
end
always @(*) begin
	/* funcB: %0*/
	/*   %28 = load volatile i32* getelementptr inbounds ([10 x i32]* @memC, i32 0, i32 7), align 4, !tbaa !1*/
		funcB_0_28 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* funcB: %0*/
	/*   %28 = load volatile i32* getelementptr inbounds ([10 x i32]* @memC, i32 0, i32 7), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_funcB_BB_0_6)) begin
		funcB_0_28_reg <= funcB_0_28;
		if (start == 1'b0 && ^(funcB_0_28) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to funcB_0_28_reg"); $finish; end
	end
end
always @(*) begin
	/* funcB: %0*/
	/*   %29 = load volatile i32* getelementptr inbounds ([10 x i32]* @memD, i32 0, i32 7), align 4, !tbaa !1*/
		funcB_0_29 = memD_out_b;
end
always @(posedge clk) begin
	/* funcB: %0*/
	/*   %29 = load volatile i32* getelementptr inbounds ([10 x i32]* @memD, i32 0, i32 7), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_funcB_BB_0_5)) begin
		funcB_0_29_reg <= funcB_0_29;
		if (start == 1'b0 && ^(funcB_0_29) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to funcB_0_29_reg"); $finish; end
	end
end
always @(*) begin
	/* funcB: %0*/
	/*   %30 = add i32 %28, %27*/
		funcB_0_30 = (funcB_0_28_reg + funcB_0_27);
end
always @(posedge clk) begin
	/* funcB: %0*/
	/*   %30 = add i32 %28, %27*/
	if ((cur_state == LEGUP_F_funcB_BB_0_7)) begin
		funcB_0_30_reg <= funcB_0_30;
		if (start == 1'b0 && ^(funcB_0_30) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to funcB_0_30_reg"); $finish; end
	end
end
always @(*) begin
	/* funcB: %0*/
	/*   %31 = add i32 %30, %29*/
		funcB_0_31 = (funcB_0_30 + funcB_0_29_reg);
end
always @(posedge clk) begin
	/* funcB: %0*/
	/*   %31 = add i32 %30, %29*/
	if ((cur_state == LEGUP_F_funcB_BB_0_7)) begin
		funcB_0_31_reg <= funcB_0_31;
		if (start == 1'b0 && ^(funcB_0_31) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to funcB_0_31_reg"); $finish; end
	end
end
always @(*) begin
	/* funcB: %0*/
	/*   %32 = load volatile i32* getelementptr inbounds ([10 x i32]* @memC, i32 0, i32 8), align 4, !tbaa !1*/
		funcB_0_32 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* funcB: %0*/
	/*   %32 = load volatile i32* getelementptr inbounds ([10 x i32]* @memC, i32 0, i32 8), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_funcB_BB_0_7)) begin
		funcB_0_32_reg <= funcB_0_32;
		if (start == 1'b0 && ^(funcB_0_32) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to funcB_0_32_reg"); $finish; end
	end
end
always @(*) begin
	/* funcB: %0*/
	/*   %33 = load volatile i32* getelementptr inbounds ([10 x i32]* @memD, i32 0, i32 8), align 4, !tbaa !1*/
		funcB_0_33 = memD_out_a;
end
always @(posedge clk) begin
	/* funcB: %0*/
	/*   %33 = load volatile i32* getelementptr inbounds ([10 x i32]* @memD, i32 0, i32 8), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_funcB_BB_0_6)) begin
		funcB_0_33_reg <= funcB_0_33;
		if (start == 1'b0 && ^(funcB_0_33) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to funcB_0_33_reg"); $finish; end
	end
end
always @(*) begin
	/* funcB: %0*/
	/*   %34 = add i32 %32, %31*/
		funcB_0_34 = (funcB_0_32_reg + funcB_0_31_reg);
end
always @(posedge clk) begin
	/* funcB: %0*/
	/*   %34 = add i32 %32, %31*/
	if ((cur_state == LEGUP_F_funcB_BB_0_8)) begin
		funcB_0_34_reg <= funcB_0_34;
		if (start == 1'b0 && ^(funcB_0_34) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to funcB_0_34_reg"); $finish; end
	end
end
always @(*) begin
	/* funcB: %0*/
	/*   %35 = add i32 %34, %33*/
		funcB_0_35 = (funcB_0_34 + funcB_0_33_reg);
end
always @(posedge clk) begin
	/* funcB: %0*/
	/*   %35 = add i32 %34, %33*/
	if ((cur_state == LEGUP_F_funcB_BB_0_8)) begin
		funcB_0_35_reg <= funcB_0_35;
		if (start == 1'b0 && ^(funcB_0_35) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to funcB_0_35_reg"); $finish; end
	end
end
always @(*) begin
	/* funcB: %0*/
	/*   %36 = load volatile i32* getelementptr inbounds ([10 x i32]* @memC, i32 0, i32 9), align 4, !tbaa !1*/
		funcB_0_36 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* funcB: %0*/
	/*   %36 = load volatile i32* getelementptr inbounds ([10 x i32]* @memC, i32 0, i32 9), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_funcB_BB_0_7)) begin
		funcB_0_36_reg <= funcB_0_36;
		if (start == 1'b0 && ^(funcB_0_36) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to funcB_0_36_reg"); $finish; end
	end
end
always @(*) begin
	/* funcB: %0*/
	/*   %37 = load volatile i32* getelementptr inbounds ([10 x i32]* @memD, i32 0, i32 9), align 4, !tbaa !1*/
		funcB_0_37 = memD_out_b;
end
always @(posedge clk) begin
	/* funcB: %0*/
	/*   %37 = load volatile i32* getelementptr inbounds ([10 x i32]* @memD, i32 0, i32 9), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_funcB_BB_0_6)) begin
		funcB_0_37_reg <= funcB_0_37;
		if (start == 1'b0 && ^(funcB_0_37) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to funcB_0_37_reg"); $finish; end
	end
end
always @(*) begin
	/* funcB: %0*/
	/*   %38 = add i32 %36, %35*/
		funcB_0_38 = (funcB_0_36_reg + funcB_0_35);
end
always @(posedge clk) begin
	/* funcB: %0*/
	/*   %38 = add i32 %36, %35*/
	if ((cur_state == LEGUP_F_funcB_BB_0_8)) begin
		funcB_0_38_reg <= funcB_0_38;
		if (start == 1'b0 && ^(funcB_0_38) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to funcB_0_38_reg"); $finish; end
	end
end
always @(*) begin
	/* funcB: %0*/
	/*   %39 = add i32 %38, %37*/
		funcB_0_39 = (funcB_0_38_reg + funcB_0_37_reg);
end
always @(posedge clk) begin
	/* funcB: %0*/
	/*   %39 = add i32 %38, %37*/
	if ((cur_state == LEGUP_F_funcB_BB_0_9)) begin
		funcB_0_39_reg <= funcB_0_39;
		if (start == 1'b0 && ^(funcB_0_39) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to funcB_0_39_reg"); $finish; end
	end
end
always @(*) begin
	/* funcB: %0*/
	/*   %40 = add nsw i32 %39, %sum*/
		funcB_0_40 = (funcB_0_39 + arg_sum);
end
always @(posedge clk) begin
	/* funcB: %0*/
	/*   %40 = add nsw i32 %39, %sum*/
	if ((cur_state == LEGUP_F_funcB_BB_0_9)) begin
		funcB_0_40_reg <= funcB_0_40;
		if (start == 1'b0 && ^(funcB_0_40) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to funcB_0_40_reg"); $finish; end
	end
end
always @(*) begin
	memD_address_a = 1'd0;
	/* funcB: %0*/
	/*   %2 = load volatile i32* getelementptr inbounds ([10 x i32]* @memD, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_funcB_BB_0_1)) begin
		memD_address_a = (1'd0 >>> 3'd2);
	end
	/* funcB: %0*/
	/*   %9 = load volatile i32* getelementptr inbounds ([10 x i32]* @memD, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_funcB_BB_0_2)) begin
		memD_address_a = ((1'd0 + (4 * 32'd2)) >>> 3'd2);
	end
	/* funcB: %0*/
	/*   %17 = load volatile i32* getelementptr inbounds ([10 x i32]* @memD, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_funcB_BB_0_3)) begin
		memD_address_a = ((1'd0 + (4 * 32'd4)) >>> 3'd2);
	end
	/* funcB: %0*/
	/*   %25 = load volatile i32* getelementptr inbounds ([10 x i32]* @memD, i32 0, i32 6), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_funcB_BB_0_4)) begin
		memD_address_a = ((1'd0 + (4 * 32'd6)) >>> 3'd2);
	end
	/* funcB: %0*/
	/*   %33 = load volatile i32* getelementptr inbounds ([10 x i32]* @memD, i32 0, i32 8), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_funcB_BB_0_5)) begin
		memD_address_a = ((1'd0 + (4 * 32'd8)) >>> 3'd2);
	end
end
always @(*) begin
	memD_write_enable_a = 1'd0;
	/* funcB: %0*/
	/*   %2 = load volatile i32* getelementptr inbounds ([10 x i32]* @memD, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_funcB_BB_0_1)) begin
		memD_write_enable_a = 1'd0;
	end
	/* funcB: %0*/
	/*   %9 = load volatile i32* getelementptr inbounds ([10 x i32]* @memD, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_funcB_BB_0_2)) begin
		memD_write_enable_a = 1'd0;
	end
	/* funcB: %0*/
	/*   %17 = load volatile i32* getelementptr inbounds ([10 x i32]* @memD, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_funcB_BB_0_3)) begin
		memD_write_enable_a = 1'd0;
	end
	/* funcB: %0*/
	/*   %25 = load volatile i32* getelementptr inbounds ([10 x i32]* @memD, i32 0, i32 6), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_funcB_BB_0_4)) begin
		memD_write_enable_a = 1'd0;
	end
	/* funcB: %0*/
	/*   %33 = load volatile i32* getelementptr inbounds ([10 x i32]* @memD, i32 0, i32 8), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_funcB_BB_0_5)) begin
		memD_write_enable_a = 1'd0;
	end
end
always @(*) begin
	memD_address_b = 1'd0;
	/* funcB: %0*/
	/*   %5 = load volatile i32* getelementptr inbounds ([10 x i32]* @memD, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_funcB_BB_0_1)) begin
		memD_address_b = ((1'd0 + (4 * 32'd1)) >>> 3'd2);
	end
	/* funcB: %0*/
	/*   %13 = load volatile i32* getelementptr inbounds ([10 x i32]* @memD, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_funcB_BB_0_2)) begin
		memD_address_b = ((1'd0 + (4 * 32'd3)) >>> 3'd2);
	end
	/* funcB: %0*/
	/*   %21 = load volatile i32* getelementptr inbounds ([10 x i32]* @memD, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_funcB_BB_0_3)) begin
		memD_address_b = ((1'd0 + (4 * 32'd5)) >>> 3'd2);
	end
	/* funcB: %0*/
	/*   %29 = load volatile i32* getelementptr inbounds ([10 x i32]* @memD, i32 0, i32 7), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_funcB_BB_0_4)) begin
		memD_address_b = ((1'd0 + (4 * 32'd7)) >>> 3'd2);
	end
	/* funcB: %0*/
	/*   %37 = load volatile i32* getelementptr inbounds ([10 x i32]* @memD, i32 0, i32 9), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_funcB_BB_0_5)) begin
		memD_address_b = ((1'd0 + (4 * 32'd9)) >>> 3'd2);
	end
end
always @(*) begin
	memD_write_enable_b = 1'd0;
	/* funcB: %0*/
	/*   %5 = load volatile i32* getelementptr inbounds ([10 x i32]* @memD, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_funcB_BB_0_1)) begin
		memD_write_enable_b = 1'd0;
	end
	/* funcB: %0*/
	/*   %13 = load volatile i32* getelementptr inbounds ([10 x i32]* @memD, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_funcB_BB_0_2)) begin
		memD_write_enable_b = 1'd0;
	end
	/* funcB: %0*/
	/*   %21 = load volatile i32* getelementptr inbounds ([10 x i32]* @memD, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_funcB_BB_0_3)) begin
		memD_write_enable_b = 1'd0;
	end
	/* funcB: %0*/
	/*   %29 = load volatile i32* getelementptr inbounds ([10 x i32]* @memD, i32 0, i32 7), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_funcB_BB_0_4)) begin
		memD_write_enable_b = 1'd0;
	end
	/* funcB: %0*/
	/*   %37 = load volatile i32* getelementptr inbounds ([10 x i32]* @memD, i32 0, i32 9), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_funcB_BB_0_5)) begin
		memD_write_enable_b = 1'd0;
	end
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		finish <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
	/* funcB: %0*/
	/*   ret i32 %40*/
	if ((cur_state == LEGUP_F_funcB_BB_0_9)) begin
		finish <= (memory_controller_waitrequest == 1'd0);
		if (start == 1'b0 && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
end
always @(*) begin
	memory_controller_enable_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_enable_a = 1'd0;
	end
	/* funcB: %0*/
	/*   %1 = load volatile i32* getelementptr inbounds ([10 x i32]* @memC, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_funcB_BB_0_1)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* funcB: %0*/
	/*   %8 = load volatile i32* getelementptr inbounds ([10 x i32]* @memC, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_funcB_BB_0_2)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* funcB: %0*/
	/*   %16 = load volatile i32* getelementptr inbounds ([10 x i32]* @memC, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_funcB_BB_0_3)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* funcB: %0*/
	/*   %24 = load volatile i32* getelementptr inbounds ([10 x i32]* @memC, i32 0, i32 6), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_funcB_BB_0_4)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* funcB: %0*/
	/*   %32 = load volatile i32* getelementptr inbounds ([10 x i32]* @memC, i32 0, i32 8), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_funcB_BB_0_5)) begin
		memory_controller_enable_a = 1'd1;
	end
end
always @(*) begin
	memory_controller_address_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_address_a = 1'd0;
	end
	/* funcB: %0*/
	/*   %1 = load volatile i32* getelementptr inbounds ([10 x i32]* @memC, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_funcB_BB_0_1)) begin
		memory_controller_address_a = `TAG_g_memC_a;
	end
	/* funcB: %0*/
	/*   %8 = load volatile i32* getelementptr inbounds ([10 x i32]* @memC, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_funcB_BB_0_2)) begin
		memory_controller_address_a = (`TAG_g_memC_a + (4 * 32'd2));
	end
	/* funcB: %0*/
	/*   %16 = load volatile i32* getelementptr inbounds ([10 x i32]* @memC, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_funcB_BB_0_3)) begin
		memory_controller_address_a = (`TAG_g_memC_a + (4 * 32'd4));
	end
	/* funcB: %0*/
	/*   %24 = load volatile i32* getelementptr inbounds ([10 x i32]* @memC, i32 0, i32 6), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_funcB_BB_0_4)) begin
		memory_controller_address_a = (`TAG_g_memC_a + (4 * 32'd6));
	end
	/* funcB: %0*/
	/*   %32 = load volatile i32* getelementptr inbounds ([10 x i32]* @memC, i32 0, i32 8), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_funcB_BB_0_5)) begin
		memory_controller_address_a = (`TAG_g_memC_a + (4 * 32'd8));
	end
end
always @(*) begin
	memory_controller_write_enable_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* funcB: %0*/
	/*   %1 = load volatile i32* getelementptr inbounds ([10 x i32]* @memC, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_funcB_BB_0_1)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* funcB: %0*/
	/*   %8 = load volatile i32* getelementptr inbounds ([10 x i32]* @memC, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_funcB_BB_0_2)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* funcB: %0*/
	/*   %16 = load volatile i32* getelementptr inbounds ([10 x i32]* @memC, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_funcB_BB_0_3)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* funcB: %0*/
	/*   %24 = load volatile i32* getelementptr inbounds ([10 x i32]* @memC, i32 0, i32 6), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_funcB_BB_0_4)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* funcB: %0*/
	/*   %32 = load volatile i32* getelementptr inbounds ([10 x i32]* @memC, i32 0, i32 8), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_funcB_BB_0_5)) begin
		memory_controller_write_enable_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_in_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_in_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_size_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_size_a = 1'd0;
	end
	/* funcB: %0*/
	/*   %1 = load volatile i32* getelementptr inbounds ([10 x i32]* @memC, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_funcB_BB_0_1)) begin
		memory_controller_size_a = 2'd2;
	end
	/* funcB: %0*/
	/*   %8 = load volatile i32* getelementptr inbounds ([10 x i32]* @memC, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_funcB_BB_0_2)) begin
		memory_controller_size_a = 2'd2;
	end
	/* funcB: %0*/
	/*   %16 = load volatile i32* getelementptr inbounds ([10 x i32]* @memC, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_funcB_BB_0_3)) begin
		memory_controller_size_a = 2'd2;
	end
	/* funcB: %0*/
	/*   %24 = load volatile i32* getelementptr inbounds ([10 x i32]* @memC, i32 0, i32 6), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_funcB_BB_0_4)) begin
		memory_controller_size_a = 2'd2;
	end
	/* funcB: %0*/
	/*   %32 = load volatile i32* getelementptr inbounds ([10 x i32]* @memC, i32 0, i32 8), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_funcB_BB_0_5)) begin
		memory_controller_size_a = 2'd2;
	end
end
always @(*) begin
	memory_controller_enable_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_enable_b = 1'd0;
	end
	/* funcB: %0*/
	/*   %4 = load volatile i32* getelementptr inbounds ([10 x i32]* @memC, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_funcB_BB_0_1)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* funcB: %0*/
	/*   %12 = load volatile i32* getelementptr inbounds ([10 x i32]* @memC, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_funcB_BB_0_2)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* funcB: %0*/
	/*   %20 = load volatile i32* getelementptr inbounds ([10 x i32]* @memC, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_funcB_BB_0_3)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* funcB: %0*/
	/*   %28 = load volatile i32* getelementptr inbounds ([10 x i32]* @memC, i32 0, i32 7), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_funcB_BB_0_4)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* funcB: %0*/
	/*   %36 = load volatile i32* getelementptr inbounds ([10 x i32]* @memC, i32 0, i32 9), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_funcB_BB_0_5)) begin
		memory_controller_enable_b = 1'd1;
	end
end
always @(*) begin
	memory_controller_address_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_address_b = 1'd0;
	end
	/* funcB: %0*/
	/*   %4 = load volatile i32* getelementptr inbounds ([10 x i32]* @memC, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_funcB_BB_0_1)) begin
		memory_controller_address_b = (`TAG_g_memC_a + (4 * 32'd1));
	end
	/* funcB: %0*/
	/*   %12 = load volatile i32* getelementptr inbounds ([10 x i32]* @memC, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_funcB_BB_0_2)) begin
		memory_controller_address_b = (`TAG_g_memC_a + (4 * 32'd3));
	end
	/* funcB: %0*/
	/*   %20 = load volatile i32* getelementptr inbounds ([10 x i32]* @memC, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_funcB_BB_0_3)) begin
		memory_controller_address_b = (`TAG_g_memC_a + (4 * 32'd5));
	end
	/* funcB: %0*/
	/*   %28 = load volatile i32* getelementptr inbounds ([10 x i32]* @memC, i32 0, i32 7), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_funcB_BB_0_4)) begin
		memory_controller_address_b = (`TAG_g_memC_a + (4 * 32'd7));
	end
	/* funcB: %0*/
	/*   %36 = load volatile i32* getelementptr inbounds ([10 x i32]* @memC, i32 0, i32 9), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_funcB_BB_0_5)) begin
		memory_controller_address_b = (`TAG_g_memC_a + (4 * 32'd9));
	end
end
always @(*) begin
	memory_controller_write_enable_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* funcB: %0*/
	/*   %4 = load volatile i32* getelementptr inbounds ([10 x i32]* @memC, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_funcB_BB_0_1)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* funcB: %0*/
	/*   %12 = load volatile i32* getelementptr inbounds ([10 x i32]* @memC, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_funcB_BB_0_2)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* funcB: %0*/
	/*   %20 = load volatile i32* getelementptr inbounds ([10 x i32]* @memC, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_funcB_BB_0_3)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* funcB: %0*/
	/*   %28 = load volatile i32* getelementptr inbounds ([10 x i32]* @memC, i32 0, i32 7), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_funcB_BB_0_4)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* funcB: %0*/
	/*   %36 = load volatile i32* getelementptr inbounds ([10 x i32]* @memC, i32 0, i32 9), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_funcB_BB_0_5)) begin
		memory_controller_write_enable_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_in_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_in_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_size_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_size_b = 1'd0;
	end
	/* funcB: %0*/
	/*   %4 = load volatile i32* getelementptr inbounds ([10 x i32]* @memC, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_funcB_BB_0_1)) begin
		memory_controller_size_b = 2'd2;
	end
	/* funcB: %0*/
	/*   %12 = load volatile i32* getelementptr inbounds ([10 x i32]* @memC, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_funcB_BB_0_2)) begin
		memory_controller_size_b = 2'd2;
	end
	/* funcB: %0*/
	/*   %20 = load volatile i32* getelementptr inbounds ([10 x i32]* @memC, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_funcB_BB_0_3)) begin
		memory_controller_size_b = 2'd2;
	end
	/* funcB: %0*/
	/*   %28 = load volatile i32* getelementptr inbounds ([10 x i32]* @memC, i32 0, i32 7), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_funcB_BB_0_4)) begin
		memory_controller_size_b = 2'd2;
	end
	/* funcB: %0*/
	/*   %36 = load volatile i32* getelementptr inbounds ([10 x i32]* @memC, i32 0, i32 9), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_funcB_BB_0_5)) begin
		memory_controller_size_b = 2'd2;
	end
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		return_val <= 0;
		if (start == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
	end
	/* funcB: %0*/
	/*   ret i32 %40*/
	if ((cur_state == LEGUP_F_funcB_BB_0_9)) begin
		return_val <= funcB_0_40;
		if (start == 1'b0 && ^(funcB_0_40) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
	end
end

endmodule 
`timescale 1 ns / 1 ns
module funcA
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
    funcB_arg_sum,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b,
	memory_controller_waitrequest,
	return_val,
    funcB_start,
    funcB_finish,
    funcB_return_val
);

parameter [3:0] LEGUP_0 = 4'd0;
parameter [3:0] LEGUP_F_funcA_BB_0_1 = 4'd1;
parameter [3:0] LEGUP_F_funcA_BB_0_2 = 4'd2;
parameter [3:0] LEGUP_F_funcA_BB_0_3 = 4'd3;
parameter [3:0] LEGUP_F_funcA_BB_0_4 = 4'd4;
parameter [3:0] LEGUP_F_funcA_BB_0_5 = 4'd5;
parameter [3:0] LEGUP_F_funcA_BB_0_6 = 4'd6;
parameter [3:0] LEGUP_F_funcA_BB_0_7 = 4'd7;
parameter [3:0] LEGUP_F_funcA_BB_0_8 = 4'd8;
parameter [3:0] LEGUP_F_funcA_BB_0_9 = 4'd9;
parameter [3:0] LEGUP_F_funcA_BB_0_10 = 4'd10;
parameter [3:0] LEGUP_F_funcA_BB_0_11 = 4'd11;
parameter [3:0] LEGUP_F_funcA_BB_0_12 = 4'd12;
parameter [3:0] LEGUP_F_funcA_BB_0_14 = 4'd14;
parameter [8:0] tag_offset = 9'd0;
parameter [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tag_addr_offset = {tag_offset, 23'd0};
parameter [3:0] LEGUP_function_call_13 = 4'd13;

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
input  memory_controller_waitrequest;
output reg [31:0] return_val;
output reg  funcB_start;
input  funcB_finish;
input [31:0] funcB_return_val;
output reg [31:0] funcB_arg_sum;
reg [3:0] cur_state;
reg [31:0] funcA_0_1;
reg [31:0] funcA_0_1_reg;
reg [31:0] funcA_0_2;
reg [31:0] funcA_0_2_reg;
reg [31:0] funcA_0_3;
reg [31:0] funcA_0_3_reg;
reg [31:0] funcA_0_4;
reg [31:0] funcA_0_4_reg;
reg [31:0] funcA_0_5;
reg [31:0] funcA_0_5_reg;
reg [31:0] funcA_0_6;
reg [31:0] funcA_0_6_reg;
reg [31:0] funcA_0_7;
reg [31:0] funcA_0_7_reg;
reg [31:0] funcA_0_8;
reg [31:0] funcA_0_8_reg;
reg [31:0] funcA_0_9;
reg [31:0] funcA_0_9_reg;
reg [31:0] funcA_0_10;
reg [31:0] funcA_0_10_reg;
reg [31:0] funcA_0_11;
reg [31:0] funcA_0_11_reg;
reg [31:0] funcA_0_12;
reg [31:0] funcA_0_12_reg;
reg [31:0] funcA_0_13;
reg [31:0] funcA_0_13_reg;
reg [31:0] funcA_0_14;
reg [31:0] funcA_0_14_reg;
reg [31:0] funcA_0_15;
reg [31:0] funcA_0_15_reg;
reg [31:0] funcA_0_16;
reg [31:0] funcA_0_16_reg;
reg [31:0] funcA_0_17;
reg [31:0] funcA_0_17_reg;
reg [31:0] funcA_0_18;
reg [31:0] funcA_0_18_reg;
reg [31:0] funcA_0_19;
reg [31:0] funcA_0_19_reg;
reg [31:0] funcA_0_20;
reg [31:0] funcA_0_20_reg;
reg [31:0] funcA_0_21;
reg [31:0] funcA_0_21_reg;
reg [31:0] funcA_0_22;
reg [31:0] funcA_0_22_reg;
reg [31:0] funcA_0_23;
reg [31:0] funcA_0_23_reg;
reg [31:0] funcA_0_24;
reg [31:0] funcA_0_24_reg;
reg [31:0] funcA_0_25;
reg [31:0] funcA_0_25_reg;
reg [31:0] funcA_0_26;
reg [31:0] funcA_0_26_reg;
reg [31:0] funcA_0_27;
reg [31:0] funcA_0_27_reg;
reg [31:0] funcA_0_28;
reg [31:0] funcA_0_28_reg;
reg [31:0] funcA_0_29;
reg [31:0] funcA_0_29_reg;
reg [31:0] funcA_0_30;
reg [31:0] funcA_0_30_reg;
reg [31:0] funcA_0_31;
reg [31:0] funcA_0_31_reg;
reg [31:0] funcA_0_32;
reg [31:0] funcA_0_32_reg;
reg [31:0] funcA_0_33;
reg [31:0] funcA_0_33_reg;
reg [31:0] funcA_0_34;
reg [31:0] funcA_0_34_reg;
reg [31:0] funcA_0_35;
reg [31:0] funcA_0_35_reg;
reg [31:0] funcA_0_36;
reg [31:0] funcA_0_36_reg;
reg [31:0] funcA_0_37;
reg [31:0] funcA_0_37_reg;
reg [31:0] funcA_0_38;
reg [31:0] funcA_0_38_reg;
reg [31:0] funcA_0_39;
reg [31:0] funcA_0_39_reg;
reg [31:0] funcA_0_40;
reg [31:0] funcA_0_40_reg;
wire [3:0] memA_address_a;
wire  memA_write_enable_a;
wire [31:0] memA_in_a;
wire [31:0] memA_out_a;
wire [3:0] memA_address_b;
wire  memA_write_enable_b;
wire [31:0] memA_in_b;
wire [31:0] memA_out_b;
wire [3:0] memC_address_a;
wire  memC_write_enable_a;
wire [31:0] memC_in_a;
wire [31:0] memC_out_a;
wire [3:0] memC_address_b;
wire  memC_write_enable_b;
wire [31:0] memC_in_b;
wire [31:0] memC_out_b;
wire [3:0] memD_address_a;
wire  memD_write_enable_a;
wire [31:0] memD_in_a;
wire [31:0] memD_out_a;
wire [3:0] memD_address_b;
wire  memD_write_enable_b;
wire [31:0] memD_in_b;
wire [31:0] memD_out_b;
wire [3:0] memB_address_a;
wire  memB_write_enable_a;
wire [31:0] memB_in_a;
wire [31:0] memB_out_a;
wire [3:0] memB_address_b;
wire  memB_write_enable_b;
wire [31:0] memB_in_b;
wire [31:0] memB_out_b;
wire  funcB_memory_controller_enable_a;
wire  funcB_memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] funcB_memory_controller_address_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] funcB_memory_controller_in_a;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] funcB_memory_controller_out_a;
wire [1:0] funcB_memory_controller_size_a;
wire  funcB_memory_controller_enable_b;
wire  funcB_memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] funcB_memory_controller_address_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] funcB_memory_controller_in_b;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] funcB_memory_controller_out_b;
wire [1:0] funcB_memory_controller_size_b;
reg  funcB_memory_controller_waitrequest;
reg  funcB_finish_final;
reg  funcB_finish_reg;
reg [31:0] funcB_return_val_reg;
reg  legup_function_call;
wire [15:0] legup_pthreadpoll_threadID;
wire [15:0] legup_pthreadpoll_functionID;


always @(posedge clk) begin
	if (((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd1))) begin
		cur_state <= LEGUP_0;
		if (start == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
	end
	if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd1))) begin
		cur_state <= LEGUP_F_funcA_BB_0_1;
		if (start == 1'b0 && ^(LEGUP_F_funcA_BB_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
	end
	if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd0))) begin
		cur_state <= LEGUP_0;
		if (start == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
	end
	if (((cur_state == LEGUP_F_funcA_BB_0_1) & (memory_controller_waitrequest == 1'd1))) begin
		cur_state <= LEGUP_F_funcA_BB_0_1;
		if (start == 1'b0 && ^(LEGUP_F_funcA_BB_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
	end
	if (((cur_state == LEGUP_F_funcA_BB_0_1) & (memory_controller_waitrequest == 1'd0))) begin
		cur_state <= LEGUP_F_funcA_BB_0_2;
		if (start == 1'b0 && ^(LEGUP_F_funcA_BB_0_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
	end
	if (((cur_state == LEGUP_F_funcA_BB_0_2) & (memory_controller_waitrequest == 1'd1))) begin
		cur_state <= LEGUP_F_funcA_BB_0_2;
		if (start == 1'b0 && ^(LEGUP_F_funcA_BB_0_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
	end
	if (((cur_state == LEGUP_F_funcA_BB_0_2) & (memory_controller_waitrequest == 1'd0))) begin
		cur_state <= LEGUP_F_funcA_BB_0_3;
		if (start == 1'b0 && ^(LEGUP_F_funcA_BB_0_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
	end
	if (((cur_state == LEGUP_F_funcA_BB_0_3) & (memory_controller_waitrequest == 1'd1))) begin
		cur_state <= LEGUP_F_funcA_BB_0_3;
		if (start == 1'b0 && ^(LEGUP_F_funcA_BB_0_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
	end
	if (((cur_state == LEGUP_F_funcA_BB_0_3) & (memory_controller_waitrequest == 1'd0))) begin
		cur_state <= LEGUP_F_funcA_BB_0_4;
		if (start == 1'b0 && ^(LEGUP_F_funcA_BB_0_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
	end
	if (((cur_state == LEGUP_F_funcA_BB_0_4) & (memory_controller_waitrequest == 1'd1))) begin
		cur_state <= LEGUP_F_funcA_BB_0_4;
		if (start == 1'b0 && ^(LEGUP_F_funcA_BB_0_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
	end
	if (((cur_state == LEGUP_F_funcA_BB_0_4) & (memory_controller_waitrequest == 1'd0))) begin
		cur_state <= LEGUP_F_funcA_BB_0_5;
		if (start == 1'b0 && ^(LEGUP_F_funcA_BB_0_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
	end
	if (((cur_state == LEGUP_F_funcA_BB_0_5) & (memory_controller_waitrequest == 1'd1))) begin
		cur_state <= LEGUP_F_funcA_BB_0_5;
		if (start == 1'b0 && ^(LEGUP_F_funcA_BB_0_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
	end
	if (((cur_state == LEGUP_F_funcA_BB_0_5) & (memory_controller_waitrequest == 1'd0))) begin
		cur_state <= LEGUP_F_funcA_BB_0_6;
		if (start == 1'b0 && ^(LEGUP_F_funcA_BB_0_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
	end
	if (((cur_state == LEGUP_F_funcA_BB_0_6) & (memory_controller_waitrequest == 1'd1))) begin
		cur_state <= LEGUP_F_funcA_BB_0_6;
		if (start == 1'b0 && ^(LEGUP_F_funcA_BB_0_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
	end
	if (((cur_state == LEGUP_F_funcA_BB_0_6) & (memory_controller_waitrequest == 1'd0))) begin
		cur_state <= LEGUP_F_funcA_BB_0_7;
		if (start == 1'b0 && ^(LEGUP_F_funcA_BB_0_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
	end
	if (((cur_state == LEGUP_F_funcA_BB_0_7) & (memory_controller_waitrequest == 1'd1))) begin
		cur_state <= LEGUP_F_funcA_BB_0_7;
		if (start == 1'b0 && ^(LEGUP_F_funcA_BB_0_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
	end
	if (((cur_state == LEGUP_F_funcA_BB_0_7) & (memory_controller_waitrequest == 1'd0))) begin
		cur_state <= LEGUP_F_funcA_BB_0_8;
		if (start == 1'b0 && ^(LEGUP_F_funcA_BB_0_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
	end
	if (((cur_state == LEGUP_F_funcA_BB_0_8) & (memory_controller_waitrequest == 1'd1))) begin
		cur_state <= LEGUP_F_funcA_BB_0_8;
		if (start == 1'b0 && ^(LEGUP_F_funcA_BB_0_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
	end
	if (((cur_state == LEGUP_F_funcA_BB_0_8) & (memory_controller_waitrequest == 1'd0))) begin
		cur_state <= LEGUP_F_funcA_BB_0_9;
		if (start == 1'b0 && ^(LEGUP_F_funcA_BB_0_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
	end
	if (((cur_state == LEGUP_F_funcA_BB_0_9) & (memory_controller_waitrequest == 1'd1))) begin
		cur_state <= LEGUP_F_funcA_BB_0_9;
		if (start == 1'b0 && ^(LEGUP_F_funcA_BB_0_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
	end
	if (((cur_state == LEGUP_F_funcA_BB_0_9) & (memory_controller_waitrequest == 1'd0))) begin
		cur_state <= LEGUP_F_funcA_BB_0_10;
		if (start == 1'b0 && ^(LEGUP_F_funcA_BB_0_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
	end
	if (((cur_state == LEGUP_F_funcA_BB_0_10) & (memory_controller_waitrequest == 1'd1))) begin
		cur_state <= LEGUP_F_funcA_BB_0_10;
		if (start == 1'b0 && ^(LEGUP_F_funcA_BB_0_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
	end
	if (((cur_state == LEGUP_F_funcA_BB_0_10) & (memory_controller_waitrequest == 1'd0))) begin
		cur_state <= LEGUP_F_funcA_BB_0_11;
		if (start == 1'b0 && ^(LEGUP_F_funcA_BB_0_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
	end
	if (((cur_state == LEGUP_F_funcA_BB_0_11) & (memory_controller_waitrequest == 1'd1))) begin
		cur_state <= LEGUP_F_funcA_BB_0_11;
		if (start == 1'b0 && ^(LEGUP_F_funcA_BB_0_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
	end
	if (((cur_state == LEGUP_F_funcA_BB_0_11) & (memory_controller_waitrequest == 1'd0))) begin
		cur_state <= LEGUP_F_funcA_BB_0_12;
		if (start == 1'b0 && ^(LEGUP_F_funcA_BB_0_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
	end
	if (((cur_state == LEGUP_F_funcA_BB_0_12) & (memory_controller_waitrequest == 1'd1))) begin
		cur_state <= LEGUP_F_funcA_BB_0_12;
		if (start == 1'b0 && ^(LEGUP_F_funcA_BB_0_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
	end
	if (((cur_state == LEGUP_F_funcA_BB_0_12) & (memory_controller_waitrequest == 1'd0))) begin
		cur_state <= LEGUP_function_call_13;
		if (start == 1'b0 && ^(LEGUP_function_call_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
	end
	if (((cur_state == LEGUP_function_call_13) & (memory_controller_waitrequest == 1'd1))) begin
		cur_state <= LEGUP_function_call_13;
		if (start == 1'b0 && ^(LEGUP_function_call_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
	end
	if ((((cur_state == LEGUP_function_call_13) & (memory_controller_waitrequest == 1'd0)) & (funcB_finish_final == 1'd1))) begin
		cur_state <= LEGUP_F_funcA_BB_0_14;
		if (start == 1'b0 && ^(LEGUP_F_funcA_BB_0_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
	end
	if ((((cur_state == LEGUP_function_call_13) & (memory_controller_waitrequest == 1'd0)) & (funcB_finish_final == 1'd0))) begin
		cur_state <= LEGUP_function_call_13;
		if (start == 1'b0 && ^(LEGUP_function_call_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
	end
	if (((cur_state == LEGUP_F_funcA_BB_0_14) & (memory_controller_waitrequest == 1'd1))) begin
		cur_state <= LEGUP_F_funcA_BB_0_14;
		if (start == 1'b0 && ^(LEGUP_F_funcA_BB_0_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
	end
	if (((cur_state == LEGUP_F_funcA_BB_0_14) & (memory_controller_waitrequest == 1'd0))) begin
		cur_state <= LEGUP_0;
		if (start == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
	end
	if ((reset == 1'd1)) begin
		cur_state <= 4'd0;
		if (start == 1'b0 && ^(4'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
	end
end
always @(*) begin
	/* funcA: %0*/
	/*   %1 = load volatile i32* getelementptr inbounds ([10 x i32]* @memB, i32 0, i32 0), align 4, !tbaa !1*/
		funcA_0_1 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* funcA: %0*/
	/*   %1 = load volatile i32* getelementptr inbounds ([10 x i32]* @memB, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_funcA_BB_0_3)) begin
		funcA_0_1_reg <= funcA_0_1;
		if (start == 1'b0 && ^(funcA_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to funcA_0_1_reg"); $finish; end
	end
end
always @(*) begin
	/* funcA: %0*/
	/*   %2 = load volatile i32* getelementptr inbounds ([10 x i32]* @memC, i32 0, i32 0), align 4, !tbaa !1*/
		funcA_0_2 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* funcA: %0*/
	/*   %2 = load volatile i32* getelementptr inbounds ([10 x i32]* @memC, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_funcA_BB_0_3)) begin
		funcA_0_2_reg <= funcA_0_2;
		if (start == 1'b0 && ^(funcA_0_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to funcA_0_2_reg"); $finish; end
	end
end
always @(*) begin
	/* funcA: %0*/
	/*   %3 = add i32 %1, %2*/
		funcA_0_3 = (funcA_0_1 + funcA_0_2);
end
always @(posedge clk) begin
	/* funcA: %0*/
	/*   %3 = add i32 %1, %2*/
	if ((cur_state == LEGUP_F_funcA_BB_0_3)) begin
		funcA_0_3_reg <= funcA_0_3;
		if (start == 1'b0 && ^(funcA_0_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to funcA_0_3_reg"); $finish; end
	end
end
always @(*) begin
	/* funcA: %0*/
	/*   %4 = load volatile i32* getelementptr inbounds ([10 x i32]* @memB, i32 0, i32 1), align 4, !tbaa !1*/
		funcA_0_4 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* funcA: %0*/
	/*   %4 = load volatile i32* getelementptr inbounds ([10 x i32]* @memB, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_funcA_BB_0_4)) begin
		funcA_0_4_reg <= funcA_0_4;
		if (start == 1'b0 && ^(funcA_0_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to funcA_0_4_reg"); $finish; end
	end
end
always @(*) begin
	/* funcA: %0*/
	/*   %5 = load volatile i32* getelementptr inbounds ([10 x i32]* @memC, i32 0, i32 1), align 4, !tbaa !1*/
		funcA_0_5 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* funcA: %0*/
	/*   %5 = load volatile i32* getelementptr inbounds ([10 x i32]* @memC, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_funcA_BB_0_4)) begin
		funcA_0_5_reg <= funcA_0_5;
		if (start == 1'b0 && ^(funcA_0_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to funcA_0_5_reg"); $finish; end
	end
end
always @(*) begin
	/* funcA: %0*/
	/*   %6 = add i32 %4, %3*/
		funcA_0_6 = (funcA_0_4 + funcA_0_3_reg);
end
always @(posedge clk) begin
	/* funcA: %0*/
	/*   %6 = add i32 %4, %3*/
	if ((cur_state == LEGUP_F_funcA_BB_0_4)) begin
		funcA_0_6_reg <= funcA_0_6;
		if (start == 1'b0 && ^(funcA_0_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to funcA_0_6_reg"); $finish; end
	end
end
always @(*) begin
	/* funcA: %0*/
	/*   %7 = add i32 %6, %5*/
		funcA_0_7 = (funcA_0_6 + funcA_0_5);
end
always @(posedge clk) begin
	/* funcA: %0*/
	/*   %7 = add i32 %6, %5*/
	if ((cur_state == LEGUP_F_funcA_BB_0_4)) begin
		funcA_0_7_reg <= funcA_0_7;
		if (start == 1'b0 && ^(funcA_0_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to funcA_0_7_reg"); $finish; end
	end
end
always @(*) begin
	/* funcA: %0*/
	/*   %8 = load volatile i32* getelementptr inbounds ([10 x i32]* @memB, i32 0, i32 2), align 4, !tbaa !1*/
		funcA_0_8 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* funcA: %0*/
	/*   %8 = load volatile i32* getelementptr inbounds ([10 x i32]* @memB, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_funcA_BB_0_5)) begin
		funcA_0_8_reg <= funcA_0_8;
		if (start == 1'b0 && ^(funcA_0_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to funcA_0_8_reg"); $finish; end
	end
end
always @(*) begin
	/* funcA: %0*/
	/*   %9 = load volatile i32* getelementptr inbounds ([10 x i32]* @memC, i32 0, i32 2), align 4, !tbaa !1*/
		funcA_0_9 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* funcA: %0*/
	/*   %9 = load volatile i32* getelementptr inbounds ([10 x i32]* @memC, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_funcA_BB_0_5)) begin
		funcA_0_9_reg <= funcA_0_9;
		if (start == 1'b0 && ^(funcA_0_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to funcA_0_9_reg"); $finish; end
	end
end
always @(*) begin
	/* funcA: %0*/
	/*   %10 = add i32 %8, %7*/
		funcA_0_10 = (funcA_0_8 + funcA_0_7_reg);
end
always @(posedge clk) begin
	/* funcA: %0*/
	/*   %10 = add i32 %8, %7*/
	if ((cur_state == LEGUP_F_funcA_BB_0_5)) begin
		funcA_0_10_reg <= funcA_0_10;
		if (start == 1'b0 && ^(funcA_0_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to funcA_0_10_reg"); $finish; end
	end
end
always @(*) begin
	/* funcA: %0*/
	/*   %11 = add i32 %10, %9*/
		funcA_0_11 = (funcA_0_10 + funcA_0_9);
end
always @(posedge clk) begin
	/* funcA: %0*/
	/*   %11 = add i32 %10, %9*/
	if ((cur_state == LEGUP_F_funcA_BB_0_5)) begin
		funcA_0_11_reg <= funcA_0_11;
		if (start == 1'b0 && ^(funcA_0_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to funcA_0_11_reg"); $finish; end
	end
end
always @(*) begin
	/* funcA: %0*/
	/*   %12 = load volatile i32* getelementptr inbounds ([10 x i32]* @memB, i32 0, i32 3), align 4, !tbaa !1*/
		funcA_0_12 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* funcA: %0*/
	/*   %12 = load volatile i32* getelementptr inbounds ([10 x i32]* @memB, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_funcA_BB_0_6)) begin
		funcA_0_12_reg <= funcA_0_12;
		if (start == 1'b0 && ^(funcA_0_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to funcA_0_12_reg"); $finish; end
	end
end
always @(*) begin
	/* funcA: %0*/
	/*   %13 = load volatile i32* getelementptr inbounds ([10 x i32]* @memC, i32 0, i32 3), align 4, !tbaa !1*/
		funcA_0_13 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* funcA: %0*/
	/*   %13 = load volatile i32* getelementptr inbounds ([10 x i32]* @memC, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_funcA_BB_0_6)) begin
		funcA_0_13_reg <= funcA_0_13;
		if (start == 1'b0 && ^(funcA_0_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to funcA_0_13_reg"); $finish; end
	end
end
always @(*) begin
	/* funcA: %0*/
	/*   %14 = add i32 %12, %11*/
		funcA_0_14 = (funcA_0_12 + funcA_0_11_reg);
end
always @(posedge clk) begin
	/* funcA: %0*/
	/*   %14 = add i32 %12, %11*/
	if ((cur_state == LEGUP_F_funcA_BB_0_6)) begin
		funcA_0_14_reg <= funcA_0_14;
		if (start == 1'b0 && ^(funcA_0_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to funcA_0_14_reg"); $finish; end
	end
end
always @(*) begin
	/* funcA: %0*/
	/*   %15 = add i32 %14, %13*/
		funcA_0_15 = (funcA_0_14 + funcA_0_13);
end
always @(posedge clk) begin
	/* funcA: %0*/
	/*   %15 = add i32 %14, %13*/
	if ((cur_state == LEGUP_F_funcA_BB_0_6)) begin
		funcA_0_15_reg <= funcA_0_15;
		if (start == 1'b0 && ^(funcA_0_15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to funcA_0_15_reg"); $finish; end
	end
end
always @(*) begin
	/* funcA: %0*/
	/*   %16 = load volatile i32* getelementptr inbounds ([10 x i32]* @memB, i32 0, i32 4), align 4, !tbaa !1*/
		funcA_0_16 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* funcA: %0*/
	/*   %16 = load volatile i32* getelementptr inbounds ([10 x i32]* @memB, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_funcA_BB_0_7)) begin
		funcA_0_16_reg <= funcA_0_16;
		if (start == 1'b0 && ^(funcA_0_16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to funcA_0_16_reg"); $finish; end
	end
end
always @(*) begin
	/* funcA: %0*/
	/*   %17 = load volatile i32* getelementptr inbounds ([10 x i32]* @memC, i32 0, i32 4), align 4, !tbaa !1*/
		funcA_0_17 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* funcA: %0*/
	/*   %17 = load volatile i32* getelementptr inbounds ([10 x i32]* @memC, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_funcA_BB_0_7)) begin
		funcA_0_17_reg <= funcA_0_17;
		if (start == 1'b0 && ^(funcA_0_17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to funcA_0_17_reg"); $finish; end
	end
end
always @(*) begin
	/* funcA: %0*/
	/*   %18 = add i32 %16, %15*/
		funcA_0_18 = (funcA_0_16 + funcA_0_15_reg);
end
always @(posedge clk) begin
	/* funcA: %0*/
	/*   %18 = add i32 %16, %15*/
	if ((cur_state == LEGUP_F_funcA_BB_0_7)) begin
		funcA_0_18_reg <= funcA_0_18;
		if (start == 1'b0 && ^(funcA_0_18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to funcA_0_18_reg"); $finish; end
	end
end
always @(*) begin
	/* funcA: %0*/
	/*   %19 = add i32 %18, %17*/
		funcA_0_19 = (funcA_0_18 + funcA_0_17);
end
always @(posedge clk) begin
	/* funcA: %0*/
	/*   %19 = add i32 %18, %17*/
	if ((cur_state == LEGUP_F_funcA_BB_0_7)) begin
		funcA_0_19_reg <= funcA_0_19;
		if (start == 1'b0 && ^(funcA_0_19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to funcA_0_19_reg"); $finish; end
	end
end
always @(*) begin
	/* funcA: %0*/
	/*   %20 = load volatile i32* getelementptr inbounds ([10 x i32]* @memB, i32 0, i32 5), align 4, !tbaa !1*/
		funcA_0_20 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* funcA: %0*/
	/*   %20 = load volatile i32* getelementptr inbounds ([10 x i32]* @memB, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_funcA_BB_0_8)) begin
		funcA_0_20_reg <= funcA_0_20;
		if (start == 1'b0 && ^(funcA_0_20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to funcA_0_20_reg"); $finish; end
	end
end
always @(*) begin
	/* funcA: %0*/
	/*   %21 = load volatile i32* getelementptr inbounds ([10 x i32]* @memC, i32 0, i32 5), align 4, !tbaa !1*/
		funcA_0_21 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* funcA: %0*/
	/*   %21 = load volatile i32* getelementptr inbounds ([10 x i32]* @memC, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_funcA_BB_0_8)) begin
		funcA_0_21_reg <= funcA_0_21;
		if (start == 1'b0 && ^(funcA_0_21) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to funcA_0_21_reg"); $finish; end
	end
end
always @(*) begin
	/* funcA: %0*/
	/*   %22 = add i32 %20, %19*/
		funcA_0_22 = (funcA_0_20 + funcA_0_19_reg);
end
always @(posedge clk) begin
	/* funcA: %0*/
	/*   %22 = add i32 %20, %19*/
	if ((cur_state == LEGUP_F_funcA_BB_0_8)) begin
		funcA_0_22_reg <= funcA_0_22;
		if (start == 1'b0 && ^(funcA_0_22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to funcA_0_22_reg"); $finish; end
	end
end
always @(*) begin
	/* funcA: %0*/
	/*   %23 = add i32 %22, %21*/
		funcA_0_23 = (funcA_0_22 + funcA_0_21);
end
always @(posedge clk) begin
	/* funcA: %0*/
	/*   %23 = add i32 %22, %21*/
	if ((cur_state == LEGUP_F_funcA_BB_0_8)) begin
		funcA_0_23_reg <= funcA_0_23;
		if (start == 1'b0 && ^(funcA_0_23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to funcA_0_23_reg"); $finish; end
	end
end
always @(*) begin
	/* funcA: %0*/
	/*   %24 = load volatile i32* getelementptr inbounds ([10 x i32]* @memB, i32 0, i32 6), align 4, !tbaa !1*/
		funcA_0_24 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* funcA: %0*/
	/*   %24 = load volatile i32* getelementptr inbounds ([10 x i32]* @memB, i32 0, i32 6), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_funcA_BB_0_9)) begin
		funcA_0_24_reg <= funcA_0_24;
		if (start == 1'b0 && ^(funcA_0_24) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to funcA_0_24_reg"); $finish; end
	end
end
always @(*) begin
	/* funcA: %0*/
	/*   %25 = load volatile i32* getelementptr inbounds ([10 x i32]* @memC, i32 0, i32 6), align 4, !tbaa !1*/
		funcA_0_25 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* funcA: %0*/
	/*   %25 = load volatile i32* getelementptr inbounds ([10 x i32]* @memC, i32 0, i32 6), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_funcA_BB_0_9)) begin
		funcA_0_25_reg <= funcA_0_25;
		if (start == 1'b0 && ^(funcA_0_25) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to funcA_0_25_reg"); $finish; end
	end
end
always @(*) begin
	/* funcA: %0*/
	/*   %26 = add i32 %24, %23*/
		funcA_0_26 = (funcA_0_24 + funcA_0_23_reg);
end
always @(posedge clk) begin
	/* funcA: %0*/
	/*   %26 = add i32 %24, %23*/
	if ((cur_state == LEGUP_F_funcA_BB_0_9)) begin
		funcA_0_26_reg <= funcA_0_26;
		if (start == 1'b0 && ^(funcA_0_26) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to funcA_0_26_reg"); $finish; end
	end
end
always @(*) begin
	/* funcA: %0*/
	/*   %27 = add i32 %26, %25*/
		funcA_0_27 = (funcA_0_26 + funcA_0_25);
end
always @(posedge clk) begin
	/* funcA: %0*/
	/*   %27 = add i32 %26, %25*/
	if ((cur_state == LEGUP_F_funcA_BB_0_9)) begin
		funcA_0_27_reg <= funcA_0_27;
		if (start == 1'b0 && ^(funcA_0_27) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to funcA_0_27_reg"); $finish; end
	end
end
always @(*) begin
	/* funcA: %0*/
	/*   %28 = load volatile i32* getelementptr inbounds ([10 x i32]* @memB, i32 0, i32 7), align 4, !tbaa !1*/
		funcA_0_28 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* funcA: %0*/
	/*   %28 = load volatile i32* getelementptr inbounds ([10 x i32]* @memB, i32 0, i32 7), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_funcA_BB_0_10)) begin
		funcA_0_28_reg <= funcA_0_28;
		if (start == 1'b0 && ^(funcA_0_28) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to funcA_0_28_reg"); $finish; end
	end
end
always @(*) begin
	/* funcA: %0*/
	/*   %29 = load volatile i32* getelementptr inbounds ([10 x i32]* @memC, i32 0, i32 7), align 4, !tbaa !1*/
		funcA_0_29 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* funcA: %0*/
	/*   %29 = load volatile i32* getelementptr inbounds ([10 x i32]* @memC, i32 0, i32 7), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_funcA_BB_0_10)) begin
		funcA_0_29_reg <= funcA_0_29;
		if (start == 1'b0 && ^(funcA_0_29) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to funcA_0_29_reg"); $finish; end
	end
end
always @(*) begin
	/* funcA: %0*/
	/*   %30 = add i32 %28, %27*/
		funcA_0_30 = (funcA_0_28 + funcA_0_27_reg);
end
always @(posedge clk) begin
	/* funcA: %0*/
	/*   %30 = add i32 %28, %27*/
	if ((cur_state == LEGUP_F_funcA_BB_0_10)) begin
		funcA_0_30_reg <= funcA_0_30;
		if (start == 1'b0 && ^(funcA_0_30) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to funcA_0_30_reg"); $finish; end
	end
end
always @(*) begin
	/* funcA: %0*/
	/*   %31 = add i32 %30, %29*/
		funcA_0_31 = (funcA_0_30 + funcA_0_29);
end
always @(posedge clk) begin
	/* funcA: %0*/
	/*   %31 = add i32 %30, %29*/
	if ((cur_state == LEGUP_F_funcA_BB_0_10)) begin
		funcA_0_31_reg <= funcA_0_31;
		if (start == 1'b0 && ^(funcA_0_31) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to funcA_0_31_reg"); $finish; end
	end
end
always @(*) begin
	/* funcA: %0*/
	/*   %32 = load volatile i32* getelementptr inbounds ([10 x i32]* @memB, i32 0, i32 8), align 4, !tbaa !1*/
		funcA_0_32 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* funcA: %0*/
	/*   %32 = load volatile i32* getelementptr inbounds ([10 x i32]* @memB, i32 0, i32 8), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_funcA_BB_0_11)) begin
		funcA_0_32_reg <= funcA_0_32;
		if (start == 1'b0 && ^(funcA_0_32) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to funcA_0_32_reg"); $finish; end
	end
end
always @(*) begin
	/* funcA: %0*/
	/*   %33 = load volatile i32* getelementptr inbounds ([10 x i32]* @memC, i32 0, i32 8), align 4, !tbaa !1*/
		funcA_0_33 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* funcA: %0*/
	/*   %33 = load volatile i32* getelementptr inbounds ([10 x i32]* @memC, i32 0, i32 8), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_funcA_BB_0_11)) begin
		funcA_0_33_reg <= funcA_0_33;
		if (start == 1'b0 && ^(funcA_0_33) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to funcA_0_33_reg"); $finish; end
	end
end
always @(*) begin
	/* funcA: %0*/
	/*   %34 = add i32 %32, %31*/
		funcA_0_34 = (funcA_0_32 + funcA_0_31_reg);
end
always @(posedge clk) begin
	/* funcA: %0*/
	/*   %34 = add i32 %32, %31*/
	if ((cur_state == LEGUP_F_funcA_BB_0_11)) begin
		funcA_0_34_reg <= funcA_0_34;
		if (start == 1'b0 && ^(funcA_0_34) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to funcA_0_34_reg"); $finish; end
	end
end
always @(*) begin
	/* funcA: %0*/
	/*   %35 = add i32 %34, %33*/
		funcA_0_35 = (funcA_0_34 + funcA_0_33);
end
always @(posedge clk) begin
	/* funcA: %0*/
	/*   %35 = add i32 %34, %33*/
	if ((cur_state == LEGUP_F_funcA_BB_0_11)) begin
		funcA_0_35_reg <= funcA_0_35;
		if (start == 1'b0 && ^(funcA_0_35) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to funcA_0_35_reg"); $finish; end
	end
end
always @(*) begin
	/* funcA: %0*/
	/*   %36 = load volatile i32* getelementptr inbounds ([10 x i32]* @memB, i32 0, i32 9), align 4, !tbaa !1*/
		funcA_0_36 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* funcA: %0*/
	/*   %36 = load volatile i32* getelementptr inbounds ([10 x i32]* @memB, i32 0, i32 9), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_funcA_BB_0_12)) begin
		funcA_0_36_reg <= funcA_0_36;
		if (start == 1'b0 && ^(funcA_0_36) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to funcA_0_36_reg"); $finish; end
	end
end
always @(*) begin
	/* funcA: %0*/
	/*   %37 = load volatile i32* getelementptr inbounds ([10 x i32]* @memC, i32 0, i32 9), align 4, !tbaa !1*/
		funcA_0_37 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* funcA: %0*/
	/*   %37 = load volatile i32* getelementptr inbounds ([10 x i32]* @memC, i32 0, i32 9), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_funcA_BB_0_12)) begin
		funcA_0_37_reg <= funcA_0_37;
		if (start == 1'b0 && ^(funcA_0_37) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to funcA_0_37_reg"); $finish; end
	end
end
always @(*) begin
	/* funcA: %0*/
	/*   %38 = add i32 %36, %35*/
		funcA_0_38 = (funcA_0_36 + funcA_0_35_reg);
end
always @(posedge clk) begin
	/* funcA: %0*/
	/*   %38 = add i32 %36, %35*/
	if ((cur_state == LEGUP_F_funcA_BB_0_12)) begin
		funcA_0_38_reg <= funcA_0_38;
		if (start == 1'b0 && ^(funcA_0_38) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to funcA_0_38_reg"); $finish; end
	end
end
always @(*) begin
	/* funcA: %0*/
	/*   %39 = add i32 %38, %37*/
		funcA_0_39 = (funcA_0_38 + funcA_0_37);
end
always @(posedge clk) begin
	/* funcA: %0*/
	/*   %39 = add i32 %38, %37*/
	if ((cur_state == LEGUP_F_funcA_BB_0_12)) begin
		funcA_0_39_reg <= funcA_0_39;
		if (start == 1'b0 && ^(funcA_0_39) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to funcA_0_39_reg"); $finish; end
	end
end
always @(*) begin
	/* funcA: %0*/
	/*   %40 = tail call fastcc i32 @funcB(i32 %39) #2*/
		funcA_0_40 = funcB_return_val_reg;
end
always @(posedge clk) begin
	/* funcA: %0*/
	/*   %40 = tail call fastcc i32 @funcB(i32 %39) #2*/
	if ((cur_state == LEGUP_function_call_13)) begin
		funcA_0_40_reg <= funcA_0_40;
		if (start == 1'b0 && ^(funcA_0_40) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to funcA_0_40_reg"); $finish; end
	end
end
always @(posedge clk) begin
	/* funcA: %0*/
	/*   %40 = tail call fastcc i32 @funcB(i32 %39) #2*/
	if ((cur_state == LEGUP_F_funcA_BB_0_12)) begin
		funcB_start <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to funcB_start"); $finish; end
	end
	if ((cur_state == LEGUP_function_call_13)) begin
		funcB_start <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to funcB_start"); $finish; end
	end
end
always @(posedge clk) begin
	/* funcA: %0*/
	/*   %40 = tail call fastcc i32 @funcB(i32 %39) #2*/
	if ((cur_state == LEGUP_F_funcA_BB_0_12)) begin
		funcB_arg_sum <= funcA_0_39;
		if (start == 1'b0 && ^(funcA_0_39) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to funcB_arg_sum"); $finish; end
	end
end
always @(*) begin
	/* funcA: %0*/
	/*   %40 = tail call fastcc i32 @funcB(i32 %39) #2*/
		funcB_memory_controller_out_a = memory_controller_out_a;
end
always @(*) begin
	/* funcA: %0*/
	/*   %40 = tail call fastcc i32 @funcB(i32 %39) #2*/
		funcB_memory_controller_out_b = memory_controller_out_b;
end
always @(*) begin
	funcB_memory_controller_waitrequest = memory_controller_waitrequest;
end
always @(*) begin
	funcB_finish_final = funcB_finish_reg;
end
always @(posedge clk) begin
	if ((reset | (cur_state == LEGUP_F_funcA_BB_0_12))) begin
		funcB_finish_reg <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to funcB_finish_reg"); $finish; end
	end
	if (funcB_finish) begin
		funcB_finish_reg <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to funcB_finish_reg"); $finish; end
	end
end
always @(posedge clk) begin
	if ((reset | (cur_state == LEGUP_F_funcA_BB_0_12))) begin
		funcB_return_val_reg <= 0;
		if (start == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to funcB_return_val_reg"); $finish; end
	end
	if (funcB_finish) begin
		funcB_return_val_reg <= funcB_return_val;
		if (start == 1'b0 && ^(funcB_return_val) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to funcB_return_val_reg"); $finish; end
	end
end
always @(*) begin
	legup_function_call = 1'd0;
	/* funcA: %0*/
	/*   %40 = tail call fastcc i32 @funcB(i32 %39) #2*/
	if ((cur_state == LEGUP_function_call_13)) begin
		legup_function_call = 1'd1;
	end
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		finish <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
	/* funcA: %0*/
	/*   ret i32 %40*/
	if ((cur_state == LEGUP_F_funcA_BB_0_14)) begin
		finish <= (memory_controller_waitrequest == 1'd0);
		if (start == 1'b0 && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
end
always @(*) begin
	memory_controller_enable_a = 1'd0;
	/* funcA: %0*/
	/*   %1 = load volatile i32* getelementptr inbounds ([10 x i32]* @memB, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_funcA_BB_0_1)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* funcA: %0*/
	/*   %4 = load volatile i32* getelementptr inbounds ([10 x i32]* @memB, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_funcA_BB_0_2)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* funcA: %0*/
	/*   %8 = load volatile i32* getelementptr inbounds ([10 x i32]* @memB, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_funcA_BB_0_3)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* funcA: %0*/
	/*   %12 = load volatile i32* getelementptr inbounds ([10 x i32]* @memB, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_funcA_BB_0_4)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* funcA: %0*/
	/*   %16 = load volatile i32* getelementptr inbounds ([10 x i32]* @memB, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_funcA_BB_0_5)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* funcA: %0*/
	/*   %20 = load volatile i32* getelementptr inbounds ([10 x i32]* @memB, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_funcA_BB_0_6)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* funcA: %0*/
	/*   %24 = load volatile i32* getelementptr inbounds ([10 x i32]* @memB, i32 0, i32 6), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_funcA_BB_0_7)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* funcA: %0*/
	/*   %28 = load volatile i32* getelementptr inbounds ([10 x i32]* @memB, i32 0, i32 7), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_funcA_BB_0_8)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* funcA: %0*/
	/*   %32 = load volatile i32* getelementptr inbounds ([10 x i32]* @memB, i32 0, i32 8), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_funcA_BB_0_9)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* funcA: %0*/
	/*   %36 = load volatile i32* getelementptr inbounds ([10 x i32]* @memB, i32 0, i32 9), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_funcA_BB_0_10)) begin
		memory_controller_enable_a = 1'd1;
	end
end
always @(*) begin
	memory_controller_address_a = 1'd0;
	/* funcA: %0*/
	/*   %1 = load volatile i32* getelementptr inbounds ([10 x i32]* @memB, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_funcA_BB_0_1)) begin
		memory_controller_address_a = `TAG_g_memB_a;
	end
	/* funcA: %0*/
	/*   %4 = load volatile i32* getelementptr inbounds ([10 x i32]* @memB, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_funcA_BB_0_2)) begin
		memory_controller_address_a = (`TAG_g_memB_a + (4 * 32'd1));
	end
	/* funcA: %0*/
	/*   %8 = load volatile i32* getelementptr inbounds ([10 x i32]* @memB, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_funcA_BB_0_3)) begin
		memory_controller_address_a = (`TAG_g_memB_a + (4 * 32'd2));
	end
	/* funcA: %0*/
	/*   %12 = load volatile i32* getelementptr inbounds ([10 x i32]* @memB, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_funcA_BB_0_4)) begin
		memory_controller_address_a = (`TAG_g_memB_a + (4 * 32'd3));
	end
	/* funcA: %0*/
	/*   %16 = load volatile i32* getelementptr inbounds ([10 x i32]* @memB, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_funcA_BB_0_5)) begin
		memory_controller_address_a = (`TAG_g_memB_a + (4 * 32'd4));
	end
	/* funcA: %0*/
	/*   %20 = load volatile i32* getelementptr inbounds ([10 x i32]* @memB, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_funcA_BB_0_6)) begin
		memory_controller_address_a = (`TAG_g_memB_a + (4 * 32'd5));
	end
	/* funcA: %0*/
	/*   %24 = load volatile i32* getelementptr inbounds ([10 x i32]* @memB, i32 0, i32 6), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_funcA_BB_0_7)) begin
		memory_controller_address_a = (`TAG_g_memB_a + (4 * 32'd6));
	end
	/* funcA: %0*/
	/*   %28 = load volatile i32* getelementptr inbounds ([10 x i32]* @memB, i32 0, i32 7), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_funcA_BB_0_8)) begin
		memory_controller_address_a = (`TAG_g_memB_a + (4 * 32'd7));
	end
	/* funcA: %0*/
	/*   %32 = load volatile i32* getelementptr inbounds ([10 x i32]* @memB, i32 0, i32 8), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_funcA_BB_0_9)) begin
		memory_controller_address_a = (`TAG_g_memB_a + (4 * 32'd8));
	end
	/* funcA: %0*/
	/*   %36 = load volatile i32* getelementptr inbounds ([10 x i32]* @memB, i32 0, i32 9), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_funcA_BB_0_10)) begin
		memory_controller_address_a = (`TAG_g_memB_a + (4 * 32'd9));
	end
end
always @(*) begin
	memory_controller_write_enable_a = 1'd0;
	/* funcA: %0*/
	/*   %1 = load volatile i32* getelementptr inbounds ([10 x i32]* @memB, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_funcA_BB_0_1)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* funcA: %0*/
	/*   %4 = load volatile i32* getelementptr inbounds ([10 x i32]* @memB, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_funcA_BB_0_2)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* funcA: %0*/
	/*   %8 = load volatile i32* getelementptr inbounds ([10 x i32]* @memB, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_funcA_BB_0_3)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* funcA: %0*/
	/*   %12 = load volatile i32* getelementptr inbounds ([10 x i32]* @memB, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_funcA_BB_0_4)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* funcA: %0*/
	/*   %16 = load volatile i32* getelementptr inbounds ([10 x i32]* @memB, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_funcA_BB_0_5)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* funcA: %0*/
	/*   %20 = load volatile i32* getelementptr inbounds ([10 x i32]* @memB, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_funcA_BB_0_6)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* funcA: %0*/
	/*   %24 = load volatile i32* getelementptr inbounds ([10 x i32]* @memB, i32 0, i32 6), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_funcA_BB_0_7)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* funcA: %0*/
	/*   %28 = load volatile i32* getelementptr inbounds ([10 x i32]* @memB, i32 0, i32 7), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_funcA_BB_0_8)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* funcA: %0*/
	/*   %32 = load volatile i32* getelementptr inbounds ([10 x i32]* @memB, i32 0, i32 8), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_funcA_BB_0_9)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* funcA: %0*/
	/*   %36 = load volatile i32* getelementptr inbounds ([10 x i32]* @memB, i32 0, i32 9), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_funcA_BB_0_10)) begin
		memory_controller_write_enable_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_in_a = 1'd0;
	/* funcA: %0*/
	/*   %40 = tail call fastcc i32 @funcB(i32 %39) #2*/
	if ((cur_state == LEGUP_0)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = 0;
	end
end
always @(*) begin
	memory_controller_size_a = 1'd0;
	/* funcA: %0*/
	/*   %1 = load volatile i32* getelementptr inbounds ([10 x i32]* @memB, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_funcA_BB_0_1)) begin
		memory_controller_size_a = 2'd2;
	end
	/* funcA: %0*/
	/*   %4 = load volatile i32* getelementptr inbounds ([10 x i32]* @memB, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_funcA_BB_0_2)) begin
		memory_controller_size_a = 2'd2;
	end
	/* funcA: %0*/
	/*   %8 = load volatile i32* getelementptr inbounds ([10 x i32]* @memB, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_funcA_BB_0_3)) begin
		memory_controller_size_a = 2'd2;
	end
	/* funcA: %0*/
	/*   %12 = load volatile i32* getelementptr inbounds ([10 x i32]* @memB, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_funcA_BB_0_4)) begin
		memory_controller_size_a = 2'd2;
	end
	/* funcA: %0*/
	/*   %16 = load volatile i32* getelementptr inbounds ([10 x i32]* @memB, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_funcA_BB_0_5)) begin
		memory_controller_size_a = 2'd2;
	end
	/* funcA: %0*/
	/*   %20 = load volatile i32* getelementptr inbounds ([10 x i32]* @memB, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_funcA_BB_0_6)) begin
		memory_controller_size_a = 2'd2;
	end
	/* funcA: %0*/
	/*   %24 = load volatile i32* getelementptr inbounds ([10 x i32]* @memB, i32 0, i32 6), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_funcA_BB_0_7)) begin
		memory_controller_size_a = 2'd2;
	end
	/* funcA: %0*/
	/*   %28 = load volatile i32* getelementptr inbounds ([10 x i32]* @memB, i32 0, i32 7), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_funcA_BB_0_8)) begin
		memory_controller_size_a = 2'd2;
	end
	/* funcA: %0*/
	/*   %32 = load volatile i32* getelementptr inbounds ([10 x i32]* @memB, i32 0, i32 8), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_funcA_BB_0_9)) begin
		memory_controller_size_a = 2'd2;
	end
	/* funcA: %0*/
	/*   %36 = load volatile i32* getelementptr inbounds ([10 x i32]* @memB, i32 0, i32 9), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_funcA_BB_0_10)) begin
		memory_controller_size_a = 2'd2;
	end
end
always @(*) begin
	memory_controller_enable_b = 1'd0;
	/* funcA: %0*/
	/*   %2 = load volatile i32* getelementptr inbounds ([10 x i32]* @memC, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_funcA_BB_0_1)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* funcA: %0*/
	/*   %5 = load volatile i32* getelementptr inbounds ([10 x i32]* @memC, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_funcA_BB_0_2)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* funcA: %0*/
	/*   %9 = load volatile i32* getelementptr inbounds ([10 x i32]* @memC, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_funcA_BB_0_3)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* funcA: %0*/
	/*   %13 = load volatile i32* getelementptr inbounds ([10 x i32]* @memC, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_funcA_BB_0_4)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* funcA: %0*/
	/*   %17 = load volatile i32* getelementptr inbounds ([10 x i32]* @memC, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_funcA_BB_0_5)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* funcA: %0*/
	/*   %21 = load volatile i32* getelementptr inbounds ([10 x i32]* @memC, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_funcA_BB_0_6)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* funcA: %0*/
	/*   %25 = load volatile i32* getelementptr inbounds ([10 x i32]* @memC, i32 0, i32 6), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_funcA_BB_0_7)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* funcA: %0*/
	/*   %29 = load volatile i32* getelementptr inbounds ([10 x i32]* @memC, i32 0, i32 7), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_funcA_BB_0_8)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* funcA: %0*/
	/*   %33 = load volatile i32* getelementptr inbounds ([10 x i32]* @memC, i32 0, i32 8), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_funcA_BB_0_9)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* funcA: %0*/
	/*   %37 = load volatile i32* getelementptr inbounds ([10 x i32]* @memC, i32 0, i32 9), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_funcA_BB_0_10)) begin
		memory_controller_enable_b = 1'd1;
	end
end
always @(*) begin
	memory_controller_address_b = 1'd0;
	/* funcA: %0*/
	/*   %2 = load volatile i32* getelementptr inbounds ([10 x i32]* @memC, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_funcA_BB_0_1)) begin
		memory_controller_address_b = `TAG_g_memC_a;
	end
	/* funcA: %0*/
	/*   %5 = load volatile i32* getelementptr inbounds ([10 x i32]* @memC, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_funcA_BB_0_2)) begin
		memory_controller_address_b = (`TAG_g_memC_a + (4 * 32'd1));
	end
	/* funcA: %0*/
	/*   %9 = load volatile i32* getelementptr inbounds ([10 x i32]* @memC, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_funcA_BB_0_3)) begin
		memory_controller_address_b = (`TAG_g_memC_a + (4 * 32'd2));
	end
	/* funcA: %0*/
	/*   %13 = load volatile i32* getelementptr inbounds ([10 x i32]* @memC, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_funcA_BB_0_4)) begin
		memory_controller_address_b = (`TAG_g_memC_a + (4 * 32'd3));
	end
	/* funcA: %0*/
	/*   %17 = load volatile i32* getelementptr inbounds ([10 x i32]* @memC, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_funcA_BB_0_5)) begin
		memory_controller_address_b = (`TAG_g_memC_a + (4 * 32'd4));
	end
	/* funcA: %0*/
	/*   %21 = load volatile i32* getelementptr inbounds ([10 x i32]* @memC, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_funcA_BB_0_6)) begin
		memory_controller_address_b = (`TAG_g_memC_a + (4 * 32'd5));
	end
	/* funcA: %0*/
	/*   %25 = load volatile i32* getelementptr inbounds ([10 x i32]* @memC, i32 0, i32 6), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_funcA_BB_0_7)) begin
		memory_controller_address_b = (`TAG_g_memC_a + (4 * 32'd6));
	end
	/* funcA: %0*/
	/*   %29 = load volatile i32* getelementptr inbounds ([10 x i32]* @memC, i32 0, i32 7), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_funcA_BB_0_8)) begin
		memory_controller_address_b = (`TAG_g_memC_a + (4 * 32'd7));
	end
	/* funcA: %0*/
	/*   %33 = load volatile i32* getelementptr inbounds ([10 x i32]* @memC, i32 0, i32 8), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_funcA_BB_0_9)) begin
		memory_controller_address_b = (`TAG_g_memC_a + (4 * 32'd8));
	end
	/* funcA: %0*/
	/*   %37 = load volatile i32* getelementptr inbounds ([10 x i32]* @memC, i32 0, i32 9), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_funcA_BB_0_10)) begin
		memory_controller_address_b = (`TAG_g_memC_a + (4 * 32'd9));
	end
end
always @(*) begin
	memory_controller_write_enable_b = 1'd0;
	/* funcA: %0*/
	/*   %2 = load volatile i32* getelementptr inbounds ([10 x i32]* @memC, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_funcA_BB_0_1)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* funcA: %0*/
	/*   %5 = load volatile i32* getelementptr inbounds ([10 x i32]* @memC, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_funcA_BB_0_2)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* funcA: %0*/
	/*   %9 = load volatile i32* getelementptr inbounds ([10 x i32]* @memC, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_funcA_BB_0_3)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* funcA: %0*/
	/*   %13 = load volatile i32* getelementptr inbounds ([10 x i32]* @memC, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_funcA_BB_0_4)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* funcA: %0*/
	/*   %17 = load volatile i32* getelementptr inbounds ([10 x i32]* @memC, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_funcA_BB_0_5)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* funcA: %0*/
	/*   %21 = load volatile i32* getelementptr inbounds ([10 x i32]* @memC, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_funcA_BB_0_6)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* funcA: %0*/
	/*   %25 = load volatile i32* getelementptr inbounds ([10 x i32]* @memC, i32 0, i32 6), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_funcA_BB_0_7)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* funcA: %0*/
	/*   %29 = load volatile i32* getelementptr inbounds ([10 x i32]* @memC, i32 0, i32 7), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_funcA_BB_0_8)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* funcA: %0*/
	/*   %33 = load volatile i32* getelementptr inbounds ([10 x i32]* @memC, i32 0, i32 8), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_funcA_BB_0_9)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* funcA: %0*/
	/*   %37 = load volatile i32* getelementptr inbounds ([10 x i32]* @memC, i32 0, i32 9), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_funcA_BB_0_10)) begin
		memory_controller_write_enable_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_in_b = 1'd0;
	/* funcA: %0*/
	/*   %40 = tail call fastcc i32 @funcB(i32 %39) #2*/
	if ((cur_state == LEGUP_0)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = 0;
	end
end
always @(*) begin
	memory_controller_size_b = 1'd0;
	/* funcA: %0*/
	/*   %2 = load volatile i32* getelementptr inbounds ([10 x i32]* @memC, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_funcA_BB_0_1)) begin
		memory_controller_size_b = 2'd2;
	end
	/* funcA: %0*/
	/*   %5 = load volatile i32* getelementptr inbounds ([10 x i32]* @memC, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_funcA_BB_0_2)) begin
		memory_controller_size_b = 2'd2;
	end
	/* funcA: %0*/
	/*   %9 = load volatile i32* getelementptr inbounds ([10 x i32]* @memC, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_funcA_BB_0_3)) begin
		memory_controller_size_b = 2'd2;
	end
	/* funcA: %0*/
	/*   %13 = load volatile i32* getelementptr inbounds ([10 x i32]* @memC, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_funcA_BB_0_4)) begin
		memory_controller_size_b = 2'd2;
	end
	/* funcA: %0*/
	/*   %17 = load volatile i32* getelementptr inbounds ([10 x i32]* @memC, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_funcA_BB_0_5)) begin
		memory_controller_size_b = 2'd2;
	end
	/* funcA: %0*/
	/*   %21 = load volatile i32* getelementptr inbounds ([10 x i32]* @memC, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_funcA_BB_0_6)) begin
		memory_controller_size_b = 2'd2;
	end
	/* funcA: %0*/
	/*   %25 = load volatile i32* getelementptr inbounds ([10 x i32]* @memC, i32 0, i32 6), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_funcA_BB_0_7)) begin
		memory_controller_size_b = 2'd2;
	end
	/* funcA: %0*/
	/*   %29 = load volatile i32* getelementptr inbounds ([10 x i32]* @memC, i32 0, i32 7), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_funcA_BB_0_8)) begin
		memory_controller_size_b = 2'd2;
	end
	/* funcA: %0*/
	/*   %33 = load volatile i32* getelementptr inbounds ([10 x i32]* @memC, i32 0, i32 8), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_funcA_BB_0_9)) begin
		memory_controller_size_b = 2'd2;
	end
	/* funcA: %0*/
	/*   %37 = load volatile i32* getelementptr inbounds ([10 x i32]* @memC, i32 0, i32 9), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_funcA_BB_0_10)) begin
		memory_controller_size_b = 2'd2;
	end
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		return_val <= 0;
		if (start == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
	end
	/* funcA: %0*/
	/*   ret i32 %40*/
	if ((cur_state == LEGUP_F_funcA_BB_0_14)) begin
		return_val <= funcA_0_40_reg;
		if (start == 1'b0 && ^(funcA_0_40_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
	end
end

endmodule 
`timescale 1 ns / 1 ns
module main
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b,
	memory_controller_waitrequest,
	return_val,
    funcA_start,
    funcA_finish,
    funcA_return_val
);

parameter [3:0] LEGUP_0 = 4'd0;
parameter [3:0] LEGUP_F_main_BB_0_1 = 4'd1;
parameter [3:0] LEGUP_F_main_BB_0_2 = 4'd2;
parameter [3:0] LEGUP_F_main_BB_0_3 = 4'd3;
parameter [3:0] LEGUP_F_main_BB_0_4 = 4'd4;
parameter [3:0] LEGUP_F_main_BB_0_5 = 4'd5;
parameter [3:0] LEGUP_F_main_BB_0_6 = 4'd6;
parameter [3:0] LEGUP_F_main_BB_0_7 = 4'd7;
parameter [3:0] LEGUP_F_main_BB_0_9 = 4'd9;
parameter [3:0] LEGUP_F_main_BB_14_10 = 4'd10;
parameter [3:0] LEGUP_F_main_BB_16_11 = 4'd11;
parameter [3:0] LEGUP_F_main_BB_18_12 = 4'd12;
parameter [8:0] tag_offset = 9'd0;
parameter [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tag_addr_offset = {tag_offset, 23'd0};
parameter [3:0] LEGUP_function_call_8 = 4'd8;

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
input  memory_controller_waitrequest;
output reg [31:0] return_val;
output reg  funcA_start;
input  funcA_finish;
input [31:0] funcA_return_val;
reg [3:0] cur_state;
reg [31:0] main_0_1;
reg [31:0] main_0_1_reg;
reg [31:0] main_0_2;
reg [31:0] main_0_2_reg;
reg [31:0] main_0_3;
reg [31:0] main_0_3_reg;
reg [31:0] main_0_4;
reg [31:0] main_0_4_reg;
reg [31:0] main_0_5;
reg [31:0] main_0_5_reg;
reg [31:0] main_0_6;
reg [31:0] main_0_6_reg;
reg [31:0] main_0_7;
reg [31:0] main_0_7_reg;
reg [31:0] main_0_8;
reg [31:0] main_0_8_reg;
reg [31:0] main_0_9;
reg [31:0] main_0_9_reg;
reg [31:0] main_0_10;
reg [31:0] main_0_10_reg;
reg [31:0] main_0_11;
reg [31:0] main_0_11_reg;
reg  main_0_13;
reg  main_0_13_reg;
reg [3:0] memA_address_a;
reg  memA_write_enable_a;
wire [31:0] memA_in_a;
wire [31:0] memA_out_a;
reg [3:0] memA_address_b;
reg  memA_write_enable_b;
wire [31:0] memA_in_b;
wire [31:0] memA_out_b;
wire [3:0] memC_address_a;
wire  memC_write_enable_a;
wire [31:0] memC_in_a;
wire [31:0] memC_out_a;
wire [3:0] memC_address_b;
wire  memC_write_enable_b;
wire [31:0] memC_in_b;
wire [31:0] memC_out_b;
wire [3:0] memD_address_a;
wire  memD_write_enable_a;
wire [31:0] memD_in_a;
wire [31:0] memD_out_a;
wire [3:0] memD_address_b;
wire  memD_write_enable_b;
wire [31:0] memD_in_b;
wire [31:0] memD_out_b;
wire [3:0] memB_address_a;
wire  memB_write_enable_a;
wire [31:0] memB_in_a;
wire [31:0] memB_out_a;
wire [3:0] memB_address_b;
wire  memB_write_enable_b;
wire [31:0] memB_in_b;
wire [31:0] memB_out_b;
wire  funcA_memory_controller_enable_a;
wire  funcA_memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] funcA_memory_controller_address_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] funcA_memory_controller_in_a;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] funcA_memory_controller_out_a;
wire [1:0] funcA_memory_controller_size_a;
wire  funcA_memory_controller_enable_b;
wire  funcA_memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] funcA_memory_controller_address_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] funcA_memory_controller_in_b;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] funcA_memory_controller_out_b;
wire [1:0] funcA_memory_controller_size_b;
reg  funcA_memory_controller_waitrequest;
reg  funcA_finish_final;
reg  funcA_finish_reg;
reg [31:0] funcA_return_val_reg;
reg  legup_function_call;
wire [15:0] legup_pthreadpoll_threadID;
wire [15:0] legup_pthreadpoll_functionID;

// Local Rams

// @memA = internal global [10 x i32] [i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9], align 4
ram_dual_port memA (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( memA_address_a ),
	.address_b( memA_address_b ),
	.wren_a( memA_write_enable_a ),
	.wren_b( memA_write_enable_b ),
	.data_a( memA_in_a ),
	.data_b( memA_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( memA_out_a ),
	.q_b( memA_out_b)
);
defparam memA.width_a = 32;
defparam memA.width_b = 32;
defparam memA.widthad_a = 4;
defparam memA.widthad_b = 4;
defparam memA.width_be_a = 1;
defparam memA.width_be_b = 1;
defparam memA.numwords_a = 10;
defparam memA.numwords_b = 10;
defparam memA.latency = 1;
defparam memA.init_file = "memA.mif";


/* Unsynthesizable Statements */
always @(posedge clk)
	if (!memory_controller_waitrequest) begin
	/* main: %0*/
	/*   %12 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([12 x i8]* @.str, i32 0, i32 0), i32 %11) #3*/
	if ((cur_state == LEGUP_F_main_BB_0_9)) begin
		$write("Result: %d\n", $signed(main_0_11_reg));
		// to fix quartus warning
		if (reset == 1'b0 && ^(main_0_11_reg) === 1'bX) finish <= 0;
	end
	/* main: %14*/
	/*   %15 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([14 x i8]* @.str1, i32 0, i32 0)) #3*/
	if ((cur_state == LEGUP_F_main_BB_14_10)) begin
		$write("RESULT: PASS\n");
	end
	/* main: %16*/
	/*   %17 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([14 x i8]* @.str2, i32 0, i32 0)) #3*/
	if ((cur_state == LEGUP_F_main_BB_16_11)) begin
		$write("RESULT: FAIL\n");
	end
end
always @(posedge clk) begin
	if (((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd1))) begin
		cur_state <= LEGUP_0;
		if (start == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
	end
	if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd1))) begin
		cur_state <= LEGUP_F_main_BB_0_1;
		if (start == 1'b0 && ^(LEGUP_F_main_BB_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
	end
	if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd0))) begin
		cur_state <= LEGUP_0;
		if (start == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
	end
	if (((cur_state == LEGUP_F_main_BB_0_1) & (memory_controller_waitrequest == 1'd1))) begin
		cur_state <= LEGUP_F_main_BB_0_1;
		if (start == 1'b0 && ^(LEGUP_F_main_BB_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
	end
	if (((cur_state == LEGUP_F_main_BB_0_1) & (memory_controller_waitrequest == 1'd0))) begin
		cur_state <= LEGUP_F_main_BB_0_2;
		if (start == 1'b0 && ^(LEGUP_F_main_BB_0_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
	end
	if (((cur_state == LEGUP_F_main_BB_0_2) & (memory_controller_waitrequest == 1'd1))) begin
		cur_state <= LEGUP_F_main_BB_0_2;
		if (start == 1'b0 && ^(LEGUP_F_main_BB_0_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
	end
	if (((cur_state == LEGUP_F_main_BB_0_2) & (memory_controller_waitrequest == 1'd0))) begin
		cur_state <= LEGUP_F_main_BB_0_3;
		if (start == 1'b0 && ^(LEGUP_F_main_BB_0_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
	end
	if (((cur_state == LEGUP_F_main_BB_0_3) & (memory_controller_waitrequest == 1'd1))) begin
		cur_state <= LEGUP_F_main_BB_0_3;
		if (start == 1'b0 && ^(LEGUP_F_main_BB_0_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
	end
	if (((cur_state == LEGUP_F_main_BB_0_3) & (memory_controller_waitrequest == 1'd0))) begin
		cur_state <= LEGUP_F_main_BB_0_4;
		if (start == 1'b0 && ^(LEGUP_F_main_BB_0_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
	end
	if (((cur_state == LEGUP_F_main_BB_0_4) & (memory_controller_waitrequest == 1'd1))) begin
		cur_state <= LEGUP_F_main_BB_0_4;
		if (start == 1'b0 && ^(LEGUP_F_main_BB_0_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
	end
	if (((cur_state == LEGUP_F_main_BB_0_4) & (memory_controller_waitrequest == 1'd0))) begin
		cur_state <= LEGUP_F_main_BB_0_5;
		if (start == 1'b0 && ^(LEGUP_F_main_BB_0_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
	end
	if (((cur_state == LEGUP_F_main_BB_0_5) & (memory_controller_waitrequest == 1'd1))) begin
		cur_state <= LEGUP_F_main_BB_0_5;
		if (start == 1'b0 && ^(LEGUP_F_main_BB_0_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
	end
	if (((cur_state == LEGUP_F_main_BB_0_5) & (memory_controller_waitrequest == 1'd0))) begin
		cur_state <= LEGUP_F_main_BB_0_6;
		if (start == 1'b0 && ^(LEGUP_F_main_BB_0_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
	end
	if (((cur_state == LEGUP_F_main_BB_0_6) & (memory_controller_waitrequest == 1'd1))) begin
		cur_state <= LEGUP_F_main_BB_0_6;
		if (start == 1'b0 && ^(LEGUP_F_main_BB_0_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
	end
	if (((cur_state == LEGUP_F_main_BB_0_6) & (memory_controller_waitrequest == 1'd0))) begin
		cur_state <= LEGUP_F_main_BB_0_7;
		if (start == 1'b0 && ^(LEGUP_F_main_BB_0_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
	end
	if (((cur_state == LEGUP_F_main_BB_0_7) & (memory_controller_waitrequest == 1'd1))) begin
		cur_state <= LEGUP_F_main_BB_0_7;
		if (start == 1'b0 && ^(LEGUP_F_main_BB_0_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
	end
	if (((cur_state == LEGUP_F_main_BB_0_7) & (memory_controller_waitrequest == 1'd0))) begin
		cur_state <= LEGUP_function_call_8;
		if (start == 1'b0 && ^(LEGUP_function_call_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
	end
	if (((cur_state == LEGUP_function_call_8) & (memory_controller_waitrequest == 1'd1))) begin
		cur_state <= LEGUP_function_call_8;
		if (start == 1'b0 && ^(LEGUP_function_call_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
	end
	if ((((cur_state == LEGUP_function_call_8) & (memory_controller_waitrequest == 1'd0)) & (funcA_finish_final == 1'd1))) begin
		cur_state <= LEGUP_F_main_BB_0_9;
		if (start == 1'b0 && ^(LEGUP_F_main_BB_0_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
	end
	if ((((cur_state == LEGUP_function_call_8) & (memory_controller_waitrequest == 1'd0)) & (funcA_finish_final == 1'd0))) begin
		cur_state <= LEGUP_function_call_8;
		if (start == 1'b0 && ^(LEGUP_function_call_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
	end
	if (((cur_state == LEGUP_F_main_BB_0_9) & (memory_controller_waitrequest == 1'd1))) begin
		cur_state <= LEGUP_F_main_BB_0_9;
		if (start == 1'b0 && ^(LEGUP_F_main_BB_0_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
	end
	if ((((cur_state == LEGUP_F_main_BB_0_9) & (memory_controller_waitrequest == 1'd0)) & (main_0_13 == 1'd1))) begin
		cur_state <= LEGUP_F_main_BB_14_10;
		if (start == 1'b0 && ^(LEGUP_F_main_BB_14_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
	end
	if ((((cur_state == LEGUP_F_main_BB_0_9) & (memory_controller_waitrequest == 1'd0)) & (main_0_13 == 1'd0))) begin
		cur_state <= LEGUP_F_main_BB_16_11;
		if (start == 1'b0 && ^(LEGUP_F_main_BB_16_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
	end
	if (((cur_state == LEGUP_F_main_BB_14_10) & (memory_controller_waitrequest == 1'd1))) begin
		cur_state <= LEGUP_F_main_BB_14_10;
		if (start == 1'b0 && ^(LEGUP_F_main_BB_14_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
	end
	if (((cur_state == LEGUP_F_main_BB_14_10) & (memory_controller_waitrequest == 1'd0))) begin
		cur_state <= LEGUP_F_main_BB_18_12;
		if (start == 1'b0 && ^(LEGUP_F_main_BB_18_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
	end
	if (((cur_state == LEGUP_F_main_BB_16_11) & (memory_controller_waitrequest == 1'd1))) begin
		cur_state <= LEGUP_F_main_BB_16_11;
		if (start == 1'b0 && ^(LEGUP_F_main_BB_16_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
	end
	if (((cur_state == LEGUP_F_main_BB_16_11) & (memory_controller_waitrequest == 1'd0))) begin
		cur_state <= LEGUP_F_main_BB_18_12;
		if (start == 1'b0 && ^(LEGUP_F_main_BB_18_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
	end
	if (((cur_state == LEGUP_F_main_BB_18_12) & (memory_controller_waitrequest == 1'd1))) begin
		cur_state <= LEGUP_F_main_BB_18_12;
		if (start == 1'b0 && ^(LEGUP_F_main_BB_18_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
	end
	if (((cur_state == LEGUP_F_main_BB_18_12) & (memory_controller_waitrequest == 1'd0))) begin
		cur_state <= LEGUP_0;
		if (start == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
	end
	if ((reset == 1'd1)) begin
		cur_state <= 4'd0;
		if (start == 1'b0 && ^(4'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
	end
end
always @(*) begin
	/* main: %0*/
	/*   %1 = load volatile i32* getelementptr inbounds ([10 x i32]* @memA, i32 0, i32 0), align 4, !tbaa !1*/
		main_0_1 = memA_out_a;
end
always @(posedge clk) begin
	/* main: %0*/
	/*   %1 = load volatile i32* getelementptr inbounds ([10 x i32]* @memA, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_0_2)) begin
		main_0_1_reg <= main_0_1;
		if (start == 1'b0 && ^(main_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_1_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %0*/
	/*   %2 = load volatile i32* getelementptr inbounds ([10 x i32]* @memA, i32 0, i32 1), align 4, !tbaa !1*/
		main_0_2 = memA_out_b;
end
always @(posedge clk) begin
	/* main: %0*/
	/*   %2 = load volatile i32* getelementptr inbounds ([10 x i32]* @memA, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_0_2)) begin
		main_0_2_reg <= main_0_2;
		if (start == 1'b0 && ^(main_0_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_2_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %0*/
	/*   %3 = load volatile i32* getelementptr inbounds ([10 x i32]* @memA, i32 0, i32 2), align 4, !tbaa !1*/
		main_0_3 = memA_out_a;
end
always @(posedge clk) begin
	/* main: %0*/
	/*   %3 = load volatile i32* getelementptr inbounds ([10 x i32]* @memA, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_0_3)) begin
		main_0_3_reg <= main_0_3;
		if (start == 1'b0 && ^(main_0_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_3_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %0*/
	/*   %4 = load volatile i32* getelementptr inbounds ([10 x i32]* @memA, i32 0, i32 3), align 4, !tbaa !1*/
		main_0_4 = memA_out_b;
end
always @(posedge clk) begin
	/* main: %0*/
	/*   %4 = load volatile i32* getelementptr inbounds ([10 x i32]* @memA, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_0_3)) begin
		main_0_4_reg <= main_0_4;
		if (start == 1'b0 && ^(main_0_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_4_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %0*/
	/*   %5 = load volatile i32* getelementptr inbounds ([10 x i32]* @memA, i32 0, i32 4), align 4, !tbaa !1*/
		main_0_5 = memA_out_a;
end
always @(posedge clk) begin
	/* main: %0*/
	/*   %5 = load volatile i32* getelementptr inbounds ([10 x i32]* @memA, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_0_4)) begin
		main_0_5_reg <= main_0_5;
		if (start == 1'b0 && ^(main_0_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_5_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %0*/
	/*   %6 = load volatile i32* getelementptr inbounds ([10 x i32]* @memA, i32 0, i32 5), align 4, !tbaa !1*/
		main_0_6 = memA_out_b;
end
always @(posedge clk) begin
	/* main: %0*/
	/*   %6 = load volatile i32* getelementptr inbounds ([10 x i32]* @memA, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_0_4)) begin
		main_0_6_reg <= main_0_6;
		if (start == 1'b0 && ^(main_0_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_6_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %0*/
	/*   %7 = load volatile i32* getelementptr inbounds ([10 x i32]* @memA, i32 0, i32 6), align 4, !tbaa !1*/
		main_0_7 = memA_out_a;
end
always @(posedge clk) begin
	/* main: %0*/
	/*   %7 = load volatile i32* getelementptr inbounds ([10 x i32]* @memA, i32 0, i32 6), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_0_5)) begin
		main_0_7_reg <= main_0_7;
		if (start == 1'b0 && ^(main_0_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_7_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %0*/
	/*   %8 = load volatile i32* getelementptr inbounds ([10 x i32]* @memA, i32 0, i32 7), align 4, !tbaa !1*/
		main_0_8 = memA_out_b;
end
always @(posedge clk) begin
	/* main: %0*/
	/*   %8 = load volatile i32* getelementptr inbounds ([10 x i32]* @memA, i32 0, i32 7), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_0_5)) begin
		main_0_8_reg <= main_0_8;
		if (start == 1'b0 && ^(main_0_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_8_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %0*/
	/*   %9 = load volatile i32* getelementptr inbounds ([10 x i32]* @memA, i32 0, i32 8), align 4, !tbaa !1*/
		main_0_9 = memA_out_a;
end
always @(posedge clk) begin
	/* main: %0*/
	/*   %9 = load volatile i32* getelementptr inbounds ([10 x i32]* @memA, i32 0, i32 8), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_0_6)) begin
		main_0_9_reg <= main_0_9;
		if (start == 1'b0 && ^(main_0_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_9_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %0*/
	/*   %10 = load volatile i32* getelementptr inbounds ([10 x i32]* @memA, i32 0, i32 9), align 4, !tbaa !1*/
		main_0_10 = memA_out_b;
end
always @(posedge clk) begin
	/* main: %0*/
	/*   %10 = load volatile i32* getelementptr inbounds ([10 x i32]* @memA, i32 0, i32 9), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_0_6)) begin
		main_0_10_reg <= main_0_10;
		if (start == 1'b0 && ^(main_0_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_10_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %0*/
	/*   %11 = tail call fastcc i32 @funcA() #2*/
		main_0_11 = funcA_return_val_reg;
end
always @(posedge clk) begin
	/* main: %0*/
	/*   %11 = tail call fastcc i32 @funcA() #2*/
	if ((cur_state == LEGUP_function_call_8)) begin
		main_0_11_reg <= main_0_11;
		if (start == 1'b0 && ^(main_0_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_11_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %0*/
	/*   %13 = icmp eq i32 %11, 180*/
		main_0_13 = (main_0_11_reg == 32'd180);
end
always @(posedge clk) begin
	/* main: %0*/
	/*   %13 = icmp eq i32 %11, 180*/
	if ((cur_state == LEGUP_F_main_BB_0_9)) begin
		main_0_13_reg <= main_0_13;
		if (start == 1'b0 && ^(main_0_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_13_reg"); $finish; end
	end
end
always @(*) begin
	memA_address_a = 1'd0;
	/* main: %0*/
	/*   %1 = load volatile i32* getelementptr inbounds ([10 x i32]* @memA, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_0_1)) begin
		memA_address_a = (1'd0 >>> 3'd2);
	end
	/* main: %0*/
	/*   %3 = load volatile i32* getelementptr inbounds ([10 x i32]* @memA, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_0_2)) begin
		memA_address_a = ((1'd0 + (4 * 32'd2)) >>> 3'd2);
	end
	/* main: %0*/
	/*   %5 = load volatile i32* getelementptr inbounds ([10 x i32]* @memA, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_0_3)) begin
		memA_address_a = ((1'd0 + (4 * 32'd4)) >>> 3'd2);
	end
	/* main: %0*/
	/*   %7 = load volatile i32* getelementptr inbounds ([10 x i32]* @memA, i32 0, i32 6), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_0_4)) begin
		memA_address_a = ((1'd0 + (4 * 32'd6)) >>> 3'd2);
	end
	/* main: %0*/
	/*   %9 = load volatile i32* getelementptr inbounds ([10 x i32]* @memA, i32 0, i32 8), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_0_5)) begin
		memA_address_a = ((1'd0 + (4 * 32'd8)) >>> 3'd2);
	end
end
always @(*) begin
	memA_write_enable_a = 1'd0;
	/* main: %0*/
	/*   %1 = load volatile i32* getelementptr inbounds ([10 x i32]* @memA, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_0_1)) begin
		memA_write_enable_a = 1'd0;
	end
	/* main: %0*/
	/*   %3 = load volatile i32* getelementptr inbounds ([10 x i32]* @memA, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_0_2)) begin
		memA_write_enable_a = 1'd0;
	end
	/* main: %0*/
	/*   %5 = load volatile i32* getelementptr inbounds ([10 x i32]* @memA, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_0_3)) begin
		memA_write_enable_a = 1'd0;
	end
	/* main: %0*/
	/*   %7 = load volatile i32* getelementptr inbounds ([10 x i32]* @memA, i32 0, i32 6), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_0_4)) begin
		memA_write_enable_a = 1'd0;
	end
	/* main: %0*/
	/*   %9 = load volatile i32* getelementptr inbounds ([10 x i32]* @memA, i32 0, i32 8), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_0_5)) begin
		memA_write_enable_a = 1'd0;
	end
end
always @(*) begin
	memA_address_b = 1'd0;
	/* main: %0*/
	/*   %2 = load volatile i32* getelementptr inbounds ([10 x i32]* @memA, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_0_1)) begin
		memA_address_b = ((1'd0 + (4 * 32'd1)) >>> 3'd2);
	end
	/* main: %0*/
	/*   %4 = load volatile i32* getelementptr inbounds ([10 x i32]* @memA, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_0_2)) begin
		memA_address_b = ((1'd0 + (4 * 32'd3)) >>> 3'd2);
	end
	/* main: %0*/
	/*   %6 = load volatile i32* getelementptr inbounds ([10 x i32]* @memA, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_0_3)) begin
		memA_address_b = ((1'd0 + (4 * 32'd5)) >>> 3'd2);
	end
	/* main: %0*/
	/*   %8 = load volatile i32* getelementptr inbounds ([10 x i32]* @memA, i32 0, i32 7), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_0_4)) begin
		memA_address_b = ((1'd0 + (4 * 32'd7)) >>> 3'd2);
	end
	/* main: %0*/
	/*   %10 = load volatile i32* getelementptr inbounds ([10 x i32]* @memA, i32 0, i32 9), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_0_5)) begin
		memA_address_b = ((1'd0 + (4 * 32'd9)) >>> 3'd2);
	end
end
always @(*) begin
	memA_write_enable_b = 1'd0;
	/* main: %0*/
	/*   %2 = load volatile i32* getelementptr inbounds ([10 x i32]* @memA, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_0_1)) begin
		memA_write_enable_b = 1'd0;
	end
	/* main: %0*/
	/*   %4 = load volatile i32* getelementptr inbounds ([10 x i32]* @memA, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_0_2)) begin
		memA_write_enable_b = 1'd0;
	end
	/* main: %0*/
	/*   %6 = load volatile i32* getelementptr inbounds ([10 x i32]* @memA, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_0_3)) begin
		memA_write_enable_b = 1'd0;
	end
	/* main: %0*/
	/*   %8 = load volatile i32* getelementptr inbounds ([10 x i32]* @memA, i32 0, i32 7), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_0_4)) begin
		memA_write_enable_b = 1'd0;
	end
	/* main: %0*/
	/*   %10 = load volatile i32* getelementptr inbounds ([10 x i32]* @memA, i32 0, i32 9), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_0_5)) begin
		memA_write_enable_b = 1'd0;
	end
end
always @(posedge clk) begin
	/* main: %0*/
	/*   %11 = tail call fastcc i32 @funcA() #2*/
	if ((cur_state == LEGUP_F_main_BB_0_7)) begin
		funcA_start <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to funcA_start"); $finish; end
	end
	if ((cur_state == LEGUP_function_call_8)) begin
		funcA_start <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to funcA_start"); $finish; end
	end
end
always @(*) begin
	/* main: %0*/
	/*   %11 = tail call fastcc i32 @funcA() #2*/
		funcA_memory_controller_out_a = memory_controller_out_a;
end
always @(*) begin
	/* main: %0*/
	/*   %11 = tail call fastcc i32 @funcA() #2*/
		funcA_memory_controller_out_b = memory_controller_out_b;
end
always @(*) begin
	funcA_memory_controller_waitrequest = memory_controller_waitrequest;
end
always @(*) begin
	funcA_finish_final = funcA_finish_reg;
end
always @(posedge clk) begin
	if ((reset | (cur_state == LEGUP_F_main_BB_0_7))) begin
		funcA_finish_reg <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to funcA_finish_reg"); $finish; end
	end
	if (funcA_finish) begin
		funcA_finish_reg <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to funcA_finish_reg"); $finish; end
	end
end
always @(posedge clk) begin
	if ((reset | (cur_state == LEGUP_F_main_BB_0_7))) begin
		funcA_return_val_reg <= 0;
		if (start == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to funcA_return_val_reg"); $finish; end
	end
	if (funcA_finish) begin
		funcA_return_val_reg <= funcA_return_val;
		if (start == 1'b0 && ^(funcA_return_val) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to funcA_return_val_reg"); $finish; end
	end
end
always @(*) begin
	legup_function_call = 1'd0;
	/* main: %0*/
	/*   %11 = tail call fastcc i32 @funcA() #2*/
	if ((cur_state == LEGUP_function_call_8)) begin
		legup_function_call = 1'd1;
	end
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		finish <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
	/* main: %18*/
	/*   ret i32 %11*/
	if ((cur_state == LEGUP_F_main_BB_18_12)) begin
		finish <= (memory_controller_waitrequest == 1'd0);
		if (start == 1'b0 && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
end
always @(*) begin
	memory_controller_enable_a = 1'd0;
	/* main: %0*/
	/*   store volatile i32 %1, i32* getelementptr inbounds ([10 x i32]* @memB, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_0_2)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store volatile i32 %3, i32* getelementptr inbounds ([10 x i32]* @memB, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_0_3)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store volatile i32 %5, i32* getelementptr inbounds ([10 x i32]* @memB, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_0_4)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store volatile i32 %7, i32* getelementptr inbounds ([10 x i32]* @memB, i32 0, i32 6), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_0_5)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store volatile i32 %9, i32* getelementptr inbounds ([10 x i32]* @memB, i32 0, i32 8), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_0_6)) begin
		memory_controller_enable_a = 1'd1;
	end
end
always @(*) begin
	memory_controller_address_a = 1'd0;
	/* main: %0*/
	/*   store volatile i32 %1, i32* getelementptr inbounds ([10 x i32]* @memB, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_0_2)) begin
		memory_controller_address_a = `TAG_g_memB_a;
	end
	/* main: %0*/
	/*   store volatile i32 %3, i32* getelementptr inbounds ([10 x i32]* @memB, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_0_3)) begin
		memory_controller_address_a = (`TAG_g_memB_a + (4 * 32'd2));
	end
	/* main: %0*/
	/*   store volatile i32 %5, i32* getelementptr inbounds ([10 x i32]* @memB, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_0_4)) begin
		memory_controller_address_a = (`TAG_g_memB_a + (4 * 32'd4));
	end
	/* main: %0*/
	/*   store volatile i32 %7, i32* getelementptr inbounds ([10 x i32]* @memB, i32 0, i32 6), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_0_5)) begin
		memory_controller_address_a = (`TAG_g_memB_a + (4 * 32'd6));
	end
	/* main: %0*/
	/*   store volatile i32 %9, i32* getelementptr inbounds ([10 x i32]* @memB, i32 0, i32 8), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_0_6)) begin
		memory_controller_address_a = (`TAG_g_memB_a + (4 * 32'd8));
	end
end
always @(*) begin
	memory_controller_write_enable_a = 1'd0;
	/* main: %0*/
	/*   store volatile i32 %1, i32* getelementptr inbounds ([10 x i32]* @memB, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_0_2)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store volatile i32 %3, i32* getelementptr inbounds ([10 x i32]* @memB, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_0_3)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store volatile i32 %5, i32* getelementptr inbounds ([10 x i32]* @memB, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_0_4)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store volatile i32 %7, i32* getelementptr inbounds ([10 x i32]* @memB, i32 0, i32 6), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_0_5)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store volatile i32 %9, i32* getelementptr inbounds ([10 x i32]* @memB, i32 0, i32 8), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_0_6)) begin
		memory_controller_write_enable_a = 1'd1;
	end
end
always @(*) begin
	memory_controller_in_a = 1'd0;
	/* main: %0*/
	/*   store volatile i32 %1, i32* getelementptr inbounds ([10 x i32]* @memB, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_0_2)) begin
		memory_controller_in_a = main_0_1;
	end
	/* main: %0*/
	/*   store volatile i32 %3, i32* getelementptr inbounds ([10 x i32]* @memB, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_0_3)) begin
		memory_controller_in_a = main_0_3;
	end
	/* main: %0*/
	/*   store volatile i32 %5, i32* getelementptr inbounds ([10 x i32]* @memB, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_0_4)) begin
		memory_controller_in_a = main_0_5;
	end
	/* main: %0*/
	/*   store volatile i32 %7, i32* getelementptr inbounds ([10 x i32]* @memB, i32 0, i32 6), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_0_5)) begin
		memory_controller_in_a = main_0_7;
	end
	/* main: %0*/
	/*   store volatile i32 %9, i32* getelementptr inbounds ([10 x i32]* @memB, i32 0, i32 8), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_0_6)) begin
		memory_controller_in_a = main_0_9;
	end
end
always @(*) begin
	memory_controller_size_a = 1'd0;
	/* main: %0*/
	/*   store volatile i32 %1, i32* getelementptr inbounds ([10 x i32]* @memB, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_0_2)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %0*/
	/*   store volatile i32 %3, i32* getelementptr inbounds ([10 x i32]* @memB, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_0_3)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %0*/
	/*   store volatile i32 %5, i32* getelementptr inbounds ([10 x i32]* @memB, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_0_4)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %0*/
	/*   store volatile i32 %7, i32* getelementptr inbounds ([10 x i32]* @memB, i32 0, i32 6), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_0_5)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %0*/
	/*   store volatile i32 %9, i32* getelementptr inbounds ([10 x i32]* @memB, i32 0, i32 8), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_0_6)) begin
		memory_controller_size_a = 2'd2;
	end
end
always @(*) begin
	memory_controller_enable_b = 1'd0;
	/* main: %0*/
	/*   store volatile i32 %2, i32* getelementptr inbounds ([10 x i32]* @memB, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_0_2)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store volatile i32 %4, i32* getelementptr inbounds ([10 x i32]* @memB, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_0_3)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store volatile i32 %6, i32* getelementptr inbounds ([10 x i32]* @memB, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_0_4)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store volatile i32 %8, i32* getelementptr inbounds ([10 x i32]* @memB, i32 0, i32 7), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_0_5)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store volatile i32 %10, i32* getelementptr inbounds ([10 x i32]* @memB, i32 0, i32 9), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_0_6)) begin
		memory_controller_enable_b = 1'd1;
	end
end
always @(*) begin
	memory_controller_address_b = 1'd0;
	/* main: %0*/
	/*   store volatile i32 %2, i32* getelementptr inbounds ([10 x i32]* @memB, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_0_2)) begin
		memory_controller_address_b = (`TAG_g_memB_a + (4 * 32'd1));
	end
	/* main: %0*/
	/*   store volatile i32 %4, i32* getelementptr inbounds ([10 x i32]* @memB, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_0_3)) begin
		memory_controller_address_b = (`TAG_g_memB_a + (4 * 32'd3));
	end
	/* main: %0*/
	/*   store volatile i32 %6, i32* getelementptr inbounds ([10 x i32]* @memB, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_0_4)) begin
		memory_controller_address_b = (`TAG_g_memB_a + (4 * 32'd5));
	end
	/* main: %0*/
	/*   store volatile i32 %8, i32* getelementptr inbounds ([10 x i32]* @memB, i32 0, i32 7), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_0_5)) begin
		memory_controller_address_b = (`TAG_g_memB_a + (4 * 32'd7));
	end
	/* main: %0*/
	/*   store volatile i32 %10, i32* getelementptr inbounds ([10 x i32]* @memB, i32 0, i32 9), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_0_6)) begin
		memory_controller_address_b = (`TAG_g_memB_a + (4 * 32'd9));
	end
end
always @(*) begin
	memory_controller_write_enable_b = 1'd0;
	/* main: %0*/
	/*   store volatile i32 %2, i32* getelementptr inbounds ([10 x i32]* @memB, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_0_2)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store volatile i32 %4, i32* getelementptr inbounds ([10 x i32]* @memB, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_0_3)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store volatile i32 %6, i32* getelementptr inbounds ([10 x i32]* @memB, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_0_4)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store volatile i32 %8, i32* getelementptr inbounds ([10 x i32]* @memB, i32 0, i32 7), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_0_5)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store volatile i32 %10, i32* getelementptr inbounds ([10 x i32]* @memB, i32 0, i32 9), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_0_6)) begin
		memory_controller_write_enable_b = 1'd1;
	end
end
always @(*) begin
	memory_controller_in_b = 1'd0;
	/* main: %0*/
	/*   store volatile i32 %2, i32* getelementptr inbounds ([10 x i32]* @memB, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_0_2)) begin
		memory_controller_in_b = main_0_2;
	end
	/* main: %0*/
	/*   store volatile i32 %4, i32* getelementptr inbounds ([10 x i32]* @memB, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_0_3)) begin
		memory_controller_in_b = main_0_4;
	end
	/* main: %0*/
	/*   store volatile i32 %6, i32* getelementptr inbounds ([10 x i32]* @memB, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_0_4)) begin
		memory_controller_in_b = main_0_6;
	end
	/* main: %0*/
	/*   store volatile i32 %8, i32* getelementptr inbounds ([10 x i32]* @memB, i32 0, i32 7), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_0_5)) begin
		memory_controller_in_b = main_0_8;
	end
	/* main: %0*/
	/*   store volatile i32 %10, i32* getelementptr inbounds ([10 x i32]* @memB, i32 0, i32 9), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_0_6)) begin
		memory_controller_in_b = main_0_10;
	end
end
always @(*) begin
	memory_controller_size_b = 1'd0;
	/* main: %0*/
	/*   store volatile i32 %2, i32* getelementptr inbounds ([10 x i32]* @memB, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_0_2)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %0*/
	/*   store volatile i32 %4, i32* getelementptr inbounds ([10 x i32]* @memB, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_0_3)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %0*/
	/*   store volatile i32 %6, i32* getelementptr inbounds ([10 x i32]* @memB, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_0_4)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %0*/
	/*   store volatile i32 %8, i32* getelementptr inbounds ([10 x i32]* @memB, i32 0, i32 7), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_0_5)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %0*/
	/*   store volatile i32 %10, i32* getelementptr inbounds ([10 x i32]* @memB, i32 0, i32 9), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_0_6)) begin
		memory_controller_size_b = 2'd2;
	end
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		return_val <= 0;
		if (start == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
	end
	/* main: %18*/
	/*   ret i32 %11*/
	if ((cur_state == LEGUP_F_main_BB_18_12)) begin
		return_val <= main_0_11_reg;
		if (start == 1'b0 && ^(main_0_11_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
	end
end

endmodule 
module ram_dual_port
(
	clk,
	clken,
	address_a,
	address_b,
	wren_a,
	wren_b,
	data_a,
	data_b,
	byteena_a,
	byteena_b,
	q_a,
	q_b
);

parameter  width_a = 1'd0;
parameter  width_b = 1'd0;
parameter  widthad_a = 1'd0;
parameter  widthad_b = 1'd0;
parameter  numwords_a = 1'd0;
parameter  numwords_b = 1'd0;
parameter  init_file = "UNUSED.mif";
parameter  width_be_a = 1'd0;
parameter  width_be_b = 1'd0;
parameter  latency = 1;

input  clk;
input  clken;
input [(widthad_a-1):0] address_a;
input [(widthad_b-1):0] address_b;
output wire [(width_a-1):0] q_a;
output wire [(width_b-1):0] q_b;
reg [(width_a-1):0] q_a_wire;
reg [(width_b-1):0] q_b_wire;
input  wren_a;
input  wren_b;
input [(width_a-1):0] data_a;
input [(width_b-1):0] data_b;
// byte enable is unsupported by inferred RAMs
input [width_be_a-1:0] byteena_a;
input [width_be_b-1:0] byteena_b;

(* ramstyle = "no_rw_check", ram_init_file = init_file *) reg [width_a-1:0] ram[numwords_a-1:0];

/* synthesis translate_off */
integer i;
ALTERA_MF_MEMORY_INITIALIZATION mem ();
reg [8*256:1] ram_ver_file;
initial begin
	if (init_file == "UNUSED.mif")
    begin
		for (i = 0; i < numwords_a; i = i + 1)
			ram[i] = 0;
    end
	else
    begin
        // modelsim can't read .mif files directly. So use Altera function to
        // convert them to .ver files
        mem.convert_to_ver_file(init_file, width_a, ram_ver_file);
        $readmemh(ram_ver_file, ram);
    end
end
/* synthesis translate_on */

always @ (posedge clk)
if (clken)
begin // Port A
if (wren_a)
begin
    ram[address_a] <= data_a;
    q_a_wire <= {width_a{1'bX}};
end
else
    q_a_wire <= ram[address_a];
end
always @ (posedge clk)
if (clken)
begin // Port b
if (wren_b)
begin
    ram[address_b] <= data_b;
    q_b_wire <= {width_b{1'bX}};
end
else
    q_b_wire <= ram[address_b];
end



integer j;
reg [(width_a-1):0] q_a_reg[latency:1], q_b_reg[latency:1];

always @(*)
begin
   q_a_reg[1] <= q_a_wire;
   q_b_reg[1] <= q_b_wire;
end

always @(posedge clk)
if (clken)
begin
   for (j = 1; j < latency; j=j+1)
   begin
       q_a_reg[j+1] <= q_a_reg[j];
       q_b_reg[j+1] <= q_b_reg[j];
   end
end

assign q_a = (clken) ? q_a_reg[latency] : 0;
assign q_b = (clken) ? q_b_reg[latency] : 0;


endmodule
module rom_dual_port
(
	clk,
	clken,
	address_a,
	address_b,
	q_a,
	q_b
);

parameter  width_a = 1'd0;
parameter  width_b = 1'd0;
parameter  widthad_a = 1'd0;
parameter  widthad_b = 1'd0;
parameter  numwords_a = 1'd0;
parameter  numwords_b = 1'd0;
parameter  init_file = "UNUSED.mif";
parameter  latency = 1;

input  clk;
input  clken;
input [(widthad_a-1):0] address_a;
input [(widthad_b-1):0] address_b;
output wire [(width_a-1):0] q_a;
output wire [(width_b-1):0] q_b;
reg [(width_a-1):0] q_a_wire;
reg [(width_b-1):0] q_b_wire;

(* ramstyle = "no_rw_check", ram_init_file = init_file *) reg [width_a-1:0] ram[numwords_a-1:0];

/* synthesis translate_off */
integer i;
ALTERA_MF_MEMORY_INITIALIZATION mem ();
reg [8*256:1] ram_ver_file;
initial begin
	if (init_file == "UNUSED.mif")
    begin
		for (i = 0; i < numwords_a; i = i + 1)
			ram[i] = 0;
    end
	else
    begin
        // modelsim can't read .mif files directly. So use Altera function to
        // convert them to .ver files
        mem.convert_to_ver_file(init_file, width_a, ram_ver_file);
        $readmemh(ram_ver_file, ram);
    end
end
/* synthesis translate_on */

always @ (posedge clk)
if (clken)
begin
    q_a_wire <= ram[address_a];
    q_b_wire <= ram[address_b];
end



integer j;
reg [(width_a-1):0] q_a_reg[latency:1], q_b_reg[latency:1];

always @(*)
begin
   q_a_reg[1] <= q_a_wire;
   q_b_reg[1] <= q_b_wire;
end

always @(posedge clk)
if (clken)
begin
   for (j = 1; j < latency; j=j+1)
   begin
       q_a_reg[j+1] <= q_a_reg[j];
       q_b_reg[j+1] <= q_b_reg[j];
   end
end

assign q_a = (clken) ? q_a_reg[latency] : 0;
assign q_b = (clken) ? q_b_reg[latency] : 0;


endmodule


module de4 ( 
    	     OSC_50_BANK2, 
             BUTTON, 
             LED, 
    	     SEG0_D, 
    	     SEG1_D 
	     ); 
   input OSC_50_BANK2; 
   input [1:0] BUTTON; 
   output [6:0] SEG0_D; 
   output [6:0] SEG1_D; 
   output [7:0] LED; 
   
   de2 de2_inst ( 
		  .CLOCK_50 (OSC_50_BANK2), 
		  .LEDG (LED), 
		  .KEY (BUTTON), 
		  .SW (), 
		  .HEX0 (SEG0_D), 
		  .HEX1 (SEG1_D), 
		  .HEX2 (), 
		  .HEX3 (), 
		  .HEX4 (), 
		  .HEX5 (), 
		  .HEX6 (), 
		  .HEX7 () 
		  ); 
   
endmodule


module de2 (
	    CLOCK_50,
	    KEY,
	    SW,
	    HEX0,
	    HEX1,
	    HEX2,
	    HEX3,
	    HEX4,
	    HEX5,
	    HEX6,
	    HEX7,
	    LEDG

	    );

   input CLOCK_50;
   input [3:0] KEY;
   input [17:0] SW;
   output [6:0] HEX0, HEX1,  HEX2,  HEX3,  HEX4,  HEX5,  HEX6,  HEX7;
   reg [6:0] 	hex0, hex1, hex2, hex3, hex4, hex5, hex6, hex7;
   

   output [7:0] LEDG;    
wire clk = CLOCK_50;
    wire go = ~KEY[1];



   wire 	reset = ~KEY[0];
   wire 	start;
   wire [31:0] 	return_val;
   reg  [31:0] 	return_val_reg;
   wire 	finish;
   wire [3:0]	state;

   hex_digits h7( .x(hex7), .hex_LEDs(HEX7));
   hex_digits h6( .x(hex6), .hex_LEDs(HEX6));
   hex_digits h5( .x(hex5), .hex_LEDs(HEX5));
   hex_digits h4( .x(hex4), .hex_LEDs(HEX4));
   hex_digits h3( .x(hex3), .hex_LEDs(HEX3));
   hex_digits h2( .x(hex2), .hex_LEDs(HEX2));
   hex_digits h1( .x(hex1), .hex_LEDs(HEX1));
   hex_digits h0( .x(hex0), .hex_LEDs(HEX0));
   
	always @ (*) begin
		hex7 <= return_val_reg[31:28];
		hex6 <= return_val_reg[27:24];
		hex5 <= return_val_reg[23:20];
		hex4 <= return_val_reg[19:16];
		hex3 <= return_val_reg[15:12];
		hex2 <= return_val_reg[11:8];
		hex1 <= return_val_reg[7:4];
		hex0 <= return_val_reg[3:0];
	end

    parameter s_WAIT = 3'b001, s_START = 3'b010, s_EXE = 3'b011,
                s_DONE = 3'b100;

    // state registers
    reg [3:0] y_Q, Y_D;

    assign LEDG[3:0] = y_Q;

    // next state
    always @(*)
    begin
        case (y_Q)
            s_WAIT: if (go) Y_D = s_START; else Y_D = y_Q;

            s_START: Y_D = s_EXE;

            s_EXE: if (!finish) Y_D = s_EXE; else Y_D = s_DONE;

            s_DONE: Y_D = s_DONE;

            default: Y_D = 3'bxxx;
        endcase
    end

    // current state
    always @(posedge clk)
    begin
        if (reset) // synchronous clear
            y_Q <= s_WAIT;
        else
            y_Q <= Y_D;
    end

    always @(posedge clk)
        if (y_Q == s_EXE && finish)
            return_val_reg <= return_val;
        else if (y_Q == s_DONE)
            return_val_reg <= return_val_reg;
        else
            return_val_reg <= 0;


    assign start = (y_Q == s_START);

   
   top top_inst (
      .clk (clk),
      .reset (reset),
      .finish (finish),
      .return_val (return_val),
        .start (start)

    );

endmodule

module circuit_start_control (
    go,
    control_key
);
    input control_key;
    output go;
    assign go = control_key;
endmodule
module hex_digits(x, hex_LEDs);
    input [3:0] x;
    output [6:0] hex_LEDs;
    
    assign hex_LEDs[0] = (~x[3] & ~x[2] & ~x[1] & x[0]) |
                            (~x[3] & x[2] & ~x[1] & ~x[0]) |
                            (x[3] & x[2] & ~x[1] & x[0]) |
                            (x[3] & ~x[2] & x[1] & x[0]);
    assign hex_LEDs[1] = (~x[3] & x[2] & ~x[1] & x[0]) |
                            (x[3] & x[1] & x[0]) |
                            (x[3] & x[2] & ~x[0]) |
                            (x[2] & x[1] & ~x[0]);
    assign hex_LEDs[2] = (x[3] & x[2] & ~x[0]) |
                            (x[3] & x[2] & x[1]) |
                            (~x[3] & ~x[2] & x[1] & ~x[0]);
    assign hex_LEDs[3] = (~x[3] & ~x[2] & ~x[1] & x[0]) | 
                            (~x[3] & x[2] & ~x[1] & ~x[0]) | 
                            (x[2] & x[1] & x[0]) | 
                            (x[3] & ~x[2] & x[1] & ~x[0]);
    assign hex_LEDs[4] = (~x[3] & x[0]) |
                            (~x[3] & x[2] & ~x[1]) |
                            (~x[2] & ~x[1] & x[0]);
    assign hex_LEDs[5] = (~x[3] & ~x[2] & x[0]) | 
                            (~x[3] & ~x[2] & x[1]) | 
                            (~x[3] & x[1] & x[0]) | 
                            (x[3] & x[2] & ~x[1] & x[0]);
    assign hex_LEDs[6] = (~x[3] & ~x[2] & ~x[1]) | 
                            (x[3] & x[2] & ~x[1] & ~x[0]) | 
                            (~x[3] & x[2] & x[1] & x[0]);
    
endmodule
`timescale 1 ns / 1 ns
module main_tb
(
);

reg  clk;
reg  reset;
reg  start;
reg  waitrequest;
wire [31:0] return_val;
wire  finish;


top top_inst (
	.clk (clk),
	.reset (reset),
	.start (start),
	.waitrequest (waitrequest),
	.finish (finish),
	.return_val (return_val)
);


// Local Rams



initial 
    clk = 0;
always @(clk)
    clk <= #10 ~clk;

initial begin
//$monitor("At t=%t clk=%b %b %b %b %d", $time, clk, reset, start, finish, return_val);
@(negedge clk);
reset <= 1;
@(negedge clk);
reset <= 0;
start <= 1;
@(negedge clk);
start <= 0;
end

always@(finish) begin
    if (finish == 1) begin
        $display("At t=%t clk=%b finish=%b return_val=%d", $time, clk, finish, return_val);
        $display("Cycles: %d", ($time-50)/20);
        $finish;
    end
end

initial begin
waitrequest <= 1;
@(negedge clk);
@(negedge clk);
waitrequest <= 0;
end


endmodule 
