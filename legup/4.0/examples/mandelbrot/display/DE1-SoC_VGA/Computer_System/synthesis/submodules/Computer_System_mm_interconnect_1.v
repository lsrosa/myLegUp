// Computer_System_mm_interconnect_1.v

// This file was auto-generated from altera_mm_interconnect_hw.tcl.  If you edit it your changes
// will probably be lost.
// 
// Generated using ACDS version 14.0 200 at 2014.07.14.15:03:00

`timescale 1 ps / 1 ps
module Computer_System_mm_interconnect_1 (
		input  wire [11:0]  Arm_A9_HPS_h2f_axi_master_awid,                                        //                                       Arm_A9_HPS_h2f_axi_master.awid
		input  wire [29:0]  Arm_A9_HPS_h2f_axi_master_awaddr,                                      //                                                                .awaddr
		input  wire [3:0]   Arm_A9_HPS_h2f_axi_master_awlen,                                       //                                                                .awlen
		input  wire [2:0]   Arm_A9_HPS_h2f_axi_master_awsize,                                      //                                                                .awsize
		input  wire [1:0]   Arm_A9_HPS_h2f_axi_master_awburst,                                     //                                                                .awburst
		input  wire [1:0]   Arm_A9_HPS_h2f_axi_master_awlock,                                      //                                                                .awlock
		input  wire [3:0]   Arm_A9_HPS_h2f_axi_master_awcache,                                     //                                                                .awcache
		input  wire [2:0]   Arm_A9_HPS_h2f_axi_master_awprot,                                      //                                                                .awprot
		input  wire         Arm_A9_HPS_h2f_axi_master_awvalid,                                     //                                                                .awvalid
		output wire         Arm_A9_HPS_h2f_axi_master_awready,                                     //                                                                .awready
		input  wire [11:0]  Arm_A9_HPS_h2f_axi_master_wid,                                         //                                                                .wid
		input  wire [127:0] Arm_A9_HPS_h2f_axi_master_wdata,                                       //                                                                .wdata
		input  wire [15:0]  Arm_A9_HPS_h2f_axi_master_wstrb,                                       //                                                                .wstrb
		input  wire         Arm_A9_HPS_h2f_axi_master_wlast,                                       //                                                                .wlast
		input  wire         Arm_A9_HPS_h2f_axi_master_wvalid,                                      //                                                                .wvalid
		output wire         Arm_A9_HPS_h2f_axi_master_wready,                                      //                                                                .wready
		output wire [11:0]  Arm_A9_HPS_h2f_axi_master_bid,                                         //                                                                .bid
		output wire [1:0]   Arm_A9_HPS_h2f_axi_master_bresp,                                       //                                                                .bresp
		output wire         Arm_A9_HPS_h2f_axi_master_bvalid,                                      //                                                                .bvalid
		input  wire         Arm_A9_HPS_h2f_axi_master_bready,                                      //                                                                .bready
		input  wire [11:0]  Arm_A9_HPS_h2f_axi_master_arid,                                        //                                                                .arid
		input  wire [29:0]  Arm_A9_HPS_h2f_axi_master_araddr,                                      //                                                                .araddr
		input  wire [3:0]   Arm_A9_HPS_h2f_axi_master_arlen,                                       //                                                                .arlen
		input  wire [2:0]   Arm_A9_HPS_h2f_axi_master_arsize,                                      //                                                                .arsize
		input  wire [1:0]   Arm_A9_HPS_h2f_axi_master_arburst,                                     //                                                                .arburst
		input  wire [1:0]   Arm_A9_HPS_h2f_axi_master_arlock,                                      //                                                                .arlock
		input  wire [3:0]   Arm_A9_HPS_h2f_axi_master_arcache,                                     //                                                                .arcache
		input  wire [2:0]   Arm_A9_HPS_h2f_axi_master_arprot,                                      //                                                                .arprot
		input  wire         Arm_A9_HPS_h2f_axi_master_arvalid,                                     //                                                                .arvalid
		output wire         Arm_A9_HPS_h2f_axi_master_arready,                                     //                                                                .arready
		output wire [11:0]  Arm_A9_HPS_h2f_axi_master_rid,                                         //                                                                .rid
		output wire [127:0] Arm_A9_HPS_h2f_axi_master_rdata,                                       //                                                                .rdata
		output wire [1:0]   Arm_A9_HPS_h2f_axi_master_rresp,                                       //                                                                .rresp
		output wire         Arm_A9_HPS_h2f_axi_master_rlast,                                       //                                                                .rlast
		output wire         Arm_A9_HPS_h2f_axi_master_rvalid,                                      //                                                                .rvalid
		input  wire         Arm_A9_HPS_h2f_axi_master_rready,                                      //                                                                .rready
		input  wire [11:0]  Arm_A9_HPS_h2f_lw_axi_master_awid,                                     //                                    Arm_A9_HPS_h2f_lw_axi_master.awid
		input  wire [20:0]  Arm_A9_HPS_h2f_lw_axi_master_awaddr,                                   //                                                                .awaddr
		input  wire [3:0]   Arm_A9_HPS_h2f_lw_axi_master_awlen,                                    //                                                                .awlen
		input  wire [2:0]   Arm_A9_HPS_h2f_lw_axi_master_awsize,                                   //                                                                .awsize
		input  wire [1:0]   Arm_A9_HPS_h2f_lw_axi_master_awburst,                                  //                                                                .awburst
		input  wire [1:0]   Arm_A9_HPS_h2f_lw_axi_master_awlock,                                   //                                                                .awlock
		input  wire [3:0]   Arm_A9_HPS_h2f_lw_axi_master_awcache,                                  //                                                                .awcache
		input  wire [2:0]   Arm_A9_HPS_h2f_lw_axi_master_awprot,                                   //                                                                .awprot
		input  wire         Arm_A9_HPS_h2f_lw_axi_master_awvalid,                                  //                                                                .awvalid
		output wire         Arm_A9_HPS_h2f_lw_axi_master_awready,                                  //                                                                .awready
		input  wire [11:0]  Arm_A9_HPS_h2f_lw_axi_master_wid,                                      //                                                                .wid
		input  wire [31:0]  Arm_A9_HPS_h2f_lw_axi_master_wdata,                                    //                                                                .wdata
		input  wire [3:0]   Arm_A9_HPS_h2f_lw_axi_master_wstrb,                                    //                                                                .wstrb
		input  wire         Arm_A9_HPS_h2f_lw_axi_master_wlast,                                    //                                                                .wlast
		input  wire         Arm_A9_HPS_h2f_lw_axi_master_wvalid,                                   //                                                                .wvalid
		output wire         Arm_A9_HPS_h2f_lw_axi_master_wready,                                   //                                                                .wready
		output wire [11:0]  Arm_A9_HPS_h2f_lw_axi_master_bid,                                      //                                                                .bid
		output wire [1:0]   Arm_A9_HPS_h2f_lw_axi_master_bresp,                                    //                                                                .bresp
		output wire         Arm_A9_HPS_h2f_lw_axi_master_bvalid,                                   //                                                                .bvalid
		input  wire         Arm_A9_HPS_h2f_lw_axi_master_bready,                                   //                                                                .bready
		input  wire [11:0]  Arm_A9_HPS_h2f_lw_axi_master_arid,                                     //                                                                .arid
		input  wire [20:0]  Arm_A9_HPS_h2f_lw_axi_master_araddr,                                   //                                                                .araddr
		input  wire [3:0]   Arm_A9_HPS_h2f_lw_axi_master_arlen,                                    //                                                                .arlen
		input  wire [2:0]   Arm_A9_HPS_h2f_lw_axi_master_arsize,                                   //                                                                .arsize
		input  wire [1:0]   Arm_A9_HPS_h2f_lw_axi_master_arburst,                                  //                                                                .arburst
		input  wire [1:0]   Arm_A9_HPS_h2f_lw_axi_master_arlock,                                   //                                                                .arlock
		input  wire [3:0]   Arm_A9_HPS_h2f_lw_axi_master_arcache,                                  //                                                                .arcache
		input  wire [2:0]   Arm_A9_HPS_h2f_lw_axi_master_arprot,                                   //                                                                .arprot
		input  wire         Arm_A9_HPS_h2f_lw_axi_master_arvalid,                                  //                                                                .arvalid
		output wire         Arm_A9_HPS_h2f_lw_axi_master_arready,                                  //                                                                .arready
		output wire [11:0]  Arm_A9_HPS_h2f_lw_axi_master_rid,                                      //                                                                .rid
		output wire [31:0]  Arm_A9_HPS_h2f_lw_axi_master_rdata,                                    //                                                                .rdata
		output wire [1:0]   Arm_A9_HPS_h2f_lw_axi_master_rresp,                                    //                                                                .rresp
		output wire         Arm_A9_HPS_h2f_lw_axi_master_rlast,                                    //                                                                .rlast
		output wire         Arm_A9_HPS_h2f_lw_axi_master_rvalid,                                   //                                                                .rvalid
		input  wire         Arm_A9_HPS_h2f_lw_axi_master_rready,                                   //                                                                .rready
		input  wire         System_PLL_sys_clk_clk,                                                //                                              System_PLL_sys_clk.clk
		input  wire         Arm_A9_HPS_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset, // Arm_A9_HPS_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset.reset
		input  wire         JTAG_to_FPGA_Bridge_clk_reset_reset_bridge_in_reset_reset,             //             JTAG_to_FPGA_Bridge_clk_reset_reset_bridge_in_reset.reset
		input  wire         SDRAM_reset_reset_bridge_in_reset_reset,                               //                               SDRAM_reset_reset_bridge_in_reset.reset
		input  wire [31:0]  JTAG_to_FPGA_Bridge_master_address,                                    //                                      JTAG_to_FPGA_Bridge_master.address
		output wire         JTAG_to_FPGA_Bridge_master_waitrequest,                                //                                                                .waitrequest
		input  wire [3:0]   JTAG_to_FPGA_Bridge_master_byteenable,                                 //                                                                .byteenable
		input  wire         JTAG_to_FPGA_Bridge_master_read,                                       //                                                                .read
		output wire [31:0]  JTAG_to_FPGA_Bridge_master_readdata,                                   //                                                                .readdata
		output wire         JTAG_to_FPGA_Bridge_master_readdatavalid,                              //                                                                .readdatavalid
		input  wire         JTAG_to_FPGA_Bridge_master_write,                                      //                                                                .write
		input  wire [31:0]  JTAG_to_FPGA_Bridge_master_writedata,                                  //                                                                .writedata
		input  wire [31:0]  VGA_Subsystem_pixel_dma_master_address,                                //                                  VGA_Subsystem_pixel_dma_master.address
		output wire         VGA_Subsystem_pixel_dma_master_waitrequest,                            //                                                                .waitrequest
		input  wire         VGA_Subsystem_pixel_dma_master_read,                                   //                                                                .read
		output wire [15:0]  VGA_Subsystem_pixel_dma_master_readdata,                               //                                                                .readdata
		output wire         VGA_Subsystem_pixel_dma_master_readdatavalid,                          //                                                                .readdatavalid
		input  wire         VGA_Subsystem_pixel_dma_master_lock,                                   //                                                                .lock
		output wire [2:0]   Interval_Timer_s1_address,                                             //                                               Interval_Timer_s1.address
		output wire         Interval_Timer_s1_write,                                               //                                                                .write
		input  wire [15:0]  Interval_Timer_s1_readdata,                                            //                                                                .readdata
		output wire [15:0]  Interval_Timer_s1_writedata,                                           //                                                                .writedata
		output wire         Interval_Timer_s1_chipselect,                                          //                                                                .chipselect
		output wire [0:0]   JTAG_UART_avalon_jtag_slave_address,                                   //                                     JTAG_UART_avalon_jtag_slave.address
		output wire         JTAG_UART_avalon_jtag_slave_write,                                     //                                                                .write
		output wire         JTAG_UART_avalon_jtag_slave_read,                                      //                                                                .read
		input  wire [31:0]  JTAG_UART_avalon_jtag_slave_readdata,                                  //                                                                .readdata
		output wire [31:0]  JTAG_UART_avalon_jtag_slave_writedata,                                 //                                                                .writedata
		input  wire         JTAG_UART_avalon_jtag_slave_waitrequest,                               //                                                                .waitrequest
		output wire         JTAG_UART_avalon_jtag_slave_chipselect,                                //                                                                .chipselect
		output wire [1:0]   LEDs_s1_address,                                                       //                                                         LEDs_s1.address
		output wire         LEDs_s1_write,                                                         //                                                                .write
		input  wire [31:0]  LEDs_s1_readdata,                                                      //                                                                .readdata
		output wire [31:0]  LEDs_s1_writedata,                                                     //                                                                .writedata
		output wire         LEDs_s1_chipselect,                                                    //                                                                .chipselect
		output wire [23:0]  SDRAM_s1_address,                                                      //                                                        SDRAM_s1.address
		output wire         SDRAM_s1_write,                                                        //                                                                .write
		output wire         SDRAM_s1_read,                                                         //                                                                .read
		input  wire [15:0]  SDRAM_s1_readdata,                                                     //                                                                .readdata
		output wire [15:0]  SDRAM_s1_writedata,                                                    //                                                                .writedata
		output wire [1:0]   SDRAM_s1_byteenable,                                                   //                                                                .byteenable
		input  wire         SDRAM_s1_readdatavalid,                                                //                                                                .readdatavalid
		input  wire         SDRAM_s1_waitrequest,                                                  //                                                                .waitrequest
		output wire         SDRAM_s1_chipselect,                                                   //                                                                .chipselect
		output wire [1:0]   Slider_Switches_s1_address,                                            //                                              Slider_Switches_s1.address
		input  wire [31:0]  Slider_Switches_s1_readdata,                                           //                                                                .readdata
		output wire [1:0]   VGA_Subsystem_pixel_dma_control_slave_address,                         //                           VGA_Subsystem_pixel_dma_control_slave.address
		output wire         VGA_Subsystem_pixel_dma_control_slave_write,                           //                                                                .write
		output wire         VGA_Subsystem_pixel_dma_control_slave_read,                            //                                                                .read
		input  wire [31:0]  VGA_Subsystem_pixel_dma_control_slave_readdata,                        //                                                                .readdata
		output wire [31:0]  VGA_Subsystem_pixel_dma_control_slave_writedata,                       //                                                                .writedata
		output wire [3:0]   VGA_Subsystem_pixel_dma_control_slave_byteenable                       //                                                                .byteenable
	);

	wire          jtag_to_fpga_bridge_master_translator_avalon_universal_master_0_waitrequest;                               // JTAG_to_FPGA_Bridge_master_agent:av_waitrequest -> JTAG_to_FPGA_Bridge_master_translator:uav_waitrequest
	wire    [2:0] jtag_to_fpga_bridge_master_translator_avalon_universal_master_0_burstcount;                                // JTAG_to_FPGA_Bridge_master_translator:uav_burstcount -> JTAG_to_FPGA_Bridge_master_agent:av_burstcount
	wire   [31:0] jtag_to_fpga_bridge_master_translator_avalon_universal_master_0_writedata;                                 // JTAG_to_FPGA_Bridge_master_translator:uav_writedata -> JTAG_to_FPGA_Bridge_master_agent:av_writedata
	wire   [31:0] jtag_to_fpga_bridge_master_translator_avalon_universal_master_0_address;                                   // JTAG_to_FPGA_Bridge_master_translator:uav_address -> JTAG_to_FPGA_Bridge_master_agent:av_address
	wire          jtag_to_fpga_bridge_master_translator_avalon_universal_master_0_lock;                                      // JTAG_to_FPGA_Bridge_master_translator:uav_lock -> JTAG_to_FPGA_Bridge_master_agent:av_lock
	wire          jtag_to_fpga_bridge_master_translator_avalon_universal_master_0_write;                                     // JTAG_to_FPGA_Bridge_master_translator:uav_write -> JTAG_to_FPGA_Bridge_master_agent:av_write
	wire          jtag_to_fpga_bridge_master_translator_avalon_universal_master_0_read;                                      // JTAG_to_FPGA_Bridge_master_translator:uav_read -> JTAG_to_FPGA_Bridge_master_agent:av_read
	wire   [31:0] jtag_to_fpga_bridge_master_translator_avalon_universal_master_0_readdata;                                  // JTAG_to_FPGA_Bridge_master_agent:av_readdata -> JTAG_to_FPGA_Bridge_master_translator:uav_readdata
	wire          jtag_to_fpga_bridge_master_translator_avalon_universal_master_0_debugaccess;                               // JTAG_to_FPGA_Bridge_master_translator:uav_debugaccess -> JTAG_to_FPGA_Bridge_master_agent:av_debugaccess
	wire    [3:0] jtag_to_fpga_bridge_master_translator_avalon_universal_master_0_byteenable;                                // JTAG_to_FPGA_Bridge_master_translator:uav_byteenable -> JTAG_to_FPGA_Bridge_master_agent:av_byteenable
	wire          jtag_to_fpga_bridge_master_translator_avalon_universal_master_0_readdatavalid;                             // JTAG_to_FPGA_Bridge_master_agent:av_readdatavalid -> JTAG_to_FPGA_Bridge_master_translator:uav_readdatavalid
	wire          vga_subsystem_pixel_dma_master_translator_avalon_universal_master_0_waitrequest;                           // VGA_Subsystem_pixel_dma_master_agent:av_waitrequest -> VGA_Subsystem_pixel_dma_master_translator:uav_waitrequest
	wire    [1:0] vga_subsystem_pixel_dma_master_translator_avalon_universal_master_0_burstcount;                            // VGA_Subsystem_pixel_dma_master_translator:uav_burstcount -> VGA_Subsystem_pixel_dma_master_agent:av_burstcount
	wire   [15:0] vga_subsystem_pixel_dma_master_translator_avalon_universal_master_0_writedata;                             // VGA_Subsystem_pixel_dma_master_translator:uav_writedata -> VGA_Subsystem_pixel_dma_master_agent:av_writedata
	wire   [31:0] vga_subsystem_pixel_dma_master_translator_avalon_universal_master_0_address;                               // VGA_Subsystem_pixel_dma_master_translator:uav_address -> VGA_Subsystem_pixel_dma_master_agent:av_address
	wire          vga_subsystem_pixel_dma_master_translator_avalon_universal_master_0_lock;                                  // VGA_Subsystem_pixel_dma_master_translator:uav_lock -> VGA_Subsystem_pixel_dma_master_agent:av_lock
	wire          vga_subsystem_pixel_dma_master_translator_avalon_universal_master_0_write;                                 // VGA_Subsystem_pixel_dma_master_translator:uav_write -> VGA_Subsystem_pixel_dma_master_agent:av_write
	wire          vga_subsystem_pixel_dma_master_translator_avalon_universal_master_0_read;                                  // VGA_Subsystem_pixel_dma_master_translator:uav_read -> VGA_Subsystem_pixel_dma_master_agent:av_read
	wire   [15:0] vga_subsystem_pixel_dma_master_translator_avalon_universal_master_0_readdata;                              // VGA_Subsystem_pixel_dma_master_agent:av_readdata -> VGA_Subsystem_pixel_dma_master_translator:uav_readdata
	wire          vga_subsystem_pixel_dma_master_translator_avalon_universal_master_0_debugaccess;                           // VGA_Subsystem_pixel_dma_master_translator:uav_debugaccess -> VGA_Subsystem_pixel_dma_master_agent:av_debugaccess
	wire    [1:0] vga_subsystem_pixel_dma_master_translator_avalon_universal_master_0_byteenable;                            // VGA_Subsystem_pixel_dma_master_translator:uav_byteenable -> VGA_Subsystem_pixel_dma_master_agent:av_byteenable
	wire          vga_subsystem_pixel_dma_master_translator_avalon_universal_master_0_readdatavalid;                         // VGA_Subsystem_pixel_dma_master_agent:av_readdatavalid -> VGA_Subsystem_pixel_dma_master_translator:uav_readdatavalid
	wire          rsp_mux_005_src_endofpacket;                                                                               // rsp_mux_005:src_endofpacket -> VGA_Subsystem_pixel_dma_master_agent:rp_endofpacket
	wire          rsp_mux_005_src_valid;                                                                                     // rsp_mux_005:src_valid -> VGA_Subsystem_pixel_dma_master_agent:rp_valid
	wire          rsp_mux_005_src_startofpacket;                                                                             // rsp_mux_005:src_startofpacket -> VGA_Subsystem_pixel_dma_master_agent:rp_startofpacket
	wire  [112:0] rsp_mux_005_src_data;                                                                                      // rsp_mux_005:src_data -> VGA_Subsystem_pixel_dma_master_agent:rp_data
	wire    [5:0] rsp_mux_005_src_channel;                                                                                   // rsp_mux_005:src_channel -> VGA_Subsystem_pixel_dma_master_agent:rp_channel
	wire          rsp_mux_005_src_ready;                                                                                     // VGA_Subsystem_pixel_dma_master_agent:rp_ready -> rsp_mux_005:src_ready
	wire          sdram_s1_agent_m0_waitrequest;                                                                             // SDRAM_s1_translator:uav_waitrequest -> SDRAM_s1_agent:m0_waitrequest
	wire    [1:0] sdram_s1_agent_m0_burstcount;                                                                              // SDRAM_s1_agent:m0_burstcount -> SDRAM_s1_translator:uav_burstcount
	wire   [15:0] sdram_s1_agent_m0_writedata;                                                                               // SDRAM_s1_agent:m0_writedata -> SDRAM_s1_translator:uav_writedata
	wire   [31:0] sdram_s1_agent_m0_address;                                                                                 // SDRAM_s1_agent:m0_address -> SDRAM_s1_translator:uav_address
	wire          sdram_s1_agent_m0_write;                                                                                   // SDRAM_s1_agent:m0_write -> SDRAM_s1_translator:uav_write
	wire          sdram_s1_agent_m0_lock;                                                                                    // SDRAM_s1_agent:m0_lock -> SDRAM_s1_translator:uav_lock
	wire          sdram_s1_agent_m0_read;                                                                                    // SDRAM_s1_agent:m0_read -> SDRAM_s1_translator:uav_read
	wire   [15:0] sdram_s1_agent_m0_readdata;                                                                                // SDRAM_s1_translator:uav_readdata -> SDRAM_s1_agent:m0_readdata
	wire          sdram_s1_agent_m0_readdatavalid;                                                                           // SDRAM_s1_translator:uav_readdatavalid -> SDRAM_s1_agent:m0_readdatavalid
	wire          sdram_s1_agent_m0_debugaccess;                                                                             // SDRAM_s1_agent:m0_debugaccess -> SDRAM_s1_translator:uav_debugaccess
	wire    [1:0] sdram_s1_agent_m0_byteenable;                                                                              // SDRAM_s1_agent:m0_byteenable -> SDRAM_s1_translator:uav_byteenable
	wire          sdram_s1_agent_rf_source_endofpacket;                                                                      // SDRAM_s1_agent:rf_source_endofpacket -> SDRAM_s1_agent_rsp_fifo:in_endofpacket
	wire          sdram_s1_agent_rf_source_valid;                                                                            // SDRAM_s1_agent:rf_source_valid -> SDRAM_s1_agent_rsp_fifo:in_valid
	wire          sdram_s1_agent_rf_source_startofpacket;                                                                    // SDRAM_s1_agent:rf_source_startofpacket -> SDRAM_s1_agent_rsp_fifo:in_startofpacket
	wire  [113:0] sdram_s1_agent_rf_source_data;                                                                             // SDRAM_s1_agent:rf_source_data -> SDRAM_s1_agent_rsp_fifo:in_data
	wire          sdram_s1_agent_rf_source_ready;                                                                            // SDRAM_s1_agent_rsp_fifo:in_ready -> SDRAM_s1_agent:rf_source_ready
	wire          sdram_s1_agent_rsp_fifo_out_endofpacket;                                                                   // SDRAM_s1_agent_rsp_fifo:out_endofpacket -> SDRAM_s1_agent:rf_sink_endofpacket
	wire          sdram_s1_agent_rsp_fifo_out_valid;                                                                         // SDRAM_s1_agent_rsp_fifo:out_valid -> SDRAM_s1_agent:rf_sink_valid
	wire          sdram_s1_agent_rsp_fifo_out_startofpacket;                                                                 // SDRAM_s1_agent_rsp_fifo:out_startofpacket -> SDRAM_s1_agent:rf_sink_startofpacket
	wire  [113:0] sdram_s1_agent_rsp_fifo_out_data;                                                                          // SDRAM_s1_agent_rsp_fifo:out_data -> SDRAM_s1_agent:rf_sink_data
	wire          sdram_s1_agent_rsp_fifo_out_ready;                                                                         // SDRAM_s1_agent:rf_sink_ready -> SDRAM_s1_agent_rsp_fifo:out_ready
	wire          sdram_s1_agent_rdata_fifo_src_valid;                                                                       // SDRAM_s1_agent:rdata_fifo_src_valid -> SDRAM_s1_agent_rdata_fifo:in_valid
	wire   [17:0] sdram_s1_agent_rdata_fifo_src_data;                                                                        // SDRAM_s1_agent:rdata_fifo_src_data -> SDRAM_s1_agent_rdata_fifo:in_data
	wire          sdram_s1_agent_rdata_fifo_src_ready;                                                                       // SDRAM_s1_agent_rdata_fifo:in_ready -> SDRAM_s1_agent:rdata_fifo_src_ready
	wire          sdram_s1_agent_rdata_fifo_out_valid;                                                                       // SDRAM_s1_agent_rdata_fifo:out_valid -> SDRAM_s1_agent:rdata_fifo_sink_valid
	wire   [17:0] sdram_s1_agent_rdata_fifo_out_data;                                                                        // SDRAM_s1_agent_rdata_fifo:out_data -> SDRAM_s1_agent:rdata_fifo_sink_data
	wire          sdram_s1_agent_rdata_fifo_out_ready;                                                                       // SDRAM_s1_agent:rdata_fifo_sink_ready -> SDRAM_s1_agent_rdata_fifo:out_ready
	wire          vga_subsystem_pixel_dma_control_slave_agent_m0_waitrequest;                                                // VGA_Subsystem_pixel_dma_control_slave_translator:uav_waitrequest -> VGA_Subsystem_pixel_dma_control_slave_agent:m0_waitrequest
	wire    [2:0] vga_subsystem_pixel_dma_control_slave_agent_m0_burstcount;                                                 // VGA_Subsystem_pixel_dma_control_slave_agent:m0_burstcount -> VGA_Subsystem_pixel_dma_control_slave_translator:uav_burstcount
	wire   [31:0] vga_subsystem_pixel_dma_control_slave_agent_m0_writedata;                                                  // VGA_Subsystem_pixel_dma_control_slave_agent:m0_writedata -> VGA_Subsystem_pixel_dma_control_slave_translator:uav_writedata
	wire   [31:0] vga_subsystem_pixel_dma_control_slave_agent_m0_address;                                                    // VGA_Subsystem_pixel_dma_control_slave_agent:m0_address -> VGA_Subsystem_pixel_dma_control_slave_translator:uav_address
	wire          vga_subsystem_pixel_dma_control_slave_agent_m0_write;                                                      // VGA_Subsystem_pixel_dma_control_slave_agent:m0_write -> VGA_Subsystem_pixel_dma_control_slave_translator:uav_write
	wire          vga_subsystem_pixel_dma_control_slave_agent_m0_lock;                                                       // VGA_Subsystem_pixel_dma_control_slave_agent:m0_lock -> VGA_Subsystem_pixel_dma_control_slave_translator:uav_lock
	wire          vga_subsystem_pixel_dma_control_slave_agent_m0_read;                                                       // VGA_Subsystem_pixel_dma_control_slave_agent:m0_read -> VGA_Subsystem_pixel_dma_control_slave_translator:uav_read
	wire   [31:0] vga_subsystem_pixel_dma_control_slave_agent_m0_readdata;                                                   // VGA_Subsystem_pixel_dma_control_slave_translator:uav_readdata -> VGA_Subsystem_pixel_dma_control_slave_agent:m0_readdata
	wire          vga_subsystem_pixel_dma_control_slave_agent_m0_readdatavalid;                                              // VGA_Subsystem_pixel_dma_control_slave_translator:uav_readdatavalid -> VGA_Subsystem_pixel_dma_control_slave_agent:m0_readdatavalid
	wire          vga_subsystem_pixel_dma_control_slave_agent_m0_debugaccess;                                                // VGA_Subsystem_pixel_dma_control_slave_agent:m0_debugaccess -> VGA_Subsystem_pixel_dma_control_slave_translator:uav_debugaccess
	wire    [3:0] vga_subsystem_pixel_dma_control_slave_agent_m0_byteenable;                                                 // VGA_Subsystem_pixel_dma_control_slave_agent:m0_byteenable -> VGA_Subsystem_pixel_dma_control_slave_translator:uav_byteenable
	wire          vga_subsystem_pixel_dma_control_slave_agent_rf_source_endofpacket;                                         // VGA_Subsystem_pixel_dma_control_slave_agent:rf_source_endofpacket -> VGA_Subsystem_pixel_dma_control_slave_agent_rsp_fifo:in_endofpacket
	wire          vga_subsystem_pixel_dma_control_slave_agent_rf_source_valid;                                               // VGA_Subsystem_pixel_dma_control_slave_agent:rf_source_valid -> VGA_Subsystem_pixel_dma_control_slave_agent_rsp_fifo:in_valid
	wire          vga_subsystem_pixel_dma_control_slave_agent_rf_source_startofpacket;                                       // VGA_Subsystem_pixel_dma_control_slave_agent:rf_source_startofpacket -> VGA_Subsystem_pixel_dma_control_slave_agent_rsp_fifo:in_startofpacket
	wire  [131:0] vga_subsystem_pixel_dma_control_slave_agent_rf_source_data;                                                // VGA_Subsystem_pixel_dma_control_slave_agent:rf_source_data -> VGA_Subsystem_pixel_dma_control_slave_agent_rsp_fifo:in_data
	wire          vga_subsystem_pixel_dma_control_slave_agent_rf_source_ready;                                               // VGA_Subsystem_pixel_dma_control_slave_agent_rsp_fifo:in_ready -> VGA_Subsystem_pixel_dma_control_slave_agent:rf_source_ready
	wire          vga_subsystem_pixel_dma_control_slave_agent_rsp_fifo_out_endofpacket;                                      // VGA_Subsystem_pixel_dma_control_slave_agent_rsp_fifo:out_endofpacket -> VGA_Subsystem_pixel_dma_control_slave_agent:rf_sink_endofpacket
	wire          vga_subsystem_pixel_dma_control_slave_agent_rsp_fifo_out_valid;                                            // VGA_Subsystem_pixel_dma_control_slave_agent_rsp_fifo:out_valid -> VGA_Subsystem_pixel_dma_control_slave_agent:rf_sink_valid
	wire          vga_subsystem_pixel_dma_control_slave_agent_rsp_fifo_out_startofpacket;                                    // VGA_Subsystem_pixel_dma_control_slave_agent_rsp_fifo:out_startofpacket -> VGA_Subsystem_pixel_dma_control_slave_agent:rf_sink_startofpacket
	wire  [131:0] vga_subsystem_pixel_dma_control_slave_agent_rsp_fifo_out_data;                                             // VGA_Subsystem_pixel_dma_control_slave_agent_rsp_fifo:out_data -> VGA_Subsystem_pixel_dma_control_slave_agent:rf_sink_data
	wire          vga_subsystem_pixel_dma_control_slave_agent_rsp_fifo_out_ready;                                            // VGA_Subsystem_pixel_dma_control_slave_agent:rf_sink_ready -> VGA_Subsystem_pixel_dma_control_slave_agent_rsp_fifo:out_ready
	wire          vga_subsystem_pixel_dma_control_slave_agent_rdata_fifo_src_valid;                                          // VGA_Subsystem_pixel_dma_control_slave_agent:rdata_fifo_src_valid -> VGA_Subsystem_pixel_dma_control_slave_agent_rdata_fifo:in_valid
	wire   [33:0] vga_subsystem_pixel_dma_control_slave_agent_rdata_fifo_src_data;                                           // VGA_Subsystem_pixel_dma_control_slave_agent:rdata_fifo_src_data -> VGA_Subsystem_pixel_dma_control_slave_agent_rdata_fifo:in_data
	wire          vga_subsystem_pixel_dma_control_slave_agent_rdata_fifo_src_ready;                                          // VGA_Subsystem_pixel_dma_control_slave_agent_rdata_fifo:in_ready -> VGA_Subsystem_pixel_dma_control_slave_agent:rdata_fifo_src_ready
	wire          vga_subsystem_pixel_dma_control_slave_agent_rdata_fifo_out_valid;                                          // VGA_Subsystem_pixel_dma_control_slave_agent_rdata_fifo:out_valid -> VGA_Subsystem_pixel_dma_control_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] vga_subsystem_pixel_dma_control_slave_agent_rdata_fifo_out_data;                                           // VGA_Subsystem_pixel_dma_control_slave_agent_rdata_fifo:out_data -> VGA_Subsystem_pixel_dma_control_slave_agent:rdata_fifo_sink_data
	wire          vga_subsystem_pixel_dma_control_slave_agent_rdata_fifo_out_ready;                                          // VGA_Subsystem_pixel_dma_control_slave_agent:rdata_fifo_sink_ready -> VGA_Subsystem_pixel_dma_control_slave_agent_rdata_fifo:out_ready
	wire          jtag_uart_avalon_jtag_slave_agent_m0_waitrequest;                                                          // JTAG_UART_avalon_jtag_slave_translator:uav_waitrequest -> JTAG_UART_avalon_jtag_slave_agent:m0_waitrequest
	wire    [2:0] jtag_uart_avalon_jtag_slave_agent_m0_burstcount;                                                           // JTAG_UART_avalon_jtag_slave_agent:m0_burstcount -> JTAG_UART_avalon_jtag_slave_translator:uav_burstcount
	wire   [31:0] jtag_uart_avalon_jtag_slave_agent_m0_writedata;                                                            // JTAG_UART_avalon_jtag_slave_agent:m0_writedata -> JTAG_UART_avalon_jtag_slave_translator:uav_writedata
	wire   [31:0] jtag_uart_avalon_jtag_slave_agent_m0_address;                                                              // JTAG_UART_avalon_jtag_slave_agent:m0_address -> JTAG_UART_avalon_jtag_slave_translator:uav_address
	wire          jtag_uart_avalon_jtag_slave_agent_m0_write;                                                                // JTAG_UART_avalon_jtag_slave_agent:m0_write -> JTAG_UART_avalon_jtag_slave_translator:uav_write
	wire          jtag_uart_avalon_jtag_slave_agent_m0_lock;                                                                 // JTAG_UART_avalon_jtag_slave_agent:m0_lock -> JTAG_UART_avalon_jtag_slave_translator:uav_lock
	wire          jtag_uart_avalon_jtag_slave_agent_m0_read;                                                                 // JTAG_UART_avalon_jtag_slave_agent:m0_read -> JTAG_UART_avalon_jtag_slave_translator:uav_read
	wire   [31:0] jtag_uart_avalon_jtag_slave_agent_m0_readdata;                                                             // JTAG_UART_avalon_jtag_slave_translator:uav_readdata -> JTAG_UART_avalon_jtag_slave_agent:m0_readdata
	wire          jtag_uart_avalon_jtag_slave_agent_m0_readdatavalid;                                                        // JTAG_UART_avalon_jtag_slave_translator:uav_readdatavalid -> JTAG_UART_avalon_jtag_slave_agent:m0_readdatavalid
	wire          jtag_uart_avalon_jtag_slave_agent_m0_debugaccess;                                                          // JTAG_UART_avalon_jtag_slave_agent:m0_debugaccess -> JTAG_UART_avalon_jtag_slave_translator:uav_debugaccess
	wire    [3:0] jtag_uart_avalon_jtag_slave_agent_m0_byteenable;                                                           // JTAG_UART_avalon_jtag_slave_agent:m0_byteenable -> JTAG_UART_avalon_jtag_slave_translator:uav_byteenable
	wire          jtag_uart_avalon_jtag_slave_agent_rf_source_endofpacket;                                                   // JTAG_UART_avalon_jtag_slave_agent:rf_source_endofpacket -> JTAG_UART_avalon_jtag_slave_agent_rsp_fifo:in_endofpacket
	wire          jtag_uart_avalon_jtag_slave_agent_rf_source_valid;                                                         // JTAG_UART_avalon_jtag_slave_agent:rf_source_valid -> JTAG_UART_avalon_jtag_slave_agent_rsp_fifo:in_valid
	wire          jtag_uart_avalon_jtag_slave_agent_rf_source_startofpacket;                                                 // JTAG_UART_avalon_jtag_slave_agent:rf_source_startofpacket -> JTAG_UART_avalon_jtag_slave_agent_rsp_fifo:in_startofpacket
	wire  [131:0] jtag_uart_avalon_jtag_slave_agent_rf_source_data;                                                          // JTAG_UART_avalon_jtag_slave_agent:rf_source_data -> JTAG_UART_avalon_jtag_slave_agent_rsp_fifo:in_data
	wire          jtag_uart_avalon_jtag_slave_agent_rf_source_ready;                                                         // JTAG_UART_avalon_jtag_slave_agent_rsp_fifo:in_ready -> JTAG_UART_avalon_jtag_slave_agent:rf_source_ready
	wire          jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_endofpacket;                                                // JTAG_UART_avalon_jtag_slave_agent_rsp_fifo:out_endofpacket -> JTAG_UART_avalon_jtag_slave_agent:rf_sink_endofpacket
	wire          jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_valid;                                                      // JTAG_UART_avalon_jtag_slave_agent_rsp_fifo:out_valid -> JTAG_UART_avalon_jtag_slave_agent:rf_sink_valid
	wire          jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_startofpacket;                                              // JTAG_UART_avalon_jtag_slave_agent_rsp_fifo:out_startofpacket -> JTAG_UART_avalon_jtag_slave_agent:rf_sink_startofpacket
	wire  [131:0] jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_data;                                                       // JTAG_UART_avalon_jtag_slave_agent_rsp_fifo:out_data -> JTAG_UART_avalon_jtag_slave_agent:rf_sink_data
	wire          jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_ready;                                                      // JTAG_UART_avalon_jtag_slave_agent:rf_sink_ready -> JTAG_UART_avalon_jtag_slave_agent_rsp_fifo:out_ready
	wire          jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_valid;                                                    // JTAG_UART_avalon_jtag_slave_agent:rdata_fifo_src_valid -> JTAG_UART_avalon_jtag_slave_agent_rdata_fifo:in_valid
	wire   [33:0] jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_data;                                                     // JTAG_UART_avalon_jtag_slave_agent:rdata_fifo_src_data -> JTAG_UART_avalon_jtag_slave_agent_rdata_fifo:in_data
	wire          jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_ready;                                                    // JTAG_UART_avalon_jtag_slave_agent_rdata_fifo:in_ready -> JTAG_UART_avalon_jtag_slave_agent:rdata_fifo_src_ready
	wire          jtag_uart_avalon_jtag_slave_agent_rdata_fifo_out_valid;                                                    // JTAG_UART_avalon_jtag_slave_agent_rdata_fifo:out_valid -> JTAG_UART_avalon_jtag_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] jtag_uart_avalon_jtag_slave_agent_rdata_fifo_out_data;                                                     // JTAG_UART_avalon_jtag_slave_agent_rdata_fifo:out_data -> JTAG_UART_avalon_jtag_slave_agent:rdata_fifo_sink_data
	wire          jtag_uart_avalon_jtag_slave_agent_rdata_fifo_out_ready;                                                    // JTAG_UART_avalon_jtag_slave_agent:rdata_fifo_sink_ready -> JTAG_UART_avalon_jtag_slave_agent_rdata_fifo:out_ready
	wire          interval_timer_s1_agent_m0_waitrequest;                                                                    // Interval_Timer_s1_translator:uav_waitrequest -> Interval_Timer_s1_agent:m0_waitrequest
	wire    [2:0] interval_timer_s1_agent_m0_burstcount;                                                                     // Interval_Timer_s1_agent:m0_burstcount -> Interval_Timer_s1_translator:uav_burstcount
	wire   [31:0] interval_timer_s1_agent_m0_writedata;                                                                      // Interval_Timer_s1_agent:m0_writedata -> Interval_Timer_s1_translator:uav_writedata
	wire   [31:0] interval_timer_s1_agent_m0_address;                                                                        // Interval_Timer_s1_agent:m0_address -> Interval_Timer_s1_translator:uav_address
	wire          interval_timer_s1_agent_m0_write;                                                                          // Interval_Timer_s1_agent:m0_write -> Interval_Timer_s1_translator:uav_write
	wire          interval_timer_s1_agent_m0_lock;                                                                           // Interval_Timer_s1_agent:m0_lock -> Interval_Timer_s1_translator:uav_lock
	wire          interval_timer_s1_agent_m0_read;                                                                           // Interval_Timer_s1_agent:m0_read -> Interval_Timer_s1_translator:uav_read
	wire   [31:0] interval_timer_s1_agent_m0_readdata;                                                                       // Interval_Timer_s1_translator:uav_readdata -> Interval_Timer_s1_agent:m0_readdata
	wire          interval_timer_s1_agent_m0_readdatavalid;                                                                  // Interval_Timer_s1_translator:uav_readdatavalid -> Interval_Timer_s1_agent:m0_readdatavalid
	wire          interval_timer_s1_agent_m0_debugaccess;                                                                    // Interval_Timer_s1_agent:m0_debugaccess -> Interval_Timer_s1_translator:uav_debugaccess
	wire    [3:0] interval_timer_s1_agent_m0_byteenable;                                                                     // Interval_Timer_s1_agent:m0_byteenable -> Interval_Timer_s1_translator:uav_byteenable
	wire          interval_timer_s1_agent_rf_source_endofpacket;                                                             // Interval_Timer_s1_agent:rf_source_endofpacket -> Interval_Timer_s1_agent_rsp_fifo:in_endofpacket
	wire          interval_timer_s1_agent_rf_source_valid;                                                                   // Interval_Timer_s1_agent:rf_source_valid -> Interval_Timer_s1_agent_rsp_fifo:in_valid
	wire          interval_timer_s1_agent_rf_source_startofpacket;                                                           // Interval_Timer_s1_agent:rf_source_startofpacket -> Interval_Timer_s1_agent_rsp_fifo:in_startofpacket
	wire  [131:0] interval_timer_s1_agent_rf_source_data;                                                                    // Interval_Timer_s1_agent:rf_source_data -> Interval_Timer_s1_agent_rsp_fifo:in_data
	wire          interval_timer_s1_agent_rf_source_ready;                                                                   // Interval_Timer_s1_agent_rsp_fifo:in_ready -> Interval_Timer_s1_agent:rf_source_ready
	wire          interval_timer_s1_agent_rsp_fifo_out_endofpacket;                                                          // Interval_Timer_s1_agent_rsp_fifo:out_endofpacket -> Interval_Timer_s1_agent:rf_sink_endofpacket
	wire          interval_timer_s1_agent_rsp_fifo_out_valid;                                                                // Interval_Timer_s1_agent_rsp_fifo:out_valid -> Interval_Timer_s1_agent:rf_sink_valid
	wire          interval_timer_s1_agent_rsp_fifo_out_startofpacket;                                                        // Interval_Timer_s1_agent_rsp_fifo:out_startofpacket -> Interval_Timer_s1_agent:rf_sink_startofpacket
	wire  [131:0] interval_timer_s1_agent_rsp_fifo_out_data;                                                                 // Interval_Timer_s1_agent_rsp_fifo:out_data -> Interval_Timer_s1_agent:rf_sink_data
	wire          interval_timer_s1_agent_rsp_fifo_out_ready;                                                                // Interval_Timer_s1_agent:rf_sink_ready -> Interval_Timer_s1_agent_rsp_fifo:out_ready
	wire          interval_timer_s1_agent_rdata_fifo_src_valid;                                                              // Interval_Timer_s1_agent:rdata_fifo_src_valid -> Interval_Timer_s1_agent_rdata_fifo:in_valid
	wire   [33:0] interval_timer_s1_agent_rdata_fifo_src_data;                                                               // Interval_Timer_s1_agent:rdata_fifo_src_data -> Interval_Timer_s1_agent_rdata_fifo:in_data
	wire          interval_timer_s1_agent_rdata_fifo_src_ready;                                                              // Interval_Timer_s1_agent_rdata_fifo:in_ready -> Interval_Timer_s1_agent:rdata_fifo_src_ready
	wire          interval_timer_s1_agent_rdata_fifo_out_valid;                                                              // Interval_Timer_s1_agent_rdata_fifo:out_valid -> Interval_Timer_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] interval_timer_s1_agent_rdata_fifo_out_data;                                                               // Interval_Timer_s1_agent_rdata_fifo:out_data -> Interval_Timer_s1_agent:rdata_fifo_sink_data
	wire          interval_timer_s1_agent_rdata_fifo_out_ready;                                                              // Interval_Timer_s1_agent:rdata_fifo_sink_ready -> Interval_Timer_s1_agent_rdata_fifo:out_ready
	wire          leds_s1_agent_m0_waitrequest;                                                                              // LEDs_s1_translator:uav_waitrequest -> LEDs_s1_agent:m0_waitrequest
	wire    [2:0] leds_s1_agent_m0_burstcount;                                                                               // LEDs_s1_agent:m0_burstcount -> LEDs_s1_translator:uav_burstcount
	wire   [31:0] leds_s1_agent_m0_writedata;                                                                                // LEDs_s1_agent:m0_writedata -> LEDs_s1_translator:uav_writedata
	wire   [31:0] leds_s1_agent_m0_address;                                                                                  // LEDs_s1_agent:m0_address -> LEDs_s1_translator:uav_address
	wire          leds_s1_agent_m0_write;                                                                                    // LEDs_s1_agent:m0_write -> LEDs_s1_translator:uav_write
	wire          leds_s1_agent_m0_lock;                                                                                     // LEDs_s1_agent:m0_lock -> LEDs_s1_translator:uav_lock
	wire          leds_s1_agent_m0_read;                                                                                     // LEDs_s1_agent:m0_read -> LEDs_s1_translator:uav_read
	wire   [31:0] leds_s1_agent_m0_readdata;                                                                                 // LEDs_s1_translator:uav_readdata -> LEDs_s1_agent:m0_readdata
	wire          leds_s1_agent_m0_readdatavalid;                                                                            // LEDs_s1_translator:uav_readdatavalid -> LEDs_s1_agent:m0_readdatavalid
	wire          leds_s1_agent_m0_debugaccess;                                                                              // LEDs_s1_agent:m0_debugaccess -> LEDs_s1_translator:uav_debugaccess
	wire    [3:0] leds_s1_agent_m0_byteenable;                                                                               // LEDs_s1_agent:m0_byteenable -> LEDs_s1_translator:uav_byteenable
	wire          leds_s1_agent_rf_source_endofpacket;                                                                       // LEDs_s1_agent:rf_source_endofpacket -> LEDs_s1_agent_rsp_fifo:in_endofpacket
	wire          leds_s1_agent_rf_source_valid;                                                                             // LEDs_s1_agent:rf_source_valid -> LEDs_s1_agent_rsp_fifo:in_valid
	wire          leds_s1_agent_rf_source_startofpacket;                                                                     // LEDs_s1_agent:rf_source_startofpacket -> LEDs_s1_agent_rsp_fifo:in_startofpacket
	wire  [131:0] leds_s1_agent_rf_source_data;                                                                              // LEDs_s1_agent:rf_source_data -> LEDs_s1_agent_rsp_fifo:in_data
	wire          leds_s1_agent_rf_source_ready;                                                                             // LEDs_s1_agent_rsp_fifo:in_ready -> LEDs_s1_agent:rf_source_ready
	wire          leds_s1_agent_rsp_fifo_out_endofpacket;                                                                    // LEDs_s1_agent_rsp_fifo:out_endofpacket -> LEDs_s1_agent:rf_sink_endofpacket
	wire          leds_s1_agent_rsp_fifo_out_valid;                                                                          // LEDs_s1_agent_rsp_fifo:out_valid -> LEDs_s1_agent:rf_sink_valid
	wire          leds_s1_agent_rsp_fifo_out_startofpacket;                                                                  // LEDs_s1_agent_rsp_fifo:out_startofpacket -> LEDs_s1_agent:rf_sink_startofpacket
	wire  [131:0] leds_s1_agent_rsp_fifo_out_data;                                                                           // LEDs_s1_agent_rsp_fifo:out_data -> LEDs_s1_agent:rf_sink_data
	wire          leds_s1_agent_rsp_fifo_out_ready;                                                                          // LEDs_s1_agent:rf_sink_ready -> LEDs_s1_agent_rsp_fifo:out_ready
	wire          leds_s1_agent_rdata_fifo_src_valid;                                                                        // LEDs_s1_agent:rdata_fifo_src_valid -> LEDs_s1_agent_rdata_fifo:in_valid
	wire   [33:0] leds_s1_agent_rdata_fifo_src_data;                                                                         // LEDs_s1_agent:rdata_fifo_src_data -> LEDs_s1_agent_rdata_fifo:in_data
	wire          leds_s1_agent_rdata_fifo_src_ready;                                                                        // LEDs_s1_agent_rdata_fifo:in_ready -> LEDs_s1_agent:rdata_fifo_src_ready
	wire          leds_s1_agent_rdata_fifo_out_valid;                                                                        // LEDs_s1_agent_rdata_fifo:out_valid -> LEDs_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] leds_s1_agent_rdata_fifo_out_data;                                                                         // LEDs_s1_agent_rdata_fifo:out_data -> LEDs_s1_agent:rdata_fifo_sink_data
	wire          leds_s1_agent_rdata_fifo_out_ready;                                                                        // LEDs_s1_agent:rdata_fifo_sink_ready -> LEDs_s1_agent_rdata_fifo:out_ready
	wire          slider_switches_s1_agent_m0_waitrequest;                                                                   // Slider_Switches_s1_translator:uav_waitrequest -> Slider_Switches_s1_agent:m0_waitrequest
	wire    [2:0] slider_switches_s1_agent_m0_burstcount;                                                                    // Slider_Switches_s1_agent:m0_burstcount -> Slider_Switches_s1_translator:uav_burstcount
	wire   [31:0] slider_switches_s1_agent_m0_writedata;                                                                     // Slider_Switches_s1_agent:m0_writedata -> Slider_Switches_s1_translator:uav_writedata
	wire   [31:0] slider_switches_s1_agent_m0_address;                                                                       // Slider_Switches_s1_agent:m0_address -> Slider_Switches_s1_translator:uav_address
	wire          slider_switches_s1_agent_m0_write;                                                                         // Slider_Switches_s1_agent:m0_write -> Slider_Switches_s1_translator:uav_write
	wire          slider_switches_s1_agent_m0_lock;                                                                          // Slider_Switches_s1_agent:m0_lock -> Slider_Switches_s1_translator:uav_lock
	wire          slider_switches_s1_agent_m0_read;                                                                          // Slider_Switches_s1_agent:m0_read -> Slider_Switches_s1_translator:uav_read
	wire   [31:0] slider_switches_s1_agent_m0_readdata;                                                                      // Slider_Switches_s1_translator:uav_readdata -> Slider_Switches_s1_agent:m0_readdata
	wire          slider_switches_s1_agent_m0_readdatavalid;                                                                 // Slider_Switches_s1_translator:uav_readdatavalid -> Slider_Switches_s1_agent:m0_readdatavalid
	wire          slider_switches_s1_agent_m0_debugaccess;                                                                   // Slider_Switches_s1_agent:m0_debugaccess -> Slider_Switches_s1_translator:uav_debugaccess
	wire    [3:0] slider_switches_s1_agent_m0_byteenable;                                                                    // Slider_Switches_s1_agent:m0_byteenable -> Slider_Switches_s1_translator:uav_byteenable
	wire          slider_switches_s1_agent_rf_source_endofpacket;                                                            // Slider_Switches_s1_agent:rf_source_endofpacket -> Slider_Switches_s1_agent_rsp_fifo:in_endofpacket
	wire          slider_switches_s1_agent_rf_source_valid;                                                                  // Slider_Switches_s1_agent:rf_source_valid -> Slider_Switches_s1_agent_rsp_fifo:in_valid
	wire          slider_switches_s1_agent_rf_source_startofpacket;                                                          // Slider_Switches_s1_agent:rf_source_startofpacket -> Slider_Switches_s1_agent_rsp_fifo:in_startofpacket
	wire  [131:0] slider_switches_s1_agent_rf_source_data;                                                                   // Slider_Switches_s1_agent:rf_source_data -> Slider_Switches_s1_agent_rsp_fifo:in_data
	wire          slider_switches_s1_agent_rf_source_ready;                                                                  // Slider_Switches_s1_agent_rsp_fifo:in_ready -> Slider_Switches_s1_agent:rf_source_ready
	wire          slider_switches_s1_agent_rsp_fifo_out_endofpacket;                                                         // Slider_Switches_s1_agent_rsp_fifo:out_endofpacket -> Slider_Switches_s1_agent:rf_sink_endofpacket
	wire          slider_switches_s1_agent_rsp_fifo_out_valid;                                                               // Slider_Switches_s1_agent_rsp_fifo:out_valid -> Slider_Switches_s1_agent:rf_sink_valid
	wire          slider_switches_s1_agent_rsp_fifo_out_startofpacket;                                                       // Slider_Switches_s1_agent_rsp_fifo:out_startofpacket -> Slider_Switches_s1_agent:rf_sink_startofpacket
	wire  [131:0] slider_switches_s1_agent_rsp_fifo_out_data;                                                                // Slider_Switches_s1_agent_rsp_fifo:out_data -> Slider_Switches_s1_agent:rf_sink_data
	wire          slider_switches_s1_agent_rsp_fifo_out_ready;                                                               // Slider_Switches_s1_agent:rf_sink_ready -> Slider_Switches_s1_agent_rsp_fifo:out_ready
	wire          slider_switches_s1_agent_rdata_fifo_src_valid;                                                             // Slider_Switches_s1_agent:rdata_fifo_src_valid -> Slider_Switches_s1_agent_rdata_fifo:in_valid
	wire   [33:0] slider_switches_s1_agent_rdata_fifo_src_data;                                                              // Slider_Switches_s1_agent:rdata_fifo_src_data -> Slider_Switches_s1_agent_rdata_fifo:in_data
	wire          slider_switches_s1_agent_rdata_fifo_src_ready;                                                             // Slider_Switches_s1_agent_rdata_fifo:in_ready -> Slider_Switches_s1_agent:rdata_fifo_src_ready
	wire          slider_switches_s1_agent_rdata_fifo_out_valid;                                                             // Slider_Switches_s1_agent_rdata_fifo:out_valid -> Slider_Switches_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] slider_switches_s1_agent_rdata_fifo_out_data;                                                              // Slider_Switches_s1_agent_rdata_fifo:out_data -> Slider_Switches_s1_agent:rdata_fifo_sink_data
	wire          slider_switches_s1_agent_rdata_fifo_out_ready;                                                             // Slider_Switches_s1_agent:rdata_fifo_sink_ready -> Slider_Switches_s1_agent_rdata_fifo:out_ready
	wire          arm_a9_hps_h2f_axi_master_agent_write_cp_endofpacket;                                                      // Arm_A9_HPS_h2f_axi_master_agent:write_cp_endofpacket -> router:sink_endofpacket
	wire          arm_a9_hps_h2f_axi_master_agent_write_cp_valid;                                                            // Arm_A9_HPS_h2f_axi_master_agent:write_cp_valid -> router:sink_valid
	wire          arm_a9_hps_h2f_axi_master_agent_write_cp_startofpacket;                                                    // Arm_A9_HPS_h2f_axi_master_agent:write_cp_startofpacket -> router:sink_startofpacket
	wire  [238:0] arm_a9_hps_h2f_axi_master_agent_write_cp_data;                                                             // Arm_A9_HPS_h2f_axi_master_agent:write_cp_data -> router:sink_data
	wire          arm_a9_hps_h2f_axi_master_agent_write_cp_ready;                                                            // router:sink_ready -> Arm_A9_HPS_h2f_axi_master_agent:write_cp_ready
	wire          arm_a9_hps_h2f_axi_master_agent_read_cp_endofpacket;                                                       // Arm_A9_HPS_h2f_axi_master_agent:read_cp_endofpacket -> router_001:sink_endofpacket
	wire          arm_a9_hps_h2f_axi_master_agent_read_cp_valid;                                                             // Arm_A9_HPS_h2f_axi_master_agent:read_cp_valid -> router_001:sink_valid
	wire          arm_a9_hps_h2f_axi_master_agent_read_cp_startofpacket;                                                     // Arm_A9_HPS_h2f_axi_master_agent:read_cp_startofpacket -> router_001:sink_startofpacket
	wire  [238:0] arm_a9_hps_h2f_axi_master_agent_read_cp_data;                                                              // Arm_A9_HPS_h2f_axi_master_agent:read_cp_data -> router_001:sink_data
	wire          arm_a9_hps_h2f_axi_master_agent_read_cp_ready;                                                             // router_001:sink_ready -> Arm_A9_HPS_h2f_axi_master_agent:read_cp_ready
	wire          jtag_to_fpga_bridge_master_agent_cp_endofpacket;                                                           // JTAG_to_FPGA_Bridge_master_agent:cp_endofpacket -> router_002:sink_endofpacket
	wire          jtag_to_fpga_bridge_master_agent_cp_valid;                                                                 // JTAG_to_FPGA_Bridge_master_agent:cp_valid -> router_002:sink_valid
	wire          jtag_to_fpga_bridge_master_agent_cp_startofpacket;                                                         // JTAG_to_FPGA_Bridge_master_agent:cp_startofpacket -> router_002:sink_startofpacket
	wire  [130:0] jtag_to_fpga_bridge_master_agent_cp_data;                                                                  // JTAG_to_FPGA_Bridge_master_agent:cp_data -> router_002:sink_data
	wire          jtag_to_fpga_bridge_master_agent_cp_ready;                                                                 // router_002:sink_ready -> JTAG_to_FPGA_Bridge_master_agent:cp_ready
	wire          arm_a9_hps_h2f_lw_axi_master_agent_write_cp_endofpacket;                                                   // Arm_A9_HPS_h2f_lw_axi_master_agent:write_cp_endofpacket -> router_003:sink_endofpacket
	wire          arm_a9_hps_h2f_lw_axi_master_agent_write_cp_valid;                                                         // Arm_A9_HPS_h2f_lw_axi_master_agent:write_cp_valid -> router_003:sink_valid
	wire          arm_a9_hps_h2f_lw_axi_master_agent_write_cp_startofpacket;                                                 // Arm_A9_HPS_h2f_lw_axi_master_agent:write_cp_startofpacket -> router_003:sink_startofpacket
	wire  [130:0] arm_a9_hps_h2f_lw_axi_master_agent_write_cp_data;                                                          // Arm_A9_HPS_h2f_lw_axi_master_agent:write_cp_data -> router_003:sink_data
	wire          arm_a9_hps_h2f_lw_axi_master_agent_write_cp_ready;                                                         // router_003:sink_ready -> Arm_A9_HPS_h2f_lw_axi_master_agent:write_cp_ready
	wire          arm_a9_hps_h2f_lw_axi_master_agent_read_cp_endofpacket;                                                    // Arm_A9_HPS_h2f_lw_axi_master_agent:read_cp_endofpacket -> router_004:sink_endofpacket
	wire          arm_a9_hps_h2f_lw_axi_master_agent_read_cp_valid;                                                          // Arm_A9_HPS_h2f_lw_axi_master_agent:read_cp_valid -> router_004:sink_valid
	wire          arm_a9_hps_h2f_lw_axi_master_agent_read_cp_startofpacket;                                                  // Arm_A9_HPS_h2f_lw_axi_master_agent:read_cp_startofpacket -> router_004:sink_startofpacket
	wire  [130:0] arm_a9_hps_h2f_lw_axi_master_agent_read_cp_data;                                                           // Arm_A9_HPS_h2f_lw_axi_master_agent:read_cp_data -> router_004:sink_data
	wire          arm_a9_hps_h2f_lw_axi_master_agent_read_cp_ready;                                                          // router_004:sink_ready -> Arm_A9_HPS_h2f_lw_axi_master_agent:read_cp_ready
	wire          vga_subsystem_pixel_dma_master_agent_cp_endofpacket;                                                       // VGA_Subsystem_pixel_dma_master_agent:cp_endofpacket -> router_005:sink_endofpacket
	wire          vga_subsystem_pixel_dma_master_agent_cp_valid;                                                             // VGA_Subsystem_pixel_dma_master_agent:cp_valid -> router_005:sink_valid
	wire          vga_subsystem_pixel_dma_master_agent_cp_startofpacket;                                                     // VGA_Subsystem_pixel_dma_master_agent:cp_startofpacket -> router_005:sink_startofpacket
	wire  [112:0] vga_subsystem_pixel_dma_master_agent_cp_data;                                                              // VGA_Subsystem_pixel_dma_master_agent:cp_data -> router_005:sink_data
	wire          vga_subsystem_pixel_dma_master_agent_cp_ready;                                                             // router_005:sink_ready -> VGA_Subsystem_pixel_dma_master_agent:cp_ready
	wire          router_005_src_endofpacket;                                                                                // router_005:src_endofpacket -> cmd_demux_005:sink_endofpacket
	wire          router_005_src_valid;                                                                                      // router_005:src_valid -> cmd_demux_005:sink_valid
	wire          router_005_src_startofpacket;                                                                              // router_005:src_startofpacket -> cmd_demux_005:sink_startofpacket
	wire  [112:0] router_005_src_data;                                                                                       // router_005:src_data -> cmd_demux_005:sink_data
	wire    [5:0] router_005_src_channel;                                                                                    // router_005:src_channel -> cmd_demux_005:sink_channel
	wire          router_005_src_ready;                                                                                      // cmd_demux_005:sink_ready -> router_005:src_ready
	wire          sdram_s1_agent_rp_endofpacket;                                                                             // SDRAM_s1_agent:rp_endofpacket -> router_006:sink_endofpacket
	wire          sdram_s1_agent_rp_valid;                                                                                   // SDRAM_s1_agent:rp_valid -> router_006:sink_valid
	wire          sdram_s1_agent_rp_startofpacket;                                                                           // SDRAM_s1_agent:rp_startofpacket -> router_006:sink_startofpacket
	wire  [112:0] sdram_s1_agent_rp_data;                                                                                    // SDRAM_s1_agent:rp_data -> router_006:sink_data
	wire          sdram_s1_agent_rp_ready;                                                                                   // router_006:sink_ready -> SDRAM_s1_agent:rp_ready
	wire          router_006_src_endofpacket;                                                                                // router_006:src_endofpacket -> rsp_demux:sink_endofpacket
	wire          router_006_src_valid;                                                                                      // router_006:src_valid -> rsp_demux:sink_valid
	wire          router_006_src_startofpacket;                                                                              // router_006:src_startofpacket -> rsp_demux:sink_startofpacket
	wire  [112:0] router_006_src_data;                                                                                       // router_006:src_data -> rsp_demux:sink_data
	wire    [5:0] router_006_src_channel;                                                                                    // router_006:src_channel -> rsp_demux:sink_channel
	wire          router_006_src_ready;                                                                                      // rsp_demux:sink_ready -> router_006:src_ready
	wire          vga_subsystem_pixel_dma_control_slave_agent_rp_endofpacket;                                                // VGA_Subsystem_pixel_dma_control_slave_agent:rp_endofpacket -> router_007:sink_endofpacket
	wire          vga_subsystem_pixel_dma_control_slave_agent_rp_valid;                                                      // VGA_Subsystem_pixel_dma_control_slave_agent:rp_valid -> router_007:sink_valid
	wire          vga_subsystem_pixel_dma_control_slave_agent_rp_startofpacket;                                              // VGA_Subsystem_pixel_dma_control_slave_agent:rp_startofpacket -> router_007:sink_startofpacket
	wire  [130:0] vga_subsystem_pixel_dma_control_slave_agent_rp_data;                                                       // VGA_Subsystem_pixel_dma_control_slave_agent:rp_data -> router_007:sink_data
	wire          vga_subsystem_pixel_dma_control_slave_agent_rp_ready;                                                      // router_007:sink_ready -> VGA_Subsystem_pixel_dma_control_slave_agent:rp_ready
	wire          router_007_src_endofpacket;                                                                                // router_007:src_endofpacket -> rsp_demux_001:sink_endofpacket
	wire          router_007_src_valid;                                                                                      // router_007:src_valid -> rsp_demux_001:sink_valid
	wire          router_007_src_startofpacket;                                                                              // router_007:src_startofpacket -> rsp_demux_001:sink_startofpacket
	wire  [130:0] router_007_src_data;                                                                                       // router_007:src_data -> rsp_demux_001:sink_data
	wire    [5:0] router_007_src_channel;                                                                                    // router_007:src_channel -> rsp_demux_001:sink_channel
	wire          router_007_src_ready;                                                                                      // rsp_demux_001:sink_ready -> router_007:src_ready
	wire          jtag_uart_avalon_jtag_slave_agent_rp_endofpacket;                                                          // JTAG_UART_avalon_jtag_slave_agent:rp_endofpacket -> router_008:sink_endofpacket
	wire          jtag_uart_avalon_jtag_slave_agent_rp_valid;                                                                // JTAG_UART_avalon_jtag_slave_agent:rp_valid -> router_008:sink_valid
	wire          jtag_uart_avalon_jtag_slave_agent_rp_startofpacket;                                                        // JTAG_UART_avalon_jtag_slave_agent:rp_startofpacket -> router_008:sink_startofpacket
	wire  [130:0] jtag_uart_avalon_jtag_slave_agent_rp_data;                                                                 // JTAG_UART_avalon_jtag_slave_agent:rp_data -> router_008:sink_data
	wire          jtag_uart_avalon_jtag_slave_agent_rp_ready;                                                                // router_008:sink_ready -> JTAG_UART_avalon_jtag_slave_agent:rp_ready
	wire          router_008_src_endofpacket;                                                                                // router_008:src_endofpacket -> rsp_demux_002:sink_endofpacket
	wire          router_008_src_valid;                                                                                      // router_008:src_valid -> rsp_demux_002:sink_valid
	wire          router_008_src_startofpacket;                                                                              // router_008:src_startofpacket -> rsp_demux_002:sink_startofpacket
	wire  [130:0] router_008_src_data;                                                                                       // router_008:src_data -> rsp_demux_002:sink_data
	wire    [5:0] router_008_src_channel;                                                                                    // router_008:src_channel -> rsp_demux_002:sink_channel
	wire          router_008_src_ready;                                                                                      // rsp_demux_002:sink_ready -> router_008:src_ready
	wire          interval_timer_s1_agent_rp_endofpacket;                                                                    // Interval_Timer_s1_agent:rp_endofpacket -> router_009:sink_endofpacket
	wire          interval_timer_s1_agent_rp_valid;                                                                          // Interval_Timer_s1_agent:rp_valid -> router_009:sink_valid
	wire          interval_timer_s1_agent_rp_startofpacket;                                                                  // Interval_Timer_s1_agent:rp_startofpacket -> router_009:sink_startofpacket
	wire  [130:0] interval_timer_s1_agent_rp_data;                                                                           // Interval_Timer_s1_agent:rp_data -> router_009:sink_data
	wire          interval_timer_s1_agent_rp_ready;                                                                          // router_009:sink_ready -> Interval_Timer_s1_agent:rp_ready
	wire          router_009_src_endofpacket;                                                                                // router_009:src_endofpacket -> rsp_demux_003:sink_endofpacket
	wire          router_009_src_valid;                                                                                      // router_009:src_valid -> rsp_demux_003:sink_valid
	wire          router_009_src_startofpacket;                                                                              // router_009:src_startofpacket -> rsp_demux_003:sink_startofpacket
	wire  [130:0] router_009_src_data;                                                                                       // router_009:src_data -> rsp_demux_003:sink_data
	wire    [5:0] router_009_src_channel;                                                                                    // router_009:src_channel -> rsp_demux_003:sink_channel
	wire          router_009_src_ready;                                                                                      // rsp_demux_003:sink_ready -> router_009:src_ready
	wire          leds_s1_agent_rp_endofpacket;                                                                              // LEDs_s1_agent:rp_endofpacket -> router_010:sink_endofpacket
	wire          leds_s1_agent_rp_valid;                                                                                    // LEDs_s1_agent:rp_valid -> router_010:sink_valid
	wire          leds_s1_agent_rp_startofpacket;                                                                            // LEDs_s1_agent:rp_startofpacket -> router_010:sink_startofpacket
	wire  [130:0] leds_s1_agent_rp_data;                                                                                     // LEDs_s1_agent:rp_data -> router_010:sink_data
	wire          leds_s1_agent_rp_ready;                                                                                    // router_010:sink_ready -> LEDs_s1_agent:rp_ready
	wire          router_010_src_endofpacket;                                                                                // router_010:src_endofpacket -> rsp_demux_004:sink_endofpacket
	wire          router_010_src_valid;                                                                                      // router_010:src_valid -> rsp_demux_004:sink_valid
	wire          router_010_src_startofpacket;                                                                              // router_010:src_startofpacket -> rsp_demux_004:sink_startofpacket
	wire  [130:0] router_010_src_data;                                                                                       // router_010:src_data -> rsp_demux_004:sink_data
	wire    [5:0] router_010_src_channel;                                                                                    // router_010:src_channel -> rsp_demux_004:sink_channel
	wire          router_010_src_ready;                                                                                      // rsp_demux_004:sink_ready -> router_010:src_ready
	wire          slider_switches_s1_agent_rp_endofpacket;                                                                   // Slider_Switches_s1_agent:rp_endofpacket -> router_011:sink_endofpacket
	wire          slider_switches_s1_agent_rp_valid;                                                                         // Slider_Switches_s1_agent:rp_valid -> router_011:sink_valid
	wire          slider_switches_s1_agent_rp_startofpacket;                                                                 // Slider_Switches_s1_agent:rp_startofpacket -> router_011:sink_startofpacket
	wire  [130:0] slider_switches_s1_agent_rp_data;                                                                          // Slider_Switches_s1_agent:rp_data -> router_011:sink_data
	wire          slider_switches_s1_agent_rp_ready;                                                                         // router_011:sink_ready -> Slider_Switches_s1_agent:rp_ready
	wire          router_011_src_endofpacket;                                                                                // router_011:src_endofpacket -> rsp_demux_005:sink_endofpacket
	wire          router_011_src_valid;                                                                                      // router_011:src_valid -> rsp_demux_005:sink_valid
	wire          router_011_src_startofpacket;                                                                              // router_011:src_startofpacket -> rsp_demux_005:sink_startofpacket
	wire  [130:0] router_011_src_data;                                                                                       // router_011:src_data -> rsp_demux_005:sink_data
	wire    [5:0] router_011_src_channel;                                                                                    // router_011:src_channel -> rsp_demux_005:sink_channel
	wire          router_011_src_ready;                                                                                      // rsp_demux_005:sink_ready -> router_011:src_ready
	wire          router_src_endofpacket;                                                                                    // router:src_endofpacket -> Arm_A9_HPS_h2f_axi_master_wr_limiter:cmd_sink_endofpacket
	wire          router_src_valid;                                                                                          // router:src_valid -> Arm_A9_HPS_h2f_axi_master_wr_limiter:cmd_sink_valid
	wire          router_src_startofpacket;                                                                                  // router:src_startofpacket -> Arm_A9_HPS_h2f_axi_master_wr_limiter:cmd_sink_startofpacket
	wire  [238:0] router_src_data;                                                                                           // router:src_data -> Arm_A9_HPS_h2f_axi_master_wr_limiter:cmd_sink_data
	wire    [5:0] router_src_channel;                                                                                        // router:src_channel -> Arm_A9_HPS_h2f_axi_master_wr_limiter:cmd_sink_channel
	wire          router_src_ready;                                                                                          // Arm_A9_HPS_h2f_axi_master_wr_limiter:cmd_sink_ready -> router:src_ready
	wire          arm_a9_hps_h2f_axi_master_wr_limiter_cmd_src_endofpacket;                                                  // Arm_A9_HPS_h2f_axi_master_wr_limiter:cmd_src_endofpacket -> cmd_demux:sink_endofpacket
	wire          arm_a9_hps_h2f_axi_master_wr_limiter_cmd_src_startofpacket;                                                // Arm_A9_HPS_h2f_axi_master_wr_limiter:cmd_src_startofpacket -> cmd_demux:sink_startofpacket
	wire  [238:0] arm_a9_hps_h2f_axi_master_wr_limiter_cmd_src_data;                                                         // Arm_A9_HPS_h2f_axi_master_wr_limiter:cmd_src_data -> cmd_demux:sink_data
	wire    [5:0] arm_a9_hps_h2f_axi_master_wr_limiter_cmd_src_channel;                                                      // Arm_A9_HPS_h2f_axi_master_wr_limiter:cmd_src_channel -> cmd_demux:sink_channel
	wire          arm_a9_hps_h2f_axi_master_wr_limiter_cmd_src_ready;                                                        // cmd_demux:sink_ready -> Arm_A9_HPS_h2f_axi_master_wr_limiter:cmd_src_ready
	wire          rsp_mux_src_endofpacket;                                                                                   // rsp_mux:src_endofpacket -> Arm_A9_HPS_h2f_axi_master_wr_limiter:rsp_sink_endofpacket
	wire          rsp_mux_src_valid;                                                                                         // rsp_mux:src_valid -> Arm_A9_HPS_h2f_axi_master_wr_limiter:rsp_sink_valid
	wire          rsp_mux_src_startofpacket;                                                                                 // rsp_mux:src_startofpacket -> Arm_A9_HPS_h2f_axi_master_wr_limiter:rsp_sink_startofpacket
	wire  [238:0] rsp_mux_src_data;                                                                                          // rsp_mux:src_data -> Arm_A9_HPS_h2f_axi_master_wr_limiter:rsp_sink_data
	wire    [5:0] rsp_mux_src_channel;                                                                                       // rsp_mux:src_channel -> Arm_A9_HPS_h2f_axi_master_wr_limiter:rsp_sink_channel
	wire          rsp_mux_src_ready;                                                                                         // Arm_A9_HPS_h2f_axi_master_wr_limiter:rsp_sink_ready -> rsp_mux:src_ready
	wire          arm_a9_hps_h2f_axi_master_wr_limiter_rsp_src_endofpacket;                                                  // Arm_A9_HPS_h2f_axi_master_wr_limiter:rsp_src_endofpacket -> Arm_A9_HPS_h2f_axi_master_agent:write_rp_endofpacket
	wire          arm_a9_hps_h2f_axi_master_wr_limiter_rsp_src_valid;                                                        // Arm_A9_HPS_h2f_axi_master_wr_limiter:rsp_src_valid -> Arm_A9_HPS_h2f_axi_master_agent:write_rp_valid
	wire          arm_a9_hps_h2f_axi_master_wr_limiter_rsp_src_startofpacket;                                                // Arm_A9_HPS_h2f_axi_master_wr_limiter:rsp_src_startofpacket -> Arm_A9_HPS_h2f_axi_master_agent:write_rp_startofpacket
	wire  [238:0] arm_a9_hps_h2f_axi_master_wr_limiter_rsp_src_data;                                                         // Arm_A9_HPS_h2f_axi_master_wr_limiter:rsp_src_data -> Arm_A9_HPS_h2f_axi_master_agent:write_rp_data
	wire    [5:0] arm_a9_hps_h2f_axi_master_wr_limiter_rsp_src_channel;                                                      // Arm_A9_HPS_h2f_axi_master_wr_limiter:rsp_src_channel -> Arm_A9_HPS_h2f_axi_master_agent:write_rp_channel
	wire          arm_a9_hps_h2f_axi_master_wr_limiter_rsp_src_ready;                                                        // Arm_A9_HPS_h2f_axi_master_agent:write_rp_ready -> Arm_A9_HPS_h2f_axi_master_wr_limiter:rsp_src_ready
	wire          router_001_src_endofpacket;                                                                                // router_001:src_endofpacket -> Arm_A9_HPS_h2f_axi_master_rd_limiter:cmd_sink_endofpacket
	wire          router_001_src_valid;                                                                                      // router_001:src_valid -> Arm_A9_HPS_h2f_axi_master_rd_limiter:cmd_sink_valid
	wire          router_001_src_startofpacket;                                                                              // router_001:src_startofpacket -> Arm_A9_HPS_h2f_axi_master_rd_limiter:cmd_sink_startofpacket
	wire  [238:0] router_001_src_data;                                                                                       // router_001:src_data -> Arm_A9_HPS_h2f_axi_master_rd_limiter:cmd_sink_data
	wire    [5:0] router_001_src_channel;                                                                                    // router_001:src_channel -> Arm_A9_HPS_h2f_axi_master_rd_limiter:cmd_sink_channel
	wire          router_001_src_ready;                                                                                      // Arm_A9_HPS_h2f_axi_master_rd_limiter:cmd_sink_ready -> router_001:src_ready
	wire          arm_a9_hps_h2f_axi_master_rd_limiter_cmd_src_endofpacket;                                                  // Arm_A9_HPS_h2f_axi_master_rd_limiter:cmd_src_endofpacket -> cmd_demux_001:sink_endofpacket
	wire          arm_a9_hps_h2f_axi_master_rd_limiter_cmd_src_startofpacket;                                                // Arm_A9_HPS_h2f_axi_master_rd_limiter:cmd_src_startofpacket -> cmd_demux_001:sink_startofpacket
	wire  [238:0] arm_a9_hps_h2f_axi_master_rd_limiter_cmd_src_data;                                                         // Arm_A9_HPS_h2f_axi_master_rd_limiter:cmd_src_data -> cmd_demux_001:sink_data
	wire    [5:0] arm_a9_hps_h2f_axi_master_rd_limiter_cmd_src_channel;                                                      // Arm_A9_HPS_h2f_axi_master_rd_limiter:cmd_src_channel -> cmd_demux_001:sink_channel
	wire          arm_a9_hps_h2f_axi_master_rd_limiter_cmd_src_ready;                                                        // cmd_demux_001:sink_ready -> Arm_A9_HPS_h2f_axi_master_rd_limiter:cmd_src_ready
	wire          rsp_mux_001_src_endofpacket;                                                                               // rsp_mux_001:src_endofpacket -> Arm_A9_HPS_h2f_axi_master_rd_limiter:rsp_sink_endofpacket
	wire          rsp_mux_001_src_valid;                                                                                     // rsp_mux_001:src_valid -> Arm_A9_HPS_h2f_axi_master_rd_limiter:rsp_sink_valid
	wire          rsp_mux_001_src_startofpacket;                                                                             // rsp_mux_001:src_startofpacket -> Arm_A9_HPS_h2f_axi_master_rd_limiter:rsp_sink_startofpacket
	wire  [238:0] rsp_mux_001_src_data;                                                                                      // rsp_mux_001:src_data -> Arm_A9_HPS_h2f_axi_master_rd_limiter:rsp_sink_data
	wire    [5:0] rsp_mux_001_src_channel;                                                                                   // rsp_mux_001:src_channel -> Arm_A9_HPS_h2f_axi_master_rd_limiter:rsp_sink_channel
	wire          rsp_mux_001_src_ready;                                                                                     // Arm_A9_HPS_h2f_axi_master_rd_limiter:rsp_sink_ready -> rsp_mux_001:src_ready
	wire          arm_a9_hps_h2f_axi_master_rd_limiter_rsp_src_endofpacket;                                                  // Arm_A9_HPS_h2f_axi_master_rd_limiter:rsp_src_endofpacket -> Arm_A9_HPS_h2f_axi_master_agent:read_rp_endofpacket
	wire          arm_a9_hps_h2f_axi_master_rd_limiter_rsp_src_valid;                                                        // Arm_A9_HPS_h2f_axi_master_rd_limiter:rsp_src_valid -> Arm_A9_HPS_h2f_axi_master_agent:read_rp_valid
	wire          arm_a9_hps_h2f_axi_master_rd_limiter_rsp_src_startofpacket;                                                // Arm_A9_HPS_h2f_axi_master_rd_limiter:rsp_src_startofpacket -> Arm_A9_HPS_h2f_axi_master_agent:read_rp_startofpacket
	wire  [238:0] arm_a9_hps_h2f_axi_master_rd_limiter_rsp_src_data;                                                         // Arm_A9_HPS_h2f_axi_master_rd_limiter:rsp_src_data -> Arm_A9_HPS_h2f_axi_master_agent:read_rp_data
	wire    [5:0] arm_a9_hps_h2f_axi_master_rd_limiter_rsp_src_channel;                                                      // Arm_A9_HPS_h2f_axi_master_rd_limiter:rsp_src_channel -> Arm_A9_HPS_h2f_axi_master_agent:read_rp_channel
	wire          arm_a9_hps_h2f_axi_master_rd_limiter_rsp_src_ready;                                                        // Arm_A9_HPS_h2f_axi_master_agent:read_rp_ready -> Arm_A9_HPS_h2f_axi_master_rd_limiter:rsp_src_ready
	wire          router_002_src_endofpacket;                                                                                // router_002:src_endofpacket -> JTAG_to_FPGA_Bridge_master_limiter:cmd_sink_endofpacket
	wire          router_002_src_valid;                                                                                      // router_002:src_valid -> JTAG_to_FPGA_Bridge_master_limiter:cmd_sink_valid
	wire          router_002_src_startofpacket;                                                                              // router_002:src_startofpacket -> JTAG_to_FPGA_Bridge_master_limiter:cmd_sink_startofpacket
	wire  [130:0] router_002_src_data;                                                                                       // router_002:src_data -> JTAG_to_FPGA_Bridge_master_limiter:cmd_sink_data
	wire    [5:0] router_002_src_channel;                                                                                    // router_002:src_channel -> JTAG_to_FPGA_Bridge_master_limiter:cmd_sink_channel
	wire          router_002_src_ready;                                                                                      // JTAG_to_FPGA_Bridge_master_limiter:cmd_sink_ready -> router_002:src_ready
	wire          jtag_to_fpga_bridge_master_limiter_cmd_src_endofpacket;                                                    // JTAG_to_FPGA_Bridge_master_limiter:cmd_src_endofpacket -> cmd_demux_002:sink_endofpacket
	wire          jtag_to_fpga_bridge_master_limiter_cmd_src_startofpacket;                                                  // JTAG_to_FPGA_Bridge_master_limiter:cmd_src_startofpacket -> cmd_demux_002:sink_startofpacket
	wire  [130:0] jtag_to_fpga_bridge_master_limiter_cmd_src_data;                                                           // JTAG_to_FPGA_Bridge_master_limiter:cmd_src_data -> cmd_demux_002:sink_data
	wire    [5:0] jtag_to_fpga_bridge_master_limiter_cmd_src_channel;                                                        // JTAG_to_FPGA_Bridge_master_limiter:cmd_src_channel -> cmd_demux_002:sink_channel
	wire          jtag_to_fpga_bridge_master_limiter_cmd_src_ready;                                                          // cmd_demux_002:sink_ready -> JTAG_to_FPGA_Bridge_master_limiter:cmd_src_ready
	wire          rsp_mux_002_src_endofpacket;                                                                               // rsp_mux_002:src_endofpacket -> JTAG_to_FPGA_Bridge_master_limiter:rsp_sink_endofpacket
	wire          rsp_mux_002_src_valid;                                                                                     // rsp_mux_002:src_valid -> JTAG_to_FPGA_Bridge_master_limiter:rsp_sink_valid
	wire          rsp_mux_002_src_startofpacket;                                                                             // rsp_mux_002:src_startofpacket -> JTAG_to_FPGA_Bridge_master_limiter:rsp_sink_startofpacket
	wire  [130:0] rsp_mux_002_src_data;                                                                                      // rsp_mux_002:src_data -> JTAG_to_FPGA_Bridge_master_limiter:rsp_sink_data
	wire    [5:0] rsp_mux_002_src_channel;                                                                                   // rsp_mux_002:src_channel -> JTAG_to_FPGA_Bridge_master_limiter:rsp_sink_channel
	wire          rsp_mux_002_src_ready;                                                                                     // JTAG_to_FPGA_Bridge_master_limiter:rsp_sink_ready -> rsp_mux_002:src_ready
	wire          jtag_to_fpga_bridge_master_limiter_rsp_src_endofpacket;                                                    // JTAG_to_FPGA_Bridge_master_limiter:rsp_src_endofpacket -> JTAG_to_FPGA_Bridge_master_agent:rp_endofpacket
	wire          jtag_to_fpga_bridge_master_limiter_rsp_src_valid;                                                          // JTAG_to_FPGA_Bridge_master_limiter:rsp_src_valid -> JTAG_to_FPGA_Bridge_master_agent:rp_valid
	wire          jtag_to_fpga_bridge_master_limiter_rsp_src_startofpacket;                                                  // JTAG_to_FPGA_Bridge_master_limiter:rsp_src_startofpacket -> JTAG_to_FPGA_Bridge_master_agent:rp_startofpacket
	wire  [130:0] jtag_to_fpga_bridge_master_limiter_rsp_src_data;                                                           // JTAG_to_FPGA_Bridge_master_limiter:rsp_src_data -> JTAG_to_FPGA_Bridge_master_agent:rp_data
	wire    [5:0] jtag_to_fpga_bridge_master_limiter_rsp_src_channel;                                                        // JTAG_to_FPGA_Bridge_master_limiter:rsp_src_channel -> JTAG_to_FPGA_Bridge_master_agent:rp_channel
	wire          jtag_to_fpga_bridge_master_limiter_rsp_src_ready;                                                          // JTAG_to_FPGA_Bridge_master_agent:rp_ready -> JTAG_to_FPGA_Bridge_master_limiter:rsp_src_ready
	wire          router_003_src_endofpacket;                                                                                // router_003:src_endofpacket -> Arm_A9_HPS_h2f_lw_axi_master_wr_limiter:cmd_sink_endofpacket
	wire          router_003_src_valid;                                                                                      // router_003:src_valid -> Arm_A9_HPS_h2f_lw_axi_master_wr_limiter:cmd_sink_valid
	wire          router_003_src_startofpacket;                                                                              // router_003:src_startofpacket -> Arm_A9_HPS_h2f_lw_axi_master_wr_limiter:cmd_sink_startofpacket
	wire  [130:0] router_003_src_data;                                                                                       // router_003:src_data -> Arm_A9_HPS_h2f_lw_axi_master_wr_limiter:cmd_sink_data
	wire    [5:0] router_003_src_channel;                                                                                    // router_003:src_channel -> Arm_A9_HPS_h2f_lw_axi_master_wr_limiter:cmd_sink_channel
	wire          router_003_src_ready;                                                                                      // Arm_A9_HPS_h2f_lw_axi_master_wr_limiter:cmd_sink_ready -> router_003:src_ready
	wire          arm_a9_hps_h2f_lw_axi_master_wr_limiter_cmd_src_endofpacket;                                               // Arm_A9_HPS_h2f_lw_axi_master_wr_limiter:cmd_src_endofpacket -> cmd_demux_003:sink_endofpacket
	wire          arm_a9_hps_h2f_lw_axi_master_wr_limiter_cmd_src_startofpacket;                                             // Arm_A9_HPS_h2f_lw_axi_master_wr_limiter:cmd_src_startofpacket -> cmd_demux_003:sink_startofpacket
	wire  [130:0] arm_a9_hps_h2f_lw_axi_master_wr_limiter_cmd_src_data;                                                      // Arm_A9_HPS_h2f_lw_axi_master_wr_limiter:cmd_src_data -> cmd_demux_003:sink_data
	wire    [5:0] arm_a9_hps_h2f_lw_axi_master_wr_limiter_cmd_src_channel;                                                   // Arm_A9_HPS_h2f_lw_axi_master_wr_limiter:cmd_src_channel -> cmd_demux_003:sink_channel
	wire          arm_a9_hps_h2f_lw_axi_master_wr_limiter_cmd_src_ready;                                                     // cmd_demux_003:sink_ready -> Arm_A9_HPS_h2f_lw_axi_master_wr_limiter:cmd_src_ready
	wire          rsp_mux_003_src_endofpacket;                                                                               // rsp_mux_003:src_endofpacket -> Arm_A9_HPS_h2f_lw_axi_master_wr_limiter:rsp_sink_endofpacket
	wire          rsp_mux_003_src_valid;                                                                                     // rsp_mux_003:src_valid -> Arm_A9_HPS_h2f_lw_axi_master_wr_limiter:rsp_sink_valid
	wire          rsp_mux_003_src_startofpacket;                                                                             // rsp_mux_003:src_startofpacket -> Arm_A9_HPS_h2f_lw_axi_master_wr_limiter:rsp_sink_startofpacket
	wire  [130:0] rsp_mux_003_src_data;                                                                                      // rsp_mux_003:src_data -> Arm_A9_HPS_h2f_lw_axi_master_wr_limiter:rsp_sink_data
	wire    [5:0] rsp_mux_003_src_channel;                                                                                   // rsp_mux_003:src_channel -> Arm_A9_HPS_h2f_lw_axi_master_wr_limiter:rsp_sink_channel
	wire          rsp_mux_003_src_ready;                                                                                     // Arm_A9_HPS_h2f_lw_axi_master_wr_limiter:rsp_sink_ready -> rsp_mux_003:src_ready
	wire          arm_a9_hps_h2f_lw_axi_master_wr_limiter_rsp_src_endofpacket;                                               // Arm_A9_HPS_h2f_lw_axi_master_wr_limiter:rsp_src_endofpacket -> Arm_A9_HPS_h2f_lw_axi_master_agent:write_rp_endofpacket
	wire          arm_a9_hps_h2f_lw_axi_master_wr_limiter_rsp_src_valid;                                                     // Arm_A9_HPS_h2f_lw_axi_master_wr_limiter:rsp_src_valid -> Arm_A9_HPS_h2f_lw_axi_master_agent:write_rp_valid
	wire          arm_a9_hps_h2f_lw_axi_master_wr_limiter_rsp_src_startofpacket;                                             // Arm_A9_HPS_h2f_lw_axi_master_wr_limiter:rsp_src_startofpacket -> Arm_A9_HPS_h2f_lw_axi_master_agent:write_rp_startofpacket
	wire  [130:0] arm_a9_hps_h2f_lw_axi_master_wr_limiter_rsp_src_data;                                                      // Arm_A9_HPS_h2f_lw_axi_master_wr_limiter:rsp_src_data -> Arm_A9_HPS_h2f_lw_axi_master_agent:write_rp_data
	wire    [5:0] arm_a9_hps_h2f_lw_axi_master_wr_limiter_rsp_src_channel;                                                   // Arm_A9_HPS_h2f_lw_axi_master_wr_limiter:rsp_src_channel -> Arm_A9_HPS_h2f_lw_axi_master_agent:write_rp_channel
	wire          arm_a9_hps_h2f_lw_axi_master_wr_limiter_rsp_src_ready;                                                     // Arm_A9_HPS_h2f_lw_axi_master_agent:write_rp_ready -> Arm_A9_HPS_h2f_lw_axi_master_wr_limiter:rsp_src_ready
	wire          router_004_src_endofpacket;                                                                                // router_004:src_endofpacket -> Arm_A9_HPS_h2f_lw_axi_master_rd_limiter:cmd_sink_endofpacket
	wire          router_004_src_valid;                                                                                      // router_004:src_valid -> Arm_A9_HPS_h2f_lw_axi_master_rd_limiter:cmd_sink_valid
	wire          router_004_src_startofpacket;                                                                              // router_004:src_startofpacket -> Arm_A9_HPS_h2f_lw_axi_master_rd_limiter:cmd_sink_startofpacket
	wire  [130:0] router_004_src_data;                                                                                       // router_004:src_data -> Arm_A9_HPS_h2f_lw_axi_master_rd_limiter:cmd_sink_data
	wire    [5:0] router_004_src_channel;                                                                                    // router_004:src_channel -> Arm_A9_HPS_h2f_lw_axi_master_rd_limiter:cmd_sink_channel
	wire          router_004_src_ready;                                                                                      // Arm_A9_HPS_h2f_lw_axi_master_rd_limiter:cmd_sink_ready -> router_004:src_ready
	wire          arm_a9_hps_h2f_lw_axi_master_rd_limiter_cmd_src_endofpacket;                                               // Arm_A9_HPS_h2f_lw_axi_master_rd_limiter:cmd_src_endofpacket -> cmd_demux_004:sink_endofpacket
	wire          arm_a9_hps_h2f_lw_axi_master_rd_limiter_cmd_src_startofpacket;                                             // Arm_A9_HPS_h2f_lw_axi_master_rd_limiter:cmd_src_startofpacket -> cmd_demux_004:sink_startofpacket
	wire  [130:0] arm_a9_hps_h2f_lw_axi_master_rd_limiter_cmd_src_data;                                                      // Arm_A9_HPS_h2f_lw_axi_master_rd_limiter:cmd_src_data -> cmd_demux_004:sink_data
	wire    [5:0] arm_a9_hps_h2f_lw_axi_master_rd_limiter_cmd_src_channel;                                                   // Arm_A9_HPS_h2f_lw_axi_master_rd_limiter:cmd_src_channel -> cmd_demux_004:sink_channel
	wire          arm_a9_hps_h2f_lw_axi_master_rd_limiter_cmd_src_ready;                                                     // cmd_demux_004:sink_ready -> Arm_A9_HPS_h2f_lw_axi_master_rd_limiter:cmd_src_ready
	wire          rsp_mux_004_src_endofpacket;                                                                               // rsp_mux_004:src_endofpacket -> Arm_A9_HPS_h2f_lw_axi_master_rd_limiter:rsp_sink_endofpacket
	wire          rsp_mux_004_src_valid;                                                                                     // rsp_mux_004:src_valid -> Arm_A9_HPS_h2f_lw_axi_master_rd_limiter:rsp_sink_valid
	wire          rsp_mux_004_src_startofpacket;                                                                             // rsp_mux_004:src_startofpacket -> Arm_A9_HPS_h2f_lw_axi_master_rd_limiter:rsp_sink_startofpacket
	wire  [130:0] rsp_mux_004_src_data;                                                                                      // rsp_mux_004:src_data -> Arm_A9_HPS_h2f_lw_axi_master_rd_limiter:rsp_sink_data
	wire    [5:0] rsp_mux_004_src_channel;                                                                                   // rsp_mux_004:src_channel -> Arm_A9_HPS_h2f_lw_axi_master_rd_limiter:rsp_sink_channel
	wire          rsp_mux_004_src_ready;                                                                                     // Arm_A9_HPS_h2f_lw_axi_master_rd_limiter:rsp_sink_ready -> rsp_mux_004:src_ready
	wire          arm_a9_hps_h2f_lw_axi_master_rd_limiter_rsp_src_endofpacket;                                               // Arm_A9_HPS_h2f_lw_axi_master_rd_limiter:rsp_src_endofpacket -> Arm_A9_HPS_h2f_lw_axi_master_agent:read_rp_endofpacket
	wire          arm_a9_hps_h2f_lw_axi_master_rd_limiter_rsp_src_valid;                                                     // Arm_A9_HPS_h2f_lw_axi_master_rd_limiter:rsp_src_valid -> Arm_A9_HPS_h2f_lw_axi_master_agent:read_rp_valid
	wire          arm_a9_hps_h2f_lw_axi_master_rd_limiter_rsp_src_startofpacket;                                             // Arm_A9_HPS_h2f_lw_axi_master_rd_limiter:rsp_src_startofpacket -> Arm_A9_HPS_h2f_lw_axi_master_agent:read_rp_startofpacket
	wire  [130:0] arm_a9_hps_h2f_lw_axi_master_rd_limiter_rsp_src_data;                                                      // Arm_A9_HPS_h2f_lw_axi_master_rd_limiter:rsp_src_data -> Arm_A9_HPS_h2f_lw_axi_master_agent:read_rp_data
	wire    [5:0] arm_a9_hps_h2f_lw_axi_master_rd_limiter_rsp_src_channel;                                                   // Arm_A9_HPS_h2f_lw_axi_master_rd_limiter:rsp_src_channel -> Arm_A9_HPS_h2f_lw_axi_master_agent:read_rp_channel
	wire          arm_a9_hps_h2f_lw_axi_master_rd_limiter_rsp_src_ready;                                                     // Arm_A9_HPS_h2f_lw_axi_master_agent:read_rp_ready -> Arm_A9_HPS_h2f_lw_axi_master_rd_limiter:rsp_src_ready
	wire          cmd_mux_src_endofpacket;                                                                                   // cmd_mux:src_endofpacket -> SDRAM_s1_burst_adapter:sink0_endofpacket
	wire          cmd_mux_src_valid;                                                                                         // cmd_mux:src_valid -> SDRAM_s1_burst_adapter:sink0_valid
	wire          cmd_mux_src_startofpacket;                                                                                 // cmd_mux:src_startofpacket -> SDRAM_s1_burst_adapter:sink0_startofpacket
	wire  [112:0] cmd_mux_src_data;                                                                                          // cmd_mux:src_data -> SDRAM_s1_burst_adapter:sink0_data
	wire    [5:0] cmd_mux_src_channel;                                                                                       // cmd_mux:src_channel -> SDRAM_s1_burst_adapter:sink0_channel
	wire          cmd_mux_src_ready;                                                                                         // SDRAM_s1_burst_adapter:sink0_ready -> cmd_mux:src_ready
	wire          sdram_s1_burst_adapter_source0_endofpacket;                                                                // SDRAM_s1_burst_adapter:source0_endofpacket -> SDRAM_s1_agent:cp_endofpacket
	wire          sdram_s1_burst_adapter_source0_valid;                                                                      // SDRAM_s1_burst_adapter:source0_valid -> SDRAM_s1_agent:cp_valid
	wire          sdram_s1_burst_adapter_source0_startofpacket;                                                              // SDRAM_s1_burst_adapter:source0_startofpacket -> SDRAM_s1_agent:cp_startofpacket
	wire  [112:0] sdram_s1_burst_adapter_source0_data;                                                                       // SDRAM_s1_burst_adapter:source0_data -> SDRAM_s1_agent:cp_data
	wire          sdram_s1_burst_adapter_source0_ready;                                                                      // SDRAM_s1_agent:cp_ready -> SDRAM_s1_burst_adapter:source0_ready
	wire    [5:0] sdram_s1_burst_adapter_source0_channel;                                                                    // SDRAM_s1_burst_adapter:source0_channel -> SDRAM_s1_agent:cp_channel
	wire          cmd_mux_001_src_endofpacket;                                                                               // cmd_mux_001:src_endofpacket -> VGA_Subsystem_pixel_dma_control_slave_burst_adapter:sink0_endofpacket
	wire          cmd_mux_001_src_valid;                                                                                     // cmd_mux_001:src_valid -> VGA_Subsystem_pixel_dma_control_slave_burst_adapter:sink0_valid
	wire          cmd_mux_001_src_startofpacket;                                                                             // cmd_mux_001:src_startofpacket -> VGA_Subsystem_pixel_dma_control_slave_burst_adapter:sink0_startofpacket
	wire  [130:0] cmd_mux_001_src_data;                                                                                      // cmd_mux_001:src_data -> VGA_Subsystem_pixel_dma_control_slave_burst_adapter:sink0_data
	wire    [5:0] cmd_mux_001_src_channel;                                                                                   // cmd_mux_001:src_channel -> VGA_Subsystem_pixel_dma_control_slave_burst_adapter:sink0_channel
	wire          cmd_mux_001_src_ready;                                                                                     // VGA_Subsystem_pixel_dma_control_slave_burst_adapter:sink0_ready -> cmd_mux_001:src_ready
	wire          vga_subsystem_pixel_dma_control_slave_burst_adapter_source0_endofpacket;                                   // VGA_Subsystem_pixel_dma_control_slave_burst_adapter:source0_endofpacket -> VGA_Subsystem_pixel_dma_control_slave_agent:cp_endofpacket
	wire          vga_subsystem_pixel_dma_control_slave_burst_adapter_source0_valid;                                         // VGA_Subsystem_pixel_dma_control_slave_burst_adapter:source0_valid -> VGA_Subsystem_pixel_dma_control_slave_agent:cp_valid
	wire          vga_subsystem_pixel_dma_control_slave_burst_adapter_source0_startofpacket;                                 // VGA_Subsystem_pixel_dma_control_slave_burst_adapter:source0_startofpacket -> VGA_Subsystem_pixel_dma_control_slave_agent:cp_startofpacket
	wire  [130:0] vga_subsystem_pixel_dma_control_slave_burst_adapter_source0_data;                                          // VGA_Subsystem_pixel_dma_control_slave_burst_adapter:source0_data -> VGA_Subsystem_pixel_dma_control_slave_agent:cp_data
	wire          vga_subsystem_pixel_dma_control_slave_burst_adapter_source0_ready;                                         // VGA_Subsystem_pixel_dma_control_slave_agent:cp_ready -> VGA_Subsystem_pixel_dma_control_slave_burst_adapter:source0_ready
	wire    [5:0] vga_subsystem_pixel_dma_control_slave_burst_adapter_source0_channel;                                       // VGA_Subsystem_pixel_dma_control_slave_burst_adapter:source0_channel -> VGA_Subsystem_pixel_dma_control_slave_agent:cp_channel
	wire          cmd_mux_002_src_endofpacket;                                                                               // cmd_mux_002:src_endofpacket -> JTAG_UART_avalon_jtag_slave_burst_adapter:sink0_endofpacket
	wire          cmd_mux_002_src_valid;                                                                                     // cmd_mux_002:src_valid -> JTAG_UART_avalon_jtag_slave_burst_adapter:sink0_valid
	wire          cmd_mux_002_src_startofpacket;                                                                             // cmd_mux_002:src_startofpacket -> JTAG_UART_avalon_jtag_slave_burst_adapter:sink0_startofpacket
	wire  [130:0] cmd_mux_002_src_data;                                                                                      // cmd_mux_002:src_data -> JTAG_UART_avalon_jtag_slave_burst_adapter:sink0_data
	wire    [5:0] cmd_mux_002_src_channel;                                                                                   // cmd_mux_002:src_channel -> JTAG_UART_avalon_jtag_slave_burst_adapter:sink0_channel
	wire          cmd_mux_002_src_ready;                                                                                     // JTAG_UART_avalon_jtag_slave_burst_adapter:sink0_ready -> cmd_mux_002:src_ready
	wire          jtag_uart_avalon_jtag_slave_burst_adapter_source0_endofpacket;                                             // JTAG_UART_avalon_jtag_slave_burst_adapter:source0_endofpacket -> JTAG_UART_avalon_jtag_slave_agent:cp_endofpacket
	wire          jtag_uart_avalon_jtag_slave_burst_adapter_source0_valid;                                                   // JTAG_UART_avalon_jtag_slave_burst_adapter:source0_valid -> JTAG_UART_avalon_jtag_slave_agent:cp_valid
	wire          jtag_uart_avalon_jtag_slave_burst_adapter_source0_startofpacket;                                           // JTAG_UART_avalon_jtag_slave_burst_adapter:source0_startofpacket -> JTAG_UART_avalon_jtag_slave_agent:cp_startofpacket
	wire  [130:0] jtag_uart_avalon_jtag_slave_burst_adapter_source0_data;                                                    // JTAG_UART_avalon_jtag_slave_burst_adapter:source0_data -> JTAG_UART_avalon_jtag_slave_agent:cp_data
	wire          jtag_uart_avalon_jtag_slave_burst_adapter_source0_ready;                                                   // JTAG_UART_avalon_jtag_slave_agent:cp_ready -> JTAG_UART_avalon_jtag_slave_burst_adapter:source0_ready
	wire    [5:0] jtag_uart_avalon_jtag_slave_burst_adapter_source0_channel;                                                 // JTAG_UART_avalon_jtag_slave_burst_adapter:source0_channel -> JTAG_UART_avalon_jtag_slave_agent:cp_channel
	wire          cmd_mux_003_src_endofpacket;                                                                               // cmd_mux_003:src_endofpacket -> Interval_Timer_s1_burst_adapter:sink0_endofpacket
	wire          cmd_mux_003_src_valid;                                                                                     // cmd_mux_003:src_valid -> Interval_Timer_s1_burst_adapter:sink0_valid
	wire          cmd_mux_003_src_startofpacket;                                                                             // cmd_mux_003:src_startofpacket -> Interval_Timer_s1_burst_adapter:sink0_startofpacket
	wire  [130:0] cmd_mux_003_src_data;                                                                                      // cmd_mux_003:src_data -> Interval_Timer_s1_burst_adapter:sink0_data
	wire    [5:0] cmd_mux_003_src_channel;                                                                                   // cmd_mux_003:src_channel -> Interval_Timer_s1_burst_adapter:sink0_channel
	wire          cmd_mux_003_src_ready;                                                                                     // Interval_Timer_s1_burst_adapter:sink0_ready -> cmd_mux_003:src_ready
	wire          interval_timer_s1_burst_adapter_source0_endofpacket;                                                       // Interval_Timer_s1_burst_adapter:source0_endofpacket -> Interval_Timer_s1_agent:cp_endofpacket
	wire          interval_timer_s1_burst_adapter_source0_valid;                                                             // Interval_Timer_s1_burst_adapter:source0_valid -> Interval_Timer_s1_agent:cp_valid
	wire          interval_timer_s1_burst_adapter_source0_startofpacket;                                                     // Interval_Timer_s1_burst_adapter:source0_startofpacket -> Interval_Timer_s1_agent:cp_startofpacket
	wire  [130:0] interval_timer_s1_burst_adapter_source0_data;                                                              // Interval_Timer_s1_burst_adapter:source0_data -> Interval_Timer_s1_agent:cp_data
	wire          interval_timer_s1_burst_adapter_source0_ready;                                                             // Interval_Timer_s1_agent:cp_ready -> Interval_Timer_s1_burst_adapter:source0_ready
	wire    [5:0] interval_timer_s1_burst_adapter_source0_channel;                                                           // Interval_Timer_s1_burst_adapter:source0_channel -> Interval_Timer_s1_agent:cp_channel
	wire          cmd_mux_004_src_endofpacket;                                                                               // cmd_mux_004:src_endofpacket -> LEDs_s1_burst_adapter:sink0_endofpacket
	wire          cmd_mux_004_src_valid;                                                                                     // cmd_mux_004:src_valid -> LEDs_s1_burst_adapter:sink0_valid
	wire          cmd_mux_004_src_startofpacket;                                                                             // cmd_mux_004:src_startofpacket -> LEDs_s1_burst_adapter:sink0_startofpacket
	wire  [130:0] cmd_mux_004_src_data;                                                                                      // cmd_mux_004:src_data -> LEDs_s1_burst_adapter:sink0_data
	wire    [5:0] cmd_mux_004_src_channel;                                                                                   // cmd_mux_004:src_channel -> LEDs_s1_burst_adapter:sink0_channel
	wire          cmd_mux_004_src_ready;                                                                                     // LEDs_s1_burst_adapter:sink0_ready -> cmd_mux_004:src_ready
	wire          leds_s1_burst_adapter_source0_endofpacket;                                                                 // LEDs_s1_burst_adapter:source0_endofpacket -> LEDs_s1_agent:cp_endofpacket
	wire          leds_s1_burst_adapter_source0_valid;                                                                       // LEDs_s1_burst_adapter:source0_valid -> LEDs_s1_agent:cp_valid
	wire          leds_s1_burst_adapter_source0_startofpacket;                                                               // LEDs_s1_burst_adapter:source0_startofpacket -> LEDs_s1_agent:cp_startofpacket
	wire  [130:0] leds_s1_burst_adapter_source0_data;                                                                        // LEDs_s1_burst_adapter:source0_data -> LEDs_s1_agent:cp_data
	wire          leds_s1_burst_adapter_source0_ready;                                                                       // LEDs_s1_agent:cp_ready -> LEDs_s1_burst_adapter:source0_ready
	wire    [5:0] leds_s1_burst_adapter_source0_channel;                                                                     // LEDs_s1_burst_adapter:source0_channel -> LEDs_s1_agent:cp_channel
	wire          cmd_mux_005_src_endofpacket;                                                                               // cmd_mux_005:src_endofpacket -> Slider_Switches_s1_burst_adapter:sink0_endofpacket
	wire          cmd_mux_005_src_valid;                                                                                     // cmd_mux_005:src_valid -> Slider_Switches_s1_burst_adapter:sink0_valid
	wire          cmd_mux_005_src_startofpacket;                                                                             // cmd_mux_005:src_startofpacket -> Slider_Switches_s1_burst_adapter:sink0_startofpacket
	wire  [130:0] cmd_mux_005_src_data;                                                                                      // cmd_mux_005:src_data -> Slider_Switches_s1_burst_adapter:sink0_data
	wire    [5:0] cmd_mux_005_src_channel;                                                                                   // cmd_mux_005:src_channel -> Slider_Switches_s1_burst_adapter:sink0_channel
	wire          cmd_mux_005_src_ready;                                                                                     // Slider_Switches_s1_burst_adapter:sink0_ready -> cmd_mux_005:src_ready
	wire          slider_switches_s1_burst_adapter_source0_endofpacket;                                                      // Slider_Switches_s1_burst_adapter:source0_endofpacket -> Slider_Switches_s1_agent:cp_endofpacket
	wire          slider_switches_s1_burst_adapter_source0_valid;                                                            // Slider_Switches_s1_burst_adapter:source0_valid -> Slider_Switches_s1_agent:cp_valid
	wire          slider_switches_s1_burst_adapter_source0_startofpacket;                                                    // Slider_Switches_s1_burst_adapter:source0_startofpacket -> Slider_Switches_s1_agent:cp_startofpacket
	wire  [130:0] slider_switches_s1_burst_adapter_source0_data;                                                             // Slider_Switches_s1_burst_adapter:source0_data -> Slider_Switches_s1_agent:cp_data
	wire          slider_switches_s1_burst_adapter_source0_ready;                                                            // Slider_Switches_s1_agent:cp_ready -> Slider_Switches_s1_burst_adapter:source0_ready
	wire    [5:0] slider_switches_s1_burst_adapter_source0_channel;                                                          // Slider_Switches_s1_burst_adapter:source0_channel -> Slider_Switches_s1_agent:cp_channel
	wire          cmd_demux_002_src1_endofpacket;                                                                            // cmd_demux_002:src1_endofpacket -> cmd_mux_001:sink2_endofpacket
	wire          cmd_demux_002_src1_valid;                                                                                  // cmd_demux_002:src1_valid -> cmd_mux_001:sink2_valid
	wire          cmd_demux_002_src1_startofpacket;                                                                          // cmd_demux_002:src1_startofpacket -> cmd_mux_001:sink2_startofpacket
	wire  [130:0] cmd_demux_002_src1_data;                                                                                   // cmd_demux_002:src1_data -> cmd_mux_001:sink2_data
	wire    [5:0] cmd_demux_002_src1_channel;                                                                                // cmd_demux_002:src1_channel -> cmd_mux_001:sink2_channel
	wire          cmd_demux_002_src1_ready;                                                                                  // cmd_mux_001:sink2_ready -> cmd_demux_002:src1_ready
	wire          cmd_demux_002_src2_endofpacket;                                                                            // cmd_demux_002:src2_endofpacket -> cmd_mux_002:sink0_endofpacket
	wire          cmd_demux_002_src2_valid;                                                                                  // cmd_demux_002:src2_valid -> cmd_mux_002:sink0_valid
	wire          cmd_demux_002_src2_startofpacket;                                                                          // cmd_demux_002:src2_startofpacket -> cmd_mux_002:sink0_startofpacket
	wire  [130:0] cmd_demux_002_src2_data;                                                                                   // cmd_demux_002:src2_data -> cmd_mux_002:sink0_data
	wire    [5:0] cmd_demux_002_src2_channel;                                                                                // cmd_demux_002:src2_channel -> cmd_mux_002:sink0_channel
	wire          cmd_demux_002_src2_ready;                                                                                  // cmd_mux_002:sink0_ready -> cmd_demux_002:src2_ready
	wire          cmd_demux_002_src3_endofpacket;                                                                            // cmd_demux_002:src3_endofpacket -> cmd_mux_003:sink0_endofpacket
	wire          cmd_demux_002_src3_valid;                                                                                  // cmd_demux_002:src3_valid -> cmd_mux_003:sink0_valid
	wire          cmd_demux_002_src3_startofpacket;                                                                          // cmd_demux_002:src3_startofpacket -> cmd_mux_003:sink0_startofpacket
	wire  [130:0] cmd_demux_002_src3_data;                                                                                   // cmd_demux_002:src3_data -> cmd_mux_003:sink0_data
	wire    [5:0] cmd_demux_002_src3_channel;                                                                                // cmd_demux_002:src3_channel -> cmd_mux_003:sink0_channel
	wire          cmd_demux_002_src3_ready;                                                                                  // cmd_mux_003:sink0_ready -> cmd_demux_002:src3_ready
	wire          cmd_demux_002_src4_endofpacket;                                                                            // cmd_demux_002:src4_endofpacket -> cmd_mux_004:sink0_endofpacket
	wire          cmd_demux_002_src4_valid;                                                                                  // cmd_demux_002:src4_valid -> cmd_mux_004:sink0_valid
	wire          cmd_demux_002_src4_startofpacket;                                                                          // cmd_demux_002:src4_startofpacket -> cmd_mux_004:sink0_startofpacket
	wire  [130:0] cmd_demux_002_src4_data;                                                                                   // cmd_demux_002:src4_data -> cmd_mux_004:sink0_data
	wire    [5:0] cmd_demux_002_src4_channel;                                                                                // cmd_demux_002:src4_channel -> cmd_mux_004:sink0_channel
	wire          cmd_demux_002_src4_ready;                                                                                  // cmd_mux_004:sink0_ready -> cmd_demux_002:src4_ready
	wire          cmd_demux_002_src5_endofpacket;                                                                            // cmd_demux_002:src5_endofpacket -> cmd_mux_005:sink0_endofpacket
	wire          cmd_demux_002_src5_valid;                                                                                  // cmd_demux_002:src5_valid -> cmd_mux_005:sink0_valid
	wire          cmd_demux_002_src5_startofpacket;                                                                          // cmd_demux_002:src5_startofpacket -> cmd_mux_005:sink0_startofpacket
	wire  [130:0] cmd_demux_002_src5_data;                                                                                   // cmd_demux_002:src5_data -> cmd_mux_005:sink0_data
	wire    [5:0] cmd_demux_002_src5_channel;                                                                                // cmd_demux_002:src5_channel -> cmd_mux_005:sink0_channel
	wire          cmd_demux_002_src5_ready;                                                                                  // cmd_mux_005:sink0_ready -> cmd_demux_002:src5_ready
	wire          cmd_demux_003_src0_endofpacket;                                                                            // cmd_demux_003:src0_endofpacket -> cmd_mux_002:sink1_endofpacket
	wire          cmd_demux_003_src0_valid;                                                                                  // cmd_demux_003:src0_valid -> cmd_mux_002:sink1_valid
	wire          cmd_demux_003_src0_startofpacket;                                                                          // cmd_demux_003:src0_startofpacket -> cmd_mux_002:sink1_startofpacket
	wire  [130:0] cmd_demux_003_src0_data;                                                                                   // cmd_demux_003:src0_data -> cmd_mux_002:sink1_data
	wire    [5:0] cmd_demux_003_src0_channel;                                                                                // cmd_demux_003:src0_channel -> cmd_mux_002:sink1_channel
	wire          cmd_demux_003_src0_ready;                                                                                  // cmd_mux_002:sink1_ready -> cmd_demux_003:src0_ready
	wire          cmd_demux_003_src1_endofpacket;                                                                            // cmd_demux_003:src1_endofpacket -> cmd_mux_003:sink1_endofpacket
	wire          cmd_demux_003_src1_valid;                                                                                  // cmd_demux_003:src1_valid -> cmd_mux_003:sink1_valid
	wire          cmd_demux_003_src1_startofpacket;                                                                          // cmd_demux_003:src1_startofpacket -> cmd_mux_003:sink1_startofpacket
	wire  [130:0] cmd_demux_003_src1_data;                                                                                   // cmd_demux_003:src1_data -> cmd_mux_003:sink1_data
	wire    [5:0] cmd_demux_003_src1_channel;                                                                                // cmd_demux_003:src1_channel -> cmd_mux_003:sink1_channel
	wire          cmd_demux_003_src1_ready;                                                                                  // cmd_mux_003:sink1_ready -> cmd_demux_003:src1_ready
	wire          cmd_demux_003_src2_endofpacket;                                                                            // cmd_demux_003:src2_endofpacket -> cmd_mux_004:sink1_endofpacket
	wire          cmd_demux_003_src2_valid;                                                                                  // cmd_demux_003:src2_valid -> cmd_mux_004:sink1_valid
	wire          cmd_demux_003_src2_startofpacket;                                                                          // cmd_demux_003:src2_startofpacket -> cmd_mux_004:sink1_startofpacket
	wire  [130:0] cmd_demux_003_src2_data;                                                                                   // cmd_demux_003:src2_data -> cmd_mux_004:sink1_data
	wire    [5:0] cmd_demux_003_src2_channel;                                                                                // cmd_demux_003:src2_channel -> cmd_mux_004:sink1_channel
	wire          cmd_demux_003_src2_ready;                                                                                  // cmd_mux_004:sink1_ready -> cmd_demux_003:src2_ready
	wire          cmd_demux_003_src3_endofpacket;                                                                            // cmd_demux_003:src3_endofpacket -> cmd_mux_005:sink1_endofpacket
	wire          cmd_demux_003_src3_valid;                                                                                  // cmd_demux_003:src3_valid -> cmd_mux_005:sink1_valid
	wire          cmd_demux_003_src3_startofpacket;                                                                          // cmd_demux_003:src3_startofpacket -> cmd_mux_005:sink1_startofpacket
	wire  [130:0] cmd_demux_003_src3_data;                                                                                   // cmd_demux_003:src3_data -> cmd_mux_005:sink1_data
	wire    [5:0] cmd_demux_003_src3_channel;                                                                                // cmd_demux_003:src3_channel -> cmd_mux_005:sink1_channel
	wire          cmd_demux_003_src3_ready;                                                                                  // cmd_mux_005:sink1_ready -> cmd_demux_003:src3_ready
	wire          cmd_demux_004_src0_endofpacket;                                                                            // cmd_demux_004:src0_endofpacket -> cmd_mux_002:sink2_endofpacket
	wire          cmd_demux_004_src0_valid;                                                                                  // cmd_demux_004:src0_valid -> cmd_mux_002:sink2_valid
	wire          cmd_demux_004_src0_startofpacket;                                                                          // cmd_demux_004:src0_startofpacket -> cmd_mux_002:sink2_startofpacket
	wire  [130:0] cmd_demux_004_src0_data;                                                                                   // cmd_demux_004:src0_data -> cmd_mux_002:sink2_data
	wire    [5:0] cmd_demux_004_src0_channel;                                                                                // cmd_demux_004:src0_channel -> cmd_mux_002:sink2_channel
	wire          cmd_demux_004_src0_ready;                                                                                  // cmd_mux_002:sink2_ready -> cmd_demux_004:src0_ready
	wire          cmd_demux_004_src1_endofpacket;                                                                            // cmd_demux_004:src1_endofpacket -> cmd_mux_003:sink2_endofpacket
	wire          cmd_demux_004_src1_valid;                                                                                  // cmd_demux_004:src1_valid -> cmd_mux_003:sink2_valid
	wire          cmd_demux_004_src1_startofpacket;                                                                          // cmd_demux_004:src1_startofpacket -> cmd_mux_003:sink2_startofpacket
	wire  [130:0] cmd_demux_004_src1_data;                                                                                   // cmd_demux_004:src1_data -> cmd_mux_003:sink2_data
	wire    [5:0] cmd_demux_004_src1_channel;                                                                                // cmd_demux_004:src1_channel -> cmd_mux_003:sink2_channel
	wire          cmd_demux_004_src1_ready;                                                                                  // cmd_mux_003:sink2_ready -> cmd_demux_004:src1_ready
	wire          cmd_demux_004_src2_endofpacket;                                                                            // cmd_demux_004:src2_endofpacket -> cmd_mux_004:sink2_endofpacket
	wire          cmd_demux_004_src2_valid;                                                                                  // cmd_demux_004:src2_valid -> cmd_mux_004:sink2_valid
	wire          cmd_demux_004_src2_startofpacket;                                                                          // cmd_demux_004:src2_startofpacket -> cmd_mux_004:sink2_startofpacket
	wire  [130:0] cmd_demux_004_src2_data;                                                                                   // cmd_demux_004:src2_data -> cmd_mux_004:sink2_data
	wire    [5:0] cmd_demux_004_src2_channel;                                                                                // cmd_demux_004:src2_channel -> cmd_mux_004:sink2_channel
	wire          cmd_demux_004_src2_ready;                                                                                  // cmd_mux_004:sink2_ready -> cmd_demux_004:src2_ready
	wire          cmd_demux_004_src3_endofpacket;                                                                            // cmd_demux_004:src3_endofpacket -> cmd_mux_005:sink2_endofpacket
	wire          cmd_demux_004_src3_valid;                                                                                  // cmd_demux_004:src3_valid -> cmd_mux_005:sink2_valid
	wire          cmd_demux_004_src3_startofpacket;                                                                          // cmd_demux_004:src3_startofpacket -> cmd_mux_005:sink2_startofpacket
	wire  [130:0] cmd_demux_004_src3_data;                                                                                   // cmd_demux_004:src3_data -> cmd_mux_005:sink2_data
	wire    [5:0] cmd_demux_004_src3_channel;                                                                                // cmd_demux_004:src3_channel -> cmd_mux_005:sink2_channel
	wire          cmd_demux_004_src3_ready;                                                                                  // cmd_mux_005:sink2_ready -> cmd_demux_004:src3_ready
	wire          cmd_demux_005_src0_endofpacket;                                                                            // cmd_demux_005:src0_endofpacket -> cmd_mux:sink3_endofpacket
	wire          cmd_demux_005_src0_valid;                                                                                  // cmd_demux_005:src0_valid -> cmd_mux:sink3_valid
	wire          cmd_demux_005_src0_startofpacket;                                                                          // cmd_demux_005:src0_startofpacket -> cmd_mux:sink3_startofpacket
	wire  [112:0] cmd_demux_005_src0_data;                                                                                   // cmd_demux_005:src0_data -> cmd_mux:sink3_data
	wire    [5:0] cmd_demux_005_src0_channel;                                                                                // cmd_demux_005:src0_channel -> cmd_mux:sink3_channel
	wire          cmd_demux_005_src0_ready;                                                                                  // cmd_mux:sink3_ready -> cmd_demux_005:src0_ready
	wire          rsp_demux_src3_endofpacket;                                                                                // rsp_demux:src3_endofpacket -> rsp_mux_005:sink0_endofpacket
	wire          rsp_demux_src3_valid;                                                                                      // rsp_demux:src3_valid -> rsp_mux_005:sink0_valid
	wire          rsp_demux_src3_startofpacket;                                                                              // rsp_demux:src3_startofpacket -> rsp_mux_005:sink0_startofpacket
	wire  [112:0] rsp_demux_src3_data;                                                                                       // rsp_demux:src3_data -> rsp_mux_005:sink0_data
	wire    [5:0] rsp_demux_src3_channel;                                                                                    // rsp_demux:src3_channel -> rsp_mux_005:sink0_channel
	wire          rsp_demux_src3_ready;                                                                                      // rsp_mux_005:sink0_ready -> rsp_demux:src3_ready
	wire          rsp_demux_001_src2_endofpacket;                                                                            // rsp_demux_001:src2_endofpacket -> rsp_mux_002:sink1_endofpacket
	wire          rsp_demux_001_src2_valid;                                                                                  // rsp_demux_001:src2_valid -> rsp_mux_002:sink1_valid
	wire          rsp_demux_001_src2_startofpacket;                                                                          // rsp_demux_001:src2_startofpacket -> rsp_mux_002:sink1_startofpacket
	wire  [130:0] rsp_demux_001_src2_data;                                                                                   // rsp_demux_001:src2_data -> rsp_mux_002:sink1_data
	wire    [5:0] rsp_demux_001_src2_channel;                                                                                // rsp_demux_001:src2_channel -> rsp_mux_002:sink1_channel
	wire          rsp_demux_001_src2_ready;                                                                                  // rsp_mux_002:sink1_ready -> rsp_demux_001:src2_ready
	wire          rsp_demux_002_src0_endofpacket;                                                                            // rsp_demux_002:src0_endofpacket -> rsp_mux_002:sink2_endofpacket
	wire          rsp_demux_002_src0_valid;                                                                                  // rsp_demux_002:src0_valid -> rsp_mux_002:sink2_valid
	wire          rsp_demux_002_src0_startofpacket;                                                                          // rsp_demux_002:src0_startofpacket -> rsp_mux_002:sink2_startofpacket
	wire  [130:0] rsp_demux_002_src0_data;                                                                                   // rsp_demux_002:src0_data -> rsp_mux_002:sink2_data
	wire    [5:0] rsp_demux_002_src0_channel;                                                                                // rsp_demux_002:src0_channel -> rsp_mux_002:sink2_channel
	wire          rsp_demux_002_src0_ready;                                                                                  // rsp_mux_002:sink2_ready -> rsp_demux_002:src0_ready
	wire          rsp_demux_002_src1_endofpacket;                                                                            // rsp_demux_002:src1_endofpacket -> rsp_mux_003:sink0_endofpacket
	wire          rsp_demux_002_src1_valid;                                                                                  // rsp_demux_002:src1_valid -> rsp_mux_003:sink0_valid
	wire          rsp_demux_002_src1_startofpacket;                                                                          // rsp_demux_002:src1_startofpacket -> rsp_mux_003:sink0_startofpacket
	wire  [130:0] rsp_demux_002_src1_data;                                                                                   // rsp_demux_002:src1_data -> rsp_mux_003:sink0_data
	wire    [5:0] rsp_demux_002_src1_channel;                                                                                // rsp_demux_002:src1_channel -> rsp_mux_003:sink0_channel
	wire          rsp_demux_002_src1_ready;                                                                                  // rsp_mux_003:sink0_ready -> rsp_demux_002:src1_ready
	wire          rsp_demux_002_src2_endofpacket;                                                                            // rsp_demux_002:src2_endofpacket -> rsp_mux_004:sink0_endofpacket
	wire          rsp_demux_002_src2_valid;                                                                                  // rsp_demux_002:src2_valid -> rsp_mux_004:sink0_valid
	wire          rsp_demux_002_src2_startofpacket;                                                                          // rsp_demux_002:src2_startofpacket -> rsp_mux_004:sink0_startofpacket
	wire  [130:0] rsp_demux_002_src2_data;                                                                                   // rsp_demux_002:src2_data -> rsp_mux_004:sink0_data
	wire    [5:0] rsp_demux_002_src2_channel;                                                                                // rsp_demux_002:src2_channel -> rsp_mux_004:sink0_channel
	wire          rsp_demux_002_src2_ready;                                                                                  // rsp_mux_004:sink0_ready -> rsp_demux_002:src2_ready
	wire          rsp_demux_003_src0_endofpacket;                                                                            // rsp_demux_003:src0_endofpacket -> rsp_mux_002:sink3_endofpacket
	wire          rsp_demux_003_src0_valid;                                                                                  // rsp_demux_003:src0_valid -> rsp_mux_002:sink3_valid
	wire          rsp_demux_003_src0_startofpacket;                                                                          // rsp_demux_003:src0_startofpacket -> rsp_mux_002:sink3_startofpacket
	wire  [130:0] rsp_demux_003_src0_data;                                                                                   // rsp_demux_003:src0_data -> rsp_mux_002:sink3_data
	wire    [5:0] rsp_demux_003_src0_channel;                                                                                // rsp_demux_003:src0_channel -> rsp_mux_002:sink3_channel
	wire          rsp_demux_003_src0_ready;                                                                                  // rsp_mux_002:sink3_ready -> rsp_demux_003:src0_ready
	wire          rsp_demux_003_src1_endofpacket;                                                                            // rsp_demux_003:src1_endofpacket -> rsp_mux_003:sink1_endofpacket
	wire          rsp_demux_003_src1_valid;                                                                                  // rsp_demux_003:src1_valid -> rsp_mux_003:sink1_valid
	wire          rsp_demux_003_src1_startofpacket;                                                                          // rsp_demux_003:src1_startofpacket -> rsp_mux_003:sink1_startofpacket
	wire  [130:0] rsp_demux_003_src1_data;                                                                                   // rsp_demux_003:src1_data -> rsp_mux_003:sink1_data
	wire    [5:0] rsp_demux_003_src1_channel;                                                                                // rsp_demux_003:src1_channel -> rsp_mux_003:sink1_channel
	wire          rsp_demux_003_src1_ready;                                                                                  // rsp_mux_003:sink1_ready -> rsp_demux_003:src1_ready
	wire          rsp_demux_003_src2_endofpacket;                                                                            // rsp_demux_003:src2_endofpacket -> rsp_mux_004:sink1_endofpacket
	wire          rsp_demux_003_src2_valid;                                                                                  // rsp_demux_003:src2_valid -> rsp_mux_004:sink1_valid
	wire          rsp_demux_003_src2_startofpacket;                                                                          // rsp_demux_003:src2_startofpacket -> rsp_mux_004:sink1_startofpacket
	wire  [130:0] rsp_demux_003_src2_data;                                                                                   // rsp_demux_003:src2_data -> rsp_mux_004:sink1_data
	wire    [5:0] rsp_demux_003_src2_channel;                                                                                // rsp_demux_003:src2_channel -> rsp_mux_004:sink1_channel
	wire          rsp_demux_003_src2_ready;                                                                                  // rsp_mux_004:sink1_ready -> rsp_demux_003:src2_ready
	wire          rsp_demux_004_src0_endofpacket;                                                                            // rsp_demux_004:src0_endofpacket -> rsp_mux_002:sink4_endofpacket
	wire          rsp_demux_004_src0_valid;                                                                                  // rsp_demux_004:src0_valid -> rsp_mux_002:sink4_valid
	wire          rsp_demux_004_src0_startofpacket;                                                                          // rsp_demux_004:src0_startofpacket -> rsp_mux_002:sink4_startofpacket
	wire  [130:0] rsp_demux_004_src0_data;                                                                                   // rsp_demux_004:src0_data -> rsp_mux_002:sink4_data
	wire    [5:0] rsp_demux_004_src0_channel;                                                                                // rsp_demux_004:src0_channel -> rsp_mux_002:sink4_channel
	wire          rsp_demux_004_src0_ready;                                                                                  // rsp_mux_002:sink4_ready -> rsp_demux_004:src0_ready
	wire          rsp_demux_004_src1_endofpacket;                                                                            // rsp_demux_004:src1_endofpacket -> rsp_mux_003:sink2_endofpacket
	wire          rsp_demux_004_src1_valid;                                                                                  // rsp_demux_004:src1_valid -> rsp_mux_003:sink2_valid
	wire          rsp_demux_004_src1_startofpacket;                                                                          // rsp_demux_004:src1_startofpacket -> rsp_mux_003:sink2_startofpacket
	wire  [130:0] rsp_demux_004_src1_data;                                                                                   // rsp_demux_004:src1_data -> rsp_mux_003:sink2_data
	wire    [5:0] rsp_demux_004_src1_channel;                                                                                // rsp_demux_004:src1_channel -> rsp_mux_003:sink2_channel
	wire          rsp_demux_004_src1_ready;                                                                                  // rsp_mux_003:sink2_ready -> rsp_demux_004:src1_ready
	wire          rsp_demux_004_src2_endofpacket;                                                                            // rsp_demux_004:src2_endofpacket -> rsp_mux_004:sink2_endofpacket
	wire          rsp_demux_004_src2_valid;                                                                                  // rsp_demux_004:src2_valid -> rsp_mux_004:sink2_valid
	wire          rsp_demux_004_src2_startofpacket;                                                                          // rsp_demux_004:src2_startofpacket -> rsp_mux_004:sink2_startofpacket
	wire  [130:0] rsp_demux_004_src2_data;                                                                                   // rsp_demux_004:src2_data -> rsp_mux_004:sink2_data
	wire    [5:0] rsp_demux_004_src2_channel;                                                                                // rsp_demux_004:src2_channel -> rsp_mux_004:sink2_channel
	wire          rsp_demux_004_src2_ready;                                                                                  // rsp_mux_004:sink2_ready -> rsp_demux_004:src2_ready
	wire          rsp_demux_005_src0_endofpacket;                                                                            // rsp_demux_005:src0_endofpacket -> rsp_mux_002:sink5_endofpacket
	wire          rsp_demux_005_src0_valid;                                                                                  // rsp_demux_005:src0_valid -> rsp_mux_002:sink5_valid
	wire          rsp_demux_005_src0_startofpacket;                                                                          // rsp_demux_005:src0_startofpacket -> rsp_mux_002:sink5_startofpacket
	wire  [130:0] rsp_demux_005_src0_data;                                                                                   // rsp_demux_005:src0_data -> rsp_mux_002:sink5_data
	wire    [5:0] rsp_demux_005_src0_channel;                                                                                // rsp_demux_005:src0_channel -> rsp_mux_002:sink5_channel
	wire          rsp_demux_005_src0_ready;                                                                                  // rsp_mux_002:sink5_ready -> rsp_demux_005:src0_ready
	wire          rsp_demux_005_src1_endofpacket;                                                                            // rsp_demux_005:src1_endofpacket -> rsp_mux_003:sink3_endofpacket
	wire          rsp_demux_005_src1_valid;                                                                                  // rsp_demux_005:src1_valid -> rsp_mux_003:sink3_valid
	wire          rsp_demux_005_src1_startofpacket;                                                                          // rsp_demux_005:src1_startofpacket -> rsp_mux_003:sink3_startofpacket
	wire  [130:0] rsp_demux_005_src1_data;                                                                                   // rsp_demux_005:src1_data -> rsp_mux_003:sink3_data
	wire    [5:0] rsp_demux_005_src1_channel;                                                                                // rsp_demux_005:src1_channel -> rsp_mux_003:sink3_channel
	wire          rsp_demux_005_src1_ready;                                                                                  // rsp_mux_003:sink3_ready -> rsp_demux_005:src1_ready
	wire          rsp_demux_005_src2_endofpacket;                                                                            // rsp_demux_005:src2_endofpacket -> rsp_mux_004:sink3_endofpacket
	wire          rsp_demux_005_src2_valid;                                                                                  // rsp_demux_005:src2_valid -> rsp_mux_004:sink3_valid
	wire          rsp_demux_005_src2_startofpacket;                                                                          // rsp_demux_005:src2_startofpacket -> rsp_mux_004:sink3_startofpacket
	wire  [130:0] rsp_demux_005_src2_data;                                                                                   // rsp_demux_005:src2_data -> rsp_mux_004:sink3_data
	wire    [5:0] rsp_demux_005_src2_channel;                                                                                // rsp_demux_005:src2_channel -> rsp_mux_004:sink3_channel
	wire          rsp_demux_005_src2_ready;                                                                                  // rsp_mux_004:sink3_ready -> rsp_demux_005:src2_ready
	wire          cmd_demux_src0_endofpacket;                                                                                // cmd_demux:src0_endofpacket -> Arm_A9_HPS_h2f_axi_master_wr_to_SDRAM_s1_cmd_width_adapter:in_endofpacket
	wire          cmd_demux_src0_valid;                                                                                      // cmd_demux:src0_valid -> Arm_A9_HPS_h2f_axi_master_wr_to_SDRAM_s1_cmd_width_adapter:in_valid
	wire          cmd_demux_src0_startofpacket;                                                                              // cmd_demux:src0_startofpacket -> Arm_A9_HPS_h2f_axi_master_wr_to_SDRAM_s1_cmd_width_adapter:in_startofpacket
	wire  [238:0] cmd_demux_src0_data;                                                                                       // cmd_demux:src0_data -> Arm_A9_HPS_h2f_axi_master_wr_to_SDRAM_s1_cmd_width_adapter:in_data
	wire    [5:0] cmd_demux_src0_channel;                                                                                    // cmd_demux:src0_channel -> Arm_A9_HPS_h2f_axi_master_wr_to_SDRAM_s1_cmd_width_adapter:in_channel
	wire          cmd_demux_src0_ready;                                                                                      // Arm_A9_HPS_h2f_axi_master_wr_to_SDRAM_s1_cmd_width_adapter:in_ready -> cmd_demux:src0_ready
	wire          arm_a9_hps_h2f_axi_master_wr_to_sdram_s1_cmd_width_adapter_src_endofpacket;                                // Arm_A9_HPS_h2f_axi_master_wr_to_SDRAM_s1_cmd_width_adapter:out_endofpacket -> cmd_mux:sink0_endofpacket
	wire          arm_a9_hps_h2f_axi_master_wr_to_sdram_s1_cmd_width_adapter_src_valid;                                      // Arm_A9_HPS_h2f_axi_master_wr_to_SDRAM_s1_cmd_width_adapter:out_valid -> cmd_mux:sink0_valid
	wire          arm_a9_hps_h2f_axi_master_wr_to_sdram_s1_cmd_width_adapter_src_startofpacket;                              // Arm_A9_HPS_h2f_axi_master_wr_to_SDRAM_s1_cmd_width_adapter:out_startofpacket -> cmd_mux:sink0_startofpacket
	wire  [112:0] arm_a9_hps_h2f_axi_master_wr_to_sdram_s1_cmd_width_adapter_src_data;                                       // Arm_A9_HPS_h2f_axi_master_wr_to_SDRAM_s1_cmd_width_adapter:out_data -> cmd_mux:sink0_data
	wire          arm_a9_hps_h2f_axi_master_wr_to_sdram_s1_cmd_width_adapter_src_ready;                                      // cmd_mux:sink0_ready -> Arm_A9_HPS_h2f_axi_master_wr_to_SDRAM_s1_cmd_width_adapter:out_ready
	wire    [5:0] arm_a9_hps_h2f_axi_master_wr_to_sdram_s1_cmd_width_adapter_src_channel;                                    // Arm_A9_HPS_h2f_axi_master_wr_to_SDRAM_s1_cmd_width_adapter:out_channel -> cmd_mux:sink0_channel
	wire          cmd_demux_src1_endofpacket;                                                                                // cmd_demux:src1_endofpacket -> Arm_A9_HPS_h2f_axi_master_wr_to_VGA_Subsystem_pixel_dma_control_slave_cmd_width_adapter:in_endofpacket
	wire          cmd_demux_src1_valid;                                                                                      // cmd_demux:src1_valid -> Arm_A9_HPS_h2f_axi_master_wr_to_VGA_Subsystem_pixel_dma_control_slave_cmd_width_adapter:in_valid
	wire          cmd_demux_src1_startofpacket;                                                                              // cmd_demux:src1_startofpacket -> Arm_A9_HPS_h2f_axi_master_wr_to_VGA_Subsystem_pixel_dma_control_slave_cmd_width_adapter:in_startofpacket
	wire  [238:0] cmd_demux_src1_data;                                                                                       // cmd_demux:src1_data -> Arm_A9_HPS_h2f_axi_master_wr_to_VGA_Subsystem_pixel_dma_control_slave_cmd_width_adapter:in_data
	wire    [5:0] cmd_demux_src1_channel;                                                                                    // cmd_demux:src1_channel -> Arm_A9_HPS_h2f_axi_master_wr_to_VGA_Subsystem_pixel_dma_control_slave_cmd_width_adapter:in_channel
	wire          cmd_demux_src1_ready;                                                                                      // Arm_A9_HPS_h2f_axi_master_wr_to_VGA_Subsystem_pixel_dma_control_slave_cmd_width_adapter:in_ready -> cmd_demux:src1_ready
	wire          arm_a9_hps_h2f_axi_master_wr_to_vga_subsystem_pixel_dma_control_slave_cmd_width_adapter_src_endofpacket;   // Arm_A9_HPS_h2f_axi_master_wr_to_VGA_Subsystem_pixel_dma_control_slave_cmd_width_adapter:out_endofpacket -> cmd_mux_001:sink0_endofpacket
	wire          arm_a9_hps_h2f_axi_master_wr_to_vga_subsystem_pixel_dma_control_slave_cmd_width_adapter_src_valid;         // Arm_A9_HPS_h2f_axi_master_wr_to_VGA_Subsystem_pixel_dma_control_slave_cmd_width_adapter:out_valid -> cmd_mux_001:sink0_valid
	wire          arm_a9_hps_h2f_axi_master_wr_to_vga_subsystem_pixel_dma_control_slave_cmd_width_adapter_src_startofpacket; // Arm_A9_HPS_h2f_axi_master_wr_to_VGA_Subsystem_pixel_dma_control_slave_cmd_width_adapter:out_startofpacket -> cmd_mux_001:sink0_startofpacket
	wire  [130:0] arm_a9_hps_h2f_axi_master_wr_to_vga_subsystem_pixel_dma_control_slave_cmd_width_adapter_src_data;          // Arm_A9_HPS_h2f_axi_master_wr_to_VGA_Subsystem_pixel_dma_control_slave_cmd_width_adapter:out_data -> cmd_mux_001:sink0_data
	wire          arm_a9_hps_h2f_axi_master_wr_to_vga_subsystem_pixel_dma_control_slave_cmd_width_adapter_src_ready;         // cmd_mux_001:sink0_ready -> Arm_A9_HPS_h2f_axi_master_wr_to_VGA_Subsystem_pixel_dma_control_slave_cmd_width_adapter:out_ready
	wire    [5:0] arm_a9_hps_h2f_axi_master_wr_to_vga_subsystem_pixel_dma_control_slave_cmd_width_adapter_src_channel;       // Arm_A9_HPS_h2f_axi_master_wr_to_VGA_Subsystem_pixel_dma_control_slave_cmd_width_adapter:out_channel -> cmd_mux_001:sink0_channel
	wire          cmd_demux_001_src0_endofpacket;                                                                            // cmd_demux_001:src0_endofpacket -> Arm_A9_HPS_h2f_axi_master_rd_to_SDRAM_s1_cmd_width_adapter:in_endofpacket
	wire          cmd_demux_001_src0_valid;                                                                                  // cmd_demux_001:src0_valid -> Arm_A9_HPS_h2f_axi_master_rd_to_SDRAM_s1_cmd_width_adapter:in_valid
	wire          cmd_demux_001_src0_startofpacket;                                                                          // cmd_demux_001:src0_startofpacket -> Arm_A9_HPS_h2f_axi_master_rd_to_SDRAM_s1_cmd_width_adapter:in_startofpacket
	wire  [238:0] cmd_demux_001_src0_data;                                                                                   // cmd_demux_001:src0_data -> Arm_A9_HPS_h2f_axi_master_rd_to_SDRAM_s1_cmd_width_adapter:in_data
	wire    [5:0] cmd_demux_001_src0_channel;                                                                                // cmd_demux_001:src0_channel -> Arm_A9_HPS_h2f_axi_master_rd_to_SDRAM_s1_cmd_width_adapter:in_channel
	wire          cmd_demux_001_src0_ready;                                                                                  // Arm_A9_HPS_h2f_axi_master_rd_to_SDRAM_s1_cmd_width_adapter:in_ready -> cmd_demux_001:src0_ready
	wire          arm_a9_hps_h2f_axi_master_rd_to_sdram_s1_cmd_width_adapter_src_endofpacket;                                // Arm_A9_HPS_h2f_axi_master_rd_to_SDRAM_s1_cmd_width_adapter:out_endofpacket -> cmd_mux:sink1_endofpacket
	wire          arm_a9_hps_h2f_axi_master_rd_to_sdram_s1_cmd_width_adapter_src_valid;                                      // Arm_A9_HPS_h2f_axi_master_rd_to_SDRAM_s1_cmd_width_adapter:out_valid -> cmd_mux:sink1_valid
	wire          arm_a9_hps_h2f_axi_master_rd_to_sdram_s1_cmd_width_adapter_src_startofpacket;                              // Arm_A9_HPS_h2f_axi_master_rd_to_SDRAM_s1_cmd_width_adapter:out_startofpacket -> cmd_mux:sink1_startofpacket
	wire  [112:0] arm_a9_hps_h2f_axi_master_rd_to_sdram_s1_cmd_width_adapter_src_data;                                       // Arm_A9_HPS_h2f_axi_master_rd_to_SDRAM_s1_cmd_width_adapter:out_data -> cmd_mux:sink1_data
	wire          arm_a9_hps_h2f_axi_master_rd_to_sdram_s1_cmd_width_adapter_src_ready;                                      // cmd_mux:sink1_ready -> Arm_A9_HPS_h2f_axi_master_rd_to_SDRAM_s1_cmd_width_adapter:out_ready
	wire    [5:0] arm_a9_hps_h2f_axi_master_rd_to_sdram_s1_cmd_width_adapter_src_channel;                                    // Arm_A9_HPS_h2f_axi_master_rd_to_SDRAM_s1_cmd_width_adapter:out_channel -> cmd_mux:sink1_channel
	wire          cmd_demux_001_src1_endofpacket;                                                                            // cmd_demux_001:src1_endofpacket -> Arm_A9_HPS_h2f_axi_master_rd_to_VGA_Subsystem_pixel_dma_control_slave_cmd_width_adapter:in_endofpacket
	wire          cmd_demux_001_src1_valid;                                                                                  // cmd_demux_001:src1_valid -> Arm_A9_HPS_h2f_axi_master_rd_to_VGA_Subsystem_pixel_dma_control_slave_cmd_width_adapter:in_valid
	wire          cmd_demux_001_src1_startofpacket;                                                                          // cmd_demux_001:src1_startofpacket -> Arm_A9_HPS_h2f_axi_master_rd_to_VGA_Subsystem_pixel_dma_control_slave_cmd_width_adapter:in_startofpacket
	wire  [238:0] cmd_demux_001_src1_data;                                                                                   // cmd_demux_001:src1_data -> Arm_A9_HPS_h2f_axi_master_rd_to_VGA_Subsystem_pixel_dma_control_slave_cmd_width_adapter:in_data
	wire    [5:0] cmd_demux_001_src1_channel;                                                                                // cmd_demux_001:src1_channel -> Arm_A9_HPS_h2f_axi_master_rd_to_VGA_Subsystem_pixel_dma_control_slave_cmd_width_adapter:in_channel
	wire          cmd_demux_001_src1_ready;                                                                                  // Arm_A9_HPS_h2f_axi_master_rd_to_VGA_Subsystem_pixel_dma_control_slave_cmd_width_adapter:in_ready -> cmd_demux_001:src1_ready
	wire          arm_a9_hps_h2f_axi_master_rd_to_vga_subsystem_pixel_dma_control_slave_cmd_width_adapter_src_endofpacket;   // Arm_A9_HPS_h2f_axi_master_rd_to_VGA_Subsystem_pixel_dma_control_slave_cmd_width_adapter:out_endofpacket -> cmd_mux_001:sink1_endofpacket
	wire          arm_a9_hps_h2f_axi_master_rd_to_vga_subsystem_pixel_dma_control_slave_cmd_width_adapter_src_valid;         // Arm_A9_HPS_h2f_axi_master_rd_to_VGA_Subsystem_pixel_dma_control_slave_cmd_width_adapter:out_valid -> cmd_mux_001:sink1_valid
	wire          arm_a9_hps_h2f_axi_master_rd_to_vga_subsystem_pixel_dma_control_slave_cmd_width_adapter_src_startofpacket; // Arm_A9_HPS_h2f_axi_master_rd_to_VGA_Subsystem_pixel_dma_control_slave_cmd_width_adapter:out_startofpacket -> cmd_mux_001:sink1_startofpacket
	wire  [130:0] arm_a9_hps_h2f_axi_master_rd_to_vga_subsystem_pixel_dma_control_slave_cmd_width_adapter_src_data;          // Arm_A9_HPS_h2f_axi_master_rd_to_VGA_Subsystem_pixel_dma_control_slave_cmd_width_adapter:out_data -> cmd_mux_001:sink1_data
	wire          arm_a9_hps_h2f_axi_master_rd_to_vga_subsystem_pixel_dma_control_slave_cmd_width_adapter_src_ready;         // cmd_mux_001:sink1_ready -> Arm_A9_HPS_h2f_axi_master_rd_to_VGA_Subsystem_pixel_dma_control_slave_cmd_width_adapter:out_ready
	wire    [5:0] arm_a9_hps_h2f_axi_master_rd_to_vga_subsystem_pixel_dma_control_slave_cmd_width_adapter_src_channel;       // Arm_A9_HPS_h2f_axi_master_rd_to_VGA_Subsystem_pixel_dma_control_slave_cmd_width_adapter:out_channel -> cmd_mux_001:sink1_channel
	wire          cmd_demux_002_src0_endofpacket;                                                                            // cmd_demux_002:src0_endofpacket -> JTAG_to_FPGA_Bridge_master_to_SDRAM_s1_cmd_width_adapter:in_endofpacket
	wire          cmd_demux_002_src0_valid;                                                                                  // cmd_demux_002:src0_valid -> JTAG_to_FPGA_Bridge_master_to_SDRAM_s1_cmd_width_adapter:in_valid
	wire          cmd_demux_002_src0_startofpacket;                                                                          // cmd_demux_002:src0_startofpacket -> JTAG_to_FPGA_Bridge_master_to_SDRAM_s1_cmd_width_adapter:in_startofpacket
	wire  [130:0] cmd_demux_002_src0_data;                                                                                   // cmd_demux_002:src0_data -> JTAG_to_FPGA_Bridge_master_to_SDRAM_s1_cmd_width_adapter:in_data
	wire    [5:0] cmd_demux_002_src0_channel;                                                                                // cmd_demux_002:src0_channel -> JTAG_to_FPGA_Bridge_master_to_SDRAM_s1_cmd_width_adapter:in_channel
	wire          cmd_demux_002_src0_ready;                                                                                  // JTAG_to_FPGA_Bridge_master_to_SDRAM_s1_cmd_width_adapter:in_ready -> cmd_demux_002:src0_ready
	wire          jtag_to_fpga_bridge_master_to_sdram_s1_cmd_width_adapter_src_endofpacket;                                  // JTAG_to_FPGA_Bridge_master_to_SDRAM_s1_cmd_width_adapter:out_endofpacket -> cmd_mux:sink2_endofpacket
	wire          jtag_to_fpga_bridge_master_to_sdram_s1_cmd_width_adapter_src_valid;                                        // JTAG_to_FPGA_Bridge_master_to_SDRAM_s1_cmd_width_adapter:out_valid -> cmd_mux:sink2_valid
	wire          jtag_to_fpga_bridge_master_to_sdram_s1_cmd_width_adapter_src_startofpacket;                                // JTAG_to_FPGA_Bridge_master_to_SDRAM_s1_cmd_width_adapter:out_startofpacket -> cmd_mux:sink2_startofpacket
	wire  [112:0] jtag_to_fpga_bridge_master_to_sdram_s1_cmd_width_adapter_src_data;                                         // JTAG_to_FPGA_Bridge_master_to_SDRAM_s1_cmd_width_adapter:out_data -> cmd_mux:sink2_data
	wire          jtag_to_fpga_bridge_master_to_sdram_s1_cmd_width_adapter_src_ready;                                        // cmd_mux:sink2_ready -> JTAG_to_FPGA_Bridge_master_to_SDRAM_s1_cmd_width_adapter:out_ready
	wire    [5:0] jtag_to_fpga_bridge_master_to_sdram_s1_cmd_width_adapter_src_channel;                                      // JTAG_to_FPGA_Bridge_master_to_SDRAM_s1_cmd_width_adapter:out_channel -> cmd_mux:sink2_channel
	wire          rsp_demux_src0_endofpacket;                                                                                // rsp_demux:src0_endofpacket -> SDRAM_s1_to_Arm_A9_HPS_h2f_axi_master_wr_rsp_width_adapter:in_endofpacket
	wire          rsp_demux_src0_valid;                                                                                      // rsp_demux:src0_valid -> SDRAM_s1_to_Arm_A9_HPS_h2f_axi_master_wr_rsp_width_adapter:in_valid
	wire          rsp_demux_src0_startofpacket;                                                                              // rsp_demux:src0_startofpacket -> SDRAM_s1_to_Arm_A9_HPS_h2f_axi_master_wr_rsp_width_adapter:in_startofpacket
	wire  [112:0] rsp_demux_src0_data;                                                                                       // rsp_demux:src0_data -> SDRAM_s1_to_Arm_A9_HPS_h2f_axi_master_wr_rsp_width_adapter:in_data
	wire    [5:0] rsp_demux_src0_channel;                                                                                    // rsp_demux:src0_channel -> SDRAM_s1_to_Arm_A9_HPS_h2f_axi_master_wr_rsp_width_adapter:in_channel
	wire          rsp_demux_src0_ready;                                                                                      // SDRAM_s1_to_Arm_A9_HPS_h2f_axi_master_wr_rsp_width_adapter:in_ready -> rsp_demux:src0_ready
	wire          sdram_s1_to_arm_a9_hps_h2f_axi_master_wr_rsp_width_adapter_src_endofpacket;                                // SDRAM_s1_to_Arm_A9_HPS_h2f_axi_master_wr_rsp_width_adapter:out_endofpacket -> rsp_mux:sink0_endofpacket
	wire          sdram_s1_to_arm_a9_hps_h2f_axi_master_wr_rsp_width_adapter_src_valid;                                      // SDRAM_s1_to_Arm_A9_HPS_h2f_axi_master_wr_rsp_width_adapter:out_valid -> rsp_mux:sink0_valid
	wire          sdram_s1_to_arm_a9_hps_h2f_axi_master_wr_rsp_width_adapter_src_startofpacket;                              // SDRAM_s1_to_Arm_A9_HPS_h2f_axi_master_wr_rsp_width_adapter:out_startofpacket -> rsp_mux:sink0_startofpacket
	wire  [238:0] sdram_s1_to_arm_a9_hps_h2f_axi_master_wr_rsp_width_adapter_src_data;                                       // SDRAM_s1_to_Arm_A9_HPS_h2f_axi_master_wr_rsp_width_adapter:out_data -> rsp_mux:sink0_data
	wire          sdram_s1_to_arm_a9_hps_h2f_axi_master_wr_rsp_width_adapter_src_ready;                                      // rsp_mux:sink0_ready -> SDRAM_s1_to_Arm_A9_HPS_h2f_axi_master_wr_rsp_width_adapter:out_ready
	wire    [5:0] sdram_s1_to_arm_a9_hps_h2f_axi_master_wr_rsp_width_adapter_src_channel;                                    // SDRAM_s1_to_Arm_A9_HPS_h2f_axi_master_wr_rsp_width_adapter:out_channel -> rsp_mux:sink0_channel
	wire          rsp_demux_src1_endofpacket;                                                                                // rsp_demux:src1_endofpacket -> SDRAM_s1_to_Arm_A9_HPS_h2f_axi_master_rd_rsp_width_adapter:in_endofpacket
	wire          rsp_demux_src1_valid;                                                                                      // rsp_demux:src1_valid -> SDRAM_s1_to_Arm_A9_HPS_h2f_axi_master_rd_rsp_width_adapter:in_valid
	wire          rsp_demux_src1_startofpacket;                                                                              // rsp_demux:src1_startofpacket -> SDRAM_s1_to_Arm_A9_HPS_h2f_axi_master_rd_rsp_width_adapter:in_startofpacket
	wire  [112:0] rsp_demux_src1_data;                                                                                       // rsp_demux:src1_data -> SDRAM_s1_to_Arm_A9_HPS_h2f_axi_master_rd_rsp_width_adapter:in_data
	wire    [5:0] rsp_demux_src1_channel;                                                                                    // rsp_demux:src1_channel -> SDRAM_s1_to_Arm_A9_HPS_h2f_axi_master_rd_rsp_width_adapter:in_channel
	wire          rsp_demux_src1_ready;                                                                                      // SDRAM_s1_to_Arm_A9_HPS_h2f_axi_master_rd_rsp_width_adapter:in_ready -> rsp_demux:src1_ready
	wire          sdram_s1_to_arm_a9_hps_h2f_axi_master_rd_rsp_width_adapter_src_endofpacket;                                // SDRAM_s1_to_Arm_A9_HPS_h2f_axi_master_rd_rsp_width_adapter:out_endofpacket -> rsp_mux_001:sink0_endofpacket
	wire          sdram_s1_to_arm_a9_hps_h2f_axi_master_rd_rsp_width_adapter_src_valid;                                      // SDRAM_s1_to_Arm_A9_HPS_h2f_axi_master_rd_rsp_width_adapter:out_valid -> rsp_mux_001:sink0_valid
	wire          sdram_s1_to_arm_a9_hps_h2f_axi_master_rd_rsp_width_adapter_src_startofpacket;                              // SDRAM_s1_to_Arm_A9_HPS_h2f_axi_master_rd_rsp_width_adapter:out_startofpacket -> rsp_mux_001:sink0_startofpacket
	wire  [238:0] sdram_s1_to_arm_a9_hps_h2f_axi_master_rd_rsp_width_adapter_src_data;                                       // SDRAM_s1_to_Arm_A9_HPS_h2f_axi_master_rd_rsp_width_adapter:out_data -> rsp_mux_001:sink0_data
	wire          sdram_s1_to_arm_a9_hps_h2f_axi_master_rd_rsp_width_adapter_src_ready;                                      // rsp_mux_001:sink0_ready -> SDRAM_s1_to_Arm_A9_HPS_h2f_axi_master_rd_rsp_width_adapter:out_ready
	wire    [5:0] sdram_s1_to_arm_a9_hps_h2f_axi_master_rd_rsp_width_adapter_src_channel;                                    // SDRAM_s1_to_Arm_A9_HPS_h2f_axi_master_rd_rsp_width_adapter:out_channel -> rsp_mux_001:sink0_channel
	wire          rsp_demux_src2_endofpacket;                                                                                // rsp_demux:src2_endofpacket -> SDRAM_s1_to_JTAG_to_FPGA_Bridge_master_rsp_width_adapter:in_endofpacket
	wire          rsp_demux_src2_valid;                                                                                      // rsp_demux:src2_valid -> SDRAM_s1_to_JTAG_to_FPGA_Bridge_master_rsp_width_adapter:in_valid
	wire          rsp_demux_src2_startofpacket;                                                                              // rsp_demux:src2_startofpacket -> SDRAM_s1_to_JTAG_to_FPGA_Bridge_master_rsp_width_adapter:in_startofpacket
	wire  [112:0] rsp_demux_src2_data;                                                                                       // rsp_demux:src2_data -> SDRAM_s1_to_JTAG_to_FPGA_Bridge_master_rsp_width_adapter:in_data
	wire    [5:0] rsp_demux_src2_channel;                                                                                    // rsp_demux:src2_channel -> SDRAM_s1_to_JTAG_to_FPGA_Bridge_master_rsp_width_adapter:in_channel
	wire          rsp_demux_src2_ready;                                                                                      // SDRAM_s1_to_JTAG_to_FPGA_Bridge_master_rsp_width_adapter:in_ready -> rsp_demux:src2_ready
	wire          sdram_s1_to_jtag_to_fpga_bridge_master_rsp_width_adapter_src_endofpacket;                                  // SDRAM_s1_to_JTAG_to_FPGA_Bridge_master_rsp_width_adapter:out_endofpacket -> rsp_mux_002:sink0_endofpacket
	wire          sdram_s1_to_jtag_to_fpga_bridge_master_rsp_width_adapter_src_valid;                                        // SDRAM_s1_to_JTAG_to_FPGA_Bridge_master_rsp_width_adapter:out_valid -> rsp_mux_002:sink0_valid
	wire          sdram_s1_to_jtag_to_fpga_bridge_master_rsp_width_adapter_src_startofpacket;                                // SDRAM_s1_to_JTAG_to_FPGA_Bridge_master_rsp_width_adapter:out_startofpacket -> rsp_mux_002:sink0_startofpacket
	wire  [130:0] sdram_s1_to_jtag_to_fpga_bridge_master_rsp_width_adapter_src_data;                                         // SDRAM_s1_to_JTAG_to_FPGA_Bridge_master_rsp_width_adapter:out_data -> rsp_mux_002:sink0_data
	wire          sdram_s1_to_jtag_to_fpga_bridge_master_rsp_width_adapter_src_ready;                                        // rsp_mux_002:sink0_ready -> SDRAM_s1_to_JTAG_to_FPGA_Bridge_master_rsp_width_adapter:out_ready
	wire    [5:0] sdram_s1_to_jtag_to_fpga_bridge_master_rsp_width_adapter_src_channel;                                      // SDRAM_s1_to_JTAG_to_FPGA_Bridge_master_rsp_width_adapter:out_channel -> rsp_mux_002:sink0_channel
	wire          rsp_demux_001_src0_endofpacket;                                                                            // rsp_demux_001:src0_endofpacket -> VGA_Subsystem_pixel_dma_control_slave_to_Arm_A9_HPS_h2f_axi_master_wr_rsp_width_adapter:in_endofpacket
	wire          rsp_demux_001_src0_valid;                                                                                  // rsp_demux_001:src0_valid -> VGA_Subsystem_pixel_dma_control_slave_to_Arm_A9_HPS_h2f_axi_master_wr_rsp_width_adapter:in_valid
	wire          rsp_demux_001_src0_startofpacket;                                                                          // rsp_demux_001:src0_startofpacket -> VGA_Subsystem_pixel_dma_control_slave_to_Arm_A9_HPS_h2f_axi_master_wr_rsp_width_adapter:in_startofpacket
	wire  [130:0] rsp_demux_001_src0_data;                                                                                   // rsp_demux_001:src0_data -> VGA_Subsystem_pixel_dma_control_slave_to_Arm_A9_HPS_h2f_axi_master_wr_rsp_width_adapter:in_data
	wire    [5:0] rsp_demux_001_src0_channel;                                                                                // rsp_demux_001:src0_channel -> VGA_Subsystem_pixel_dma_control_slave_to_Arm_A9_HPS_h2f_axi_master_wr_rsp_width_adapter:in_channel
	wire          rsp_demux_001_src0_ready;                                                                                  // VGA_Subsystem_pixel_dma_control_slave_to_Arm_A9_HPS_h2f_axi_master_wr_rsp_width_adapter:in_ready -> rsp_demux_001:src0_ready
	wire          vga_subsystem_pixel_dma_control_slave_to_arm_a9_hps_h2f_axi_master_wr_rsp_width_adapter_src_endofpacket;   // VGA_Subsystem_pixel_dma_control_slave_to_Arm_A9_HPS_h2f_axi_master_wr_rsp_width_adapter:out_endofpacket -> rsp_mux:sink1_endofpacket
	wire          vga_subsystem_pixel_dma_control_slave_to_arm_a9_hps_h2f_axi_master_wr_rsp_width_adapter_src_valid;         // VGA_Subsystem_pixel_dma_control_slave_to_Arm_A9_HPS_h2f_axi_master_wr_rsp_width_adapter:out_valid -> rsp_mux:sink1_valid
	wire          vga_subsystem_pixel_dma_control_slave_to_arm_a9_hps_h2f_axi_master_wr_rsp_width_adapter_src_startofpacket; // VGA_Subsystem_pixel_dma_control_slave_to_Arm_A9_HPS_h2f_axi_master_wr_rsp_width_adapter:out_startofpacket -> rsp_mux:sink1_startofpacket
	wire  [238:0] vga_subsystem_pixel_dma_control_slave_to_arm_a9_hps_h2f_axi_master_wr_rsp_width_adapter_src_data;          // VGA_Subsystem_pixel_dma_control_slave_to_Arm_A9_HPS_h2f_axi_master_wr_rsp_width_adapter:out_data -> rsp_mux:sink1_data
	wire          vga_subsystem_pixel_dma_control_slave_to_arm_a9_hps_h2f_axi_master_wr_rsp_width_adapter_src_ready;         // rsp_mux:sink1_ready -> VGA_Subsystem_pixel_dma_control_slave_to_Arm_A9_HPS_h2f_axi_master_wr_rsp_width_adapter:out_ready
	wire    [5:0] vga_subsystem_pixel_dma_control_slave_to_arm_a9_hps_h2f_axi_master_wr_rsp_width_adapter_src_channel;       // VGA_Subsystem_pixel_dma_control_slave_to_Arm_A9_HPS_h2f_axi_master_wr_rsp_width_adapter:out_channel -> rsp_mux:sink1_channel
	wire          rsp_demux_001_src1_endofpacket;                                                                            // rsp_demux_001:src1_endofpacket -> VGA_Subsystem_pixel_dma_control_slave_to_Arm_A9_HPS_h2f_axi_master_rd_rsp_width_adapter:in_endofpacket
	wire          rsp_demux_001_src1_valid;                                                                                  // rsp_demux_001:src1_valid -> VGA_Subsystem_pixel_dma_control_slave_to_Arm_A9_HPS_h2f_axi_master_rd_rsp_width_adapter:in_valid
	wire          rsp_demux_001_src1_startofpacket;                                                                          // rsp_demux_001:src1_startofpacket -> VGA_Subsystem_pixel_dma_control_slave_to_Arm_A9_HPS_h2f_axi_master_rd_rsp_width_adapter:in_startofpacket
	wire  [130:0] rsp_demux_001_src1_data;                                                                                   // rsp_demux_001:src1_data -> VGA_Subsystem_pixel_dma_control_slave_to_Arm_A9_HPS_h2f_axi_master_rd_rsp_width_adapter:in_data
	wire    [5:0] rsp_demux_001_src1_channel;                                                                                // rsp_demux_001:src1_channel -> VGA_Subsystem_pixel_dma_control_slave_to_Arm_A9_HPS_h2f_axi_master_rd_rsp_width_adapter:in_channel
	wire          rsp_demux_001_src1_ready;                                                                                  // VGA_Subsystem_pixel_dma_control_slave_to_Arm_A9_HPS_h2f_axi_master_rd_rsp_width_adapter:in_ready -> rsp_demux_001:src1_ready
	wire          vga_subsystem_pixel_dma_control_slave_to_arm_a9_hps_h2f_axi_master_rd_rsp_width_adapter_src_endofpacket;   // VGA_Subsystem_pixel_dma_control_slave_to_Arm_A9_HPS_h2f_axi_master_rd_rsp_width_adapter:out_endofpacket -> rsp_mux_001:sink1_endofpacket
	wire          vga_subsystem_pixel_dma_control_slave_to_arm_a9_hps_h2f_axi_master_rd_rsp_width_adapter_src_valid;         // VGA_Subsystem_pixel_dma_control_slave_to_Arm_A9_HPS_h2f_axi_master_rd_rsp_width_adapter:out_valid -> rsp_mux_001:sink1_valid
	wire          vga_subsystem_pixel_dma_control_slave_to_arm_a9_hps_h2f_axi_master_rd_rsp_width_adapter_src_startofpacket; // VGA_Subsystem_pixel_dma_control_slave_to_Arm_A9_HPS_h2f_axi_master_rd_rsp_width_adapter:out_startofpacket -> rsp_mux_001:sink1_startofpacket
	wire  [238:0] vga_subsystem_pixel_dma_control_slave_to_arm_a9_hps_h2f_axi_master_rd_rsp_width_adapter_src_data;          // VGA_Subsystem_pixel_dma_control_slave_to_Arm_A9_HPS_h2f_axi_master_rd_rsp_width_adapter:out_data -> rsp_mux_001:sink1_data
	wire          vga_subsystem_pixel_dma_control_slave_to_arm_a9_hps_h2f_axi_master_rd_rsp_width_adapter_src_ready;         // rsp_mux_001:sink1_ready -> VGA_Subsystem_pixel_dma_control_slave_to_Arm_A9_HPS_h2f_axi_master_rd_rsp_width_adapter:out_ready
	wire    [5:0] vga_subsystem_pixel_dma_control_slave_to_arm_a9_hps_h2f_axi_master_rd_rsp_width_adapter_src_channel;       // VGA_Subsystem_pixel_dma_control_slave_to_Arm_A9_HPS_h2f_axi_master_rd_rsp_width_adapter:out_channel -> rsp_mux_001:sink1_channel
	wire    [5:0] arm_a9_hps_h2f_axi_master_wr_limiter_cmd_valid_data;                                                       // Arm_A9_HPS_h2f_axi_master_wr_limiter:cmd_src_valid -> cmd_demux:sink_valid
	wire    [5:0] arm_a9_hps_h2f_axi_master_rd_limiter_cmd_valid_data;                                                       // Arm_A9_HPS_h2f_axi_master_rd_limiter:cmd_src_valid -> cmd_demux_001:sink_valid
	wire    [5:0] jtag_to_fpga_bridge_master_limiter_cmd_valid_data;                                                         // JTAG_to_FPGA_Bridge_master_limiter:cmd_src_valid -> cmd_demux_002:sink_valid
	wire    [5:0] arm_a9_hps_h2f_lw_axi_master_wr_limiter_cmd_valid_data;                                                    // Arm_A9_HPS_h2f_lw_axi_master_wr_limiter:cmd_src_valid -> cmd_demux_003:sink_valid
	wire    [5:0] arm_a9_hps_h2f_lw_axi_master_rd_limiter_cmd_valid_data;                                                    // Arm_A9_HPS_h2f_lw_axi_master_rd_limiter:cmd_src_valid -> cmd_demux_004:sink_valid

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (32),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (32),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) jtag_to_fpga_bridge_master_translator (
		.clk                      (System_PLL_sys_clk_clk),                                                        //                       clk.clk
		.reset                    (SDRAM_reset_reset_bridge_in_reset_reset),                                       //                     reset.reset
		.uav_address              (jtag_to_fpga_bridge_master_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount           (jtag_to_fpga_bridge_master_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read                 (jtag_to_fpga_bridge_master_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write                (jtag_to_fpga_bridge_master_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest          (jtag_to_fpga_bridge_master_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid        (jtag_to_fpga_bridge_master_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable           (jtag_to_fpga_bridge_master_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata             (jtag_to_fpga_bridge_master_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata            (jtag_to_fpga_bridge_master_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock                 (jtag_to_fpga_bridge_master_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess          (jtag_to_fpga_bridge_master_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address               (JTAG_to_FPGA_Bridge_master_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest           (JTAG_to_FPGA_Bridge_master_waitrequest),                                        //                          .waitrequest
		.av_byteenable            (JTAG_to_FPGA_Bridge_master_byteenable),                                         //                          .byteenable
		.av_read                  (JTAG_to_FPGA_Bridge_master_read),                                               //                          .read
		.av_readdata              (JTAG_to_FPGA_Bridge_master_readdata),                                           //                          .readdata
		.av_readdatavalid         (JTAG_to_FPGA_Bridge_master_readdatavalid),                                      //                          .readdatavalid
		.av_write                 (JTAG_to_FPGA_Bridge_master_write),                                              //                          .write
		.av_writedata             (JTAG_to_FPGA_Bridge_master_writedata),                                          //                          .writedata
		.av_burstcount            (1'b1),                                                                          //               (terminated)
		.av_beginbursttransfer    (1'b0),                                                                          //               (terminated)
		.av_begintransfer         (1'b0),                                                                          //               (terminated)
		.av_chipselect            (1'b0),                                                                          //               (terminated)
		.av_lock                  (1'b0),                                                                          //               (terminated)
		.av_debugaccess           (1'b0),                                                                          //               (terminated)
		.uav_clken                (),                                                                              //               (terminated)
		.av_clken                 (1'b1),                                                                          //               (terminated)
		.uav_response             (2'b00),                                                                         //               (terminated)
		.av_response              (),                                                                              //               (terminated)
		.uav_writeresponserequest (),                                                                              //               (terminated)
		.uav_writeresponsevalid   (1'b0),                                                                          //               (terminated)
		.av_writeresponserequest  (1'b0),                                                                          //               (terminated)
		.av_writeresponsevalid    ()                                                                               //               (terminated)
	);

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (32),
		.AV_DATA_W                   (16),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (2),
		.UAV_ADDRESS_W               (32),
		.UAV_BURSTCOUNT_W            (2),
		.USE_READ                    (1),
		.USE_WRITE                   (0),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (2),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) vga_subsystem_pixel_dma_master_translator (
		.clk                      (System_PLL_sys_clk_clk),                                                            //                       clk.clk
		.reset                    (SDRAM_reset_reset_bridge_in_reset_reset),                                           //                     reset.reset
		.uav_address              (vga_subsystem_pixel_dma_master_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount           (vga_subsystem_pixel_dma_master_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read                 (vga_subsystem_pixel_dma_master_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write                (vga_subsystem_pixel_dma_master_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest          (vga_subsystem_pixel_dma_master_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid        (vga_subsystem_pixel_dma_master_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable           (vga_subsystem_pixel_dma_master_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata             (vga_subsystem_pixel_dma_master_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata            (vga_subsystem_pixel_dma_master_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock                 (vga_subsystem_pixel_dma_master_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess          (vga_subsystem_pixel_dma_master_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address               (VGA_Subsystem_pixel_dma_master_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest           (VGA_Subsystem_pixel_dma_master_waitrequest),                                        //                          .waitrequest
		.av_read                  (VGA_Subsystem_pixel_dma_master_read),                                               //                          .read
		.av_readdata              (VGA_Subsystem_pixel_dma_master_readdata),                                           //                          .readdata
		.av_readdatavalid         (VGA_Subsystem_pixel_dma_master_readdatavalid),                                      //                          .readdatavalid
		.av_lock                  (VGA_Subsystem_pixel_dma_master_lock),                                               //                          .lock
		.av_burstcount            (1'b1),                                                                              //               (terminated)
		.av_byteenable            (2'b11),                                                                             //               (terminated)
		.av_beginbursttransfer    (1'b0),                                                                              //               (terminated)
		.av_begintransfer         (1'b0),                                                                              //               (terminated)
		.av_chipselect            (1'b0),                                                                              //               (terminated)
		.av_write                 (1'b0),                                                                              //               (terminated)
		.av_writedata             (16'b0000000000000000),                                                              //               (terminated)
		.av_debugaccess           (1'b0),                                                                              //               (terminated)
		.uav_clken                (),                                                                                  //               (terminated)
		.av_clken                 (1'b1),                                                                              //               (terminated)
		.uav_response             (2'b00),                                                                             //               (terminated)
		.av_response              (),                                                                                  //               (terminated)
		.uav_writeresponserequest (),                                                                                  //               (terminated)
		.uav_writeresponsevalid   (1'b0),                                                                              //               (terminated)
		.av_writeresponserequest  (1'b0),                                                                              //               (terminated)
		.av_writeresponsevalid    ()                                                                                   //               (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (24),
		.AV_DATA_W                      (16),
		.UAV_DATA_W                     (16),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (2),
		.UAV_BYTEENABLE_W               (2),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (2),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (1),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (2),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) sdram_s1_translator (
		.clk                      (System_PLL_sys_clk_clk),                  //                      clk.clk
		.reset                    (SDRAM_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address              (sdram_s1_agent_m0_address),               // avalon_universal_slave_0.address
		.uav_burstcount           (sdram_s1_agent_m0_burstcount),            //                         .burstcount
		.uav_read                 (sdram_s1_agent_m0_read),                  //                         .read
		.uav_write                (sdram_s1_agent_m0_write),                 //                         .write
		.uav_waitrequest          (sdram_s1_agent_m0_waitrequest),           //                         .waitrequest
		.uav_readdatavalid        (sdram_s1_agent_m0_readdatavalid),         //                         .readdatavalid
		.uav_byteenable           (sdram_s1_agent_m0_byteenable),            //                         .byteenable
		.uav_readdata             (sdram_s1_agent_m0_readdata),              //                         .readdata
		.uav_writedata            (sdram_s1_agent_m0_writedata),             //                         .writedata
		.uav_lock                 (sdram_s1_agent_m0_lock),                  //                         .lock
		.uav_debugaccess          (sdram_s1_agent_m0_debugaccess),           //                         .debugaccess
		.av_address               (SDRAM_s1_address),                        //      avalon_anti_slave_0.address
		.av_write                 (SDRAM_s1_write),                          //                         .write
		.av_read                  (SDRAM_s1_read),                           //                         .read
		.av_readdata              (SDRAM_s1_readdata),                       //                         .readdata
		.av_writedata             (SDRAM_s1_writedata),                      //                         .writedata
		.av_byteenable            (SDRAM_s1_byteenable),                     //                         .byteenable
		.av_readdatavalid         (SDRAM_s1_readdatavalid),                  //                         .readdatavalid
		.av_waitrequest           (SDRAM_s1_waitrequest),                    //                         .waitrequest
		.av_chipselect            (SDRAM_s1_chipselect),                     //                         .chipselect
		.av_begintransfer         (),                                        //              (terminated)
		.av_beginbursttransfer    (),                                        //              (terminated)
		.av_burstcount            (),                                        //              (terminated)
		.av_writebyteenable       (),                                        //              (terminated)
		.av_lock                  (),                                        //              (terminated)
		.av_clken                 (),                                        //              (terminated)
		.uav_clken                (1'b0),                                    //              (terminated)
		.av_debugaccess           (),                                        //              (terminated)
		.av_outputenable          (),                                        //              (terminated)
		.uav_response             (),                                        //              (terminated)
		.av_response              (2'b00),                                   //              (terminated)
		.uav_writeresponserequest (1'b0),                                    //              (terminated)
		.uav_writeresponsevalid   (),                                        //              (terminated)
		.av_writeresponserequest  (),                                        //              (terminated)
		.av_writeresponsevalid    (1'b0)                                     //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) vga_subsystem_pixel_dma_control_slave_translator (
		.clk                      (System_PLL_sys_clk_clk),                                       //                      clk.clk
		.reset                    (SDRAM_reset_reset_bridge_in_reset_reset),                      //                    reset.reset
		.uav_address              (vga_subsystem_pixel_dma_control_slave_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount           (vga_subsystem_pixel_dma_control_slave_agent_m0_burstcount),    //                         .burstcount
		.uav_read                 (vga_subsystem_pixel_dma_control_slave_agent_m0_read),          //                         .read
		.uav_write                (vga_subsystem_pixel_dma_control_slave_agent_m0_write),         //                         .write
		.uav_waitrequest          (vga_subsystem_pixel_dma_control_slave_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid        (vga_subsystem_pixel_dma_control_slave_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable           (vga_subsystem_pixel_dma_control_slave_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata             (vga_subsystem_pixel_dma_control_slave_agent_m0_readdata),      //                         .readdata
		.uav_writedata            (vga_subsystem_pixel_dma_control_slave_agent_m0_writedata),     //                         .writedata
		.uav_lock                 (vga_subsystem_pixel_dma_control_slave_agent_m0_lock),          //                         .lock
		.uav_debugaccess          (vga_subsystem_pixel_dma_control_slave_agent_m0_debugaccess),   //                         .debugaccess
		.av_address               (VGA_Subsystem_pixel_dma_control_slave_address),                //      avalon_anti_slave_0.address
		.av_write                 (VGA_Subsystem_pixel_dma_control_slave_write),                  //                         .write
		.av_read                  (VGA_Subsystem_pixel_dma_control_slave_read),                   //                         .read
		.av_readdata              (VGA_Subsystem_pixel_dma_control_slave_readdata),               //                         .readdata
		.av_writedata             (VGA_Subsystem_pixel_dma_control_slave_writedata),              //                         .writedata
		.av_byteenable            (VGA_Subsystem_pixel_dma_control_slave_byteenable),             //                         .byteenable
		.av_begintransfer         (),                                                             //              (terminated)
		.av_beginbursttransfer    (),                                                             //              (terminated)
		.av_burstcount            (),                                                             //              (terminated)
		.av_readdatavalid         (1'b0),                                                         //              (terminated)
		.av_waitrequest           (1'b0),                                                         //              (terminated)
		.av_writebyteenable       (),                                                             //              (terminated)
		.av_lock                  (),                                                             //              (terminated)
		.av_chipselect            (),                                                             //              (terminated)
		.av_clken                 (),                                                             //              (terminated)
		.uav_clken                (1'b0),                                                         //              (terminated)
		.av_debugaccess           (),                                                             //              (terminated)
		.av_outputenable          (),                                                             //              (terminated)
		.uav_response             (),                                                             //              (terminated)
		.av_response              (2'b00),                                                        //              (terminated)
		.uav_writeresponserequest (1'b0),                                                         //              (terminated)
		.uav_writeresponsevalid   (),                                                             //              (terminated)
		.av_writeresponserequest  (),                                                             //              (terminated)
		.av_writeresponsevalid    (1'b0)                                                          //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) jtag_uart_avalon_jtag_slave_translator (
		.clk                      (System_PLL_sys_clk_clk),                             //                      clk.clk
		.reset                    (SDRAM_reset_reset_bridge_in_reset_reset),            //                    reset.reset
		.uav_address              (jtag_uart_avalon_jtag_slave_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount           (jtag_uart_avalon_jtag_slave_agent_m0_burstcount),    //                         .burstcount
		.uav_read                 (jtag_uart_avalon_jtag_slave_agent_m0_read),          //                         .read
		.uav_write                (jtag_uart_avalon_jtag_slave_agent_m0_write),         //                         .write
		.uav_waitrequest          (jtag_uart_avalon_jtag_slave_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid        (jtag_uart_avalon_jtag_slave_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable           (jtag_uart_avalon_jtag_slave_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata             (jtag_uart_avalon_jtag_slave_agent_m0_readdata),      //                         .readdata
		.uav_writedata            (jtag_uart_avalon_jtag_slave_agent_m0_writedata),     //                         .writedata
		.uav_lock                 (jtag_uart_avalon_jtag_slave_agent_m0_lock),          //                         .lock
		.uav_debugaccess          (jtag_uart_avalon_jtag_slave_agent_m0_debugaccess),   //                         .debugaccess
		.av_address               (JTAG_UART_avalon_jtag_slave_address),                //      avalon_anti_slave_0.address
		.av_write                 (JTAG_UART_avalon_jtag_slave_write),                  //                         .write
		.av_read                  (JTAG_UART_avalon_jtag_slave_read),                   //                         .read
		.av_readdata              (JTAG_UART_avalon_jtag_slave_readdata),               //                         .readdata
		.av_writedata             (JTAG_UART_avalon_jtag_slave_writedata),              //                         .writedata
		.av_waitrequest           (JTAG_UART_avalon_jtag_slave_waitrequest),            //                         .waitrequest
		.av_chipselect            (JTAG_UART_avalon_jtag_slave_chipselect),             //                         .chipselect
		.av_begintransfer         (),                                                   //              (terminated)
		.av_beginbursttransfer    (),                                                   //              (terminated)
		.av_burstcount            (),                                                   //              (terminated)
		.av_byteenable            (),                                                   //              (terminated)
		.av_readdatavalid         (1'b0),                                               //              (terminated)
		.av_writebyteenable       (),                                                   //              (terminated)
		.av_lock                  (),                                                   //              (terminated)
		.av_clken                 (),                                                   //              (terminated)
		.uav_clken                (1'b0),                                               //              (terminated)
		.av_debugaccess           (),                                                   //              (terminated)
		.av_outputenable          (),                                                   //              (terminated)
		.uav_response             (),                                                   //              (terminated)
		.av_response              (2'b00),                                              //              (terminated)
		.uav_writeresponserequest (1'b0),                                               //              (terminated)
		.uav_writeresponsevalid   (),                                                   //              (terminated)
		.av_writeresponserequest  (),                                                   //              (terminated)
		.av_writeresponsevalid    (1'b0)                                                //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (3),
		.AV_DATA_W                      (16),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) interval_timer_s1_translator (
		.clk                      (System_PLL_sys_clk_clk),                   //                      clk.clk
		.reset                    (SDRAM_reset_reset_bridge_in_reset_reset),  //                    reset.reset
		.uav_address              (interval_timer_s1_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount           (interval_timer_s1_agent_m0_burstcount),    //                         .burstcount
		.uav_read                 (interval_timer_s1_agent_m0_read),          //                         .read
		.uav_write                (interval_timer_s1_agent_m0_write),         //                         .write
		.uav_waitrequest          (interval_timer_s1_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid        (interval_timer_s1_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable           (interval_timer_s1_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata             (interval_timer_s1_agent_m0_readdata),      //                         .readdata
		.uav_writedata            (interval_timer_s1_agent_m0_writedata),     //                         .writedata
		.uav_lock                 (interval_timer_s1_agent_m0_lock),          //                         .lock
		.uav_debugaccess          (interval_timer_s1_agent_m0_debugaccess),   //                         .debugaccess
		.av_address               (Interval_Timer_s1_address),                //      avalon_anti_slave_0.address
		.av_write                 (Interval_Timer_s1_write),                  //                         .write
		.av_readdata              (Interval_Timer_s1_readdata),               //                         .readdata
		.av_writedata             (Interval_Timer_s1_writedata),              //                         .writedata
		.av_chipselect            (Interval_Timer_s1_chipselect),             //                         .chipselect
		.av_read                  (),                                         //              (terminated)
		.av_begintransfer         (),                                         //              (terminated)
		.av_beginbursttransfer    (),                                         //              (terminated)
		.av_burstcount            (),                                         //              (terminated)
		.av_byteenable            (),                                         //              (terminated)
		.av_readdatavalid         (1'b0),                                     //              (terminated)
		.av_waitrequest           (1'b0),                                     //              (terminated)
		.av_writebyteenable       (),                                         //              (terminated)
		.av_lock                  (),                                         //              (terminated)
		.av_clken                 (),                                         //              (terminated)
		.uav_clken                (1'b0),                                     //              (terminated)
		.av_debugaccess           (),                                         //              (terminated)
		.av_outputenable          (),                                         //              (terminated)
		.uav_response             (),                                         //              (terminated)
		.av_response              (2'b00),                                    //              (terminated)
		.uav_writeresponserequest (1'b0),                                     //              (terminated)
		.uav_writeresponsevalid   (),                                         //              (terminated)
		.av_writeresponserequest  (),                                         //              (terminated)
		.av_writeresponsevalid    (1'b0)                                      //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) leds_s1_translator (
		.clk                      (System_PLL_sys_clk_clk),                  //                      clk.clk
		.reset                    (SDRAM_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address              (leds_s1_agent_m0_address),                // avalon_universal_slave_0.address
		.uav_burstcount           (leds_s1_agent_m0_burstcount),             //                         .burstcount
		.uav_read                 (leds_s1_agent_m0_read),                   //                         .read
		.uav_write                (leds_s1_agent_m0_write),                  //                         .write
		.uav_waitrequest          (leds_s1_agent_m0_waitrequest),            //                         .waitrequest
		.uav_readdatavalid        (leds_s1_agent_m0_readdatavalid),          //                         .readdatavalid
		.uav_byteenable           (leds_s1_agent_m0_byteenable),             //                         .byteenable
		.uav_readdata             (leds_s1_agent_m0_readdata),               //                         .readdata
		.uav_writedata            (leds_s1_agent_m0_writedata),              //                         .writedata
		.uav_lock                 (leds_s1_agent_m0_lock),                   //                         .lock
		.uav_debugaccess          (leds_s1_agent_m0_debugaccess),            //                         .debugaccess
		.av_address               (LEDs_s1_address),                         //      avalon_anti_slave_0.address
		.av_write                 (LEDs_s1_write),                           //                         .write
		.av_readdata              (LEDs_s1_readdata),                        //                         .readdata
		.av_writedata             (LEDs_s1_writedata),                       //                         .writedata
		.av_chipselect            (LEDs_s1_chipselect),                      //                         .chipselect
		.av_read                  (),                                        //              (terminated)
		.av_begintransfer         (),                                        //              (terminated)
		.av_beginbursttransfer    (),                                        //              (terminated)
		.av_burstcount            (),                                        //              (terminated)
		.av_byteenable            (),                                        //              (terminated)
		.av_readdatavalid         (1'b0),                                    //              (terminated)
		.av_waitrequest           (1'b0),                                    //              (terminated)
		.av_writebyteenable       (),                                        //              (terminated)
		.av_lock                  (),                                        //              (terminated)
		.av_clken                 (),                                        //              (terminated)
		.uav_clken                (1'b0),                                    //              (terminated)
		.av_debugaccess           (),                                        //              (terminated)
		.av_outputenable          (),                                        //              (terminated)
		.uav_response             (),                                        //              (terminated)
		.av_response              (2'b00),                                   //              (terminated)
		.uav_writeresponserequest (1'b0),                                    //              (terminated)
		.uav_writeresponsevalid   (),                                        //              (terminated)
		.av_writeresponserequest  (),                                        //              (terminated)
		.av_writeresponsevalid    (1'b0)                                     //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) slider_switches_s1_translator (
		.clk                      (System_PLL_sys_clk_clk),                    //                      clk.clk
		.reset                    (SDRAM_reset_reset_bridge_in_reset_reset),   //                    reset.reset
		.uav_address              (slider_switches_s1_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount           (slider_switches_s1_agent_m0_burstcount),    //                         .burstcount
		.uav_read                 (slider_switches_s1_agent_m0_read),          //                         .read
		.uav_write                (slider_switches_s1_agent_m0_write),         //                         .write
		.uav_waitrequest          (slider_switches_s1_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid        (slider_switches_s1_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable           (slider_switches_s1_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata             (slider_switches_s1_agent_m0_readdata),      //                         .readdata
		.uav_writedata            (slider_switches_s1_agent_m0_writedata),     //                         .writedata
		.uav_lock                 (slider_switches_s1_agent_m0_lock),          //                         .lock
		.uav_debugaccess          (slider_switches_s1_agent_m0_debugaccess),   //                         .debugaccess
		.av_address               (Slider_Switches_s1_address),                //      avalon_anti_slave_0.address
		.av_readdata              (Slider_Switches_s1_readdata),               //                         .readdata
		.av_write                 (),                                          //              (terminated)
		.av_read                  (),                                          //              (terminated)
		.av_writedata             (),                                          //              (terminated)
		.av_begintransfer         (),                                          //              (terminated)
		.av_beginbursttransfer    (),                                          //              (terminated)
		.av_burstcount            (),                                          //              (terminated)
		.av_byteenable            (),                                          //              (terminated)
		.av_readdatavalid         (1'b0),                                      //              (terminated)
		.av_waitrequest           (1'b0),                                      //              (terminated)
		.av_writebyteenable       (),                                          //              (terminated)
		.av_lock                  (),                                          //              (terminated)
		.av_chipselect            (),                                          //              (terminated)
		.av_clken                 (),                                          //              (terminated)
		.uav_clken                (1'b0),                                      //              (terminated)
		.av_debugaccess           (),                                          //              (terminated)
		.av_outputenable          (),                                          //              (terminated)
		.uav_response             (),                                          //              (terminated)
		.av_response              (2'b00),                                     //              (terminated)
		.uav_writeresponserequest (1'b0),                                      //              (terminated)
		.uav_writeresponsevalid   (),                                          //              (terminated)
		.av_writeresponserequest  (),                                          //              (terminated)
		.av_writeresponsevalid    (1'b0)                                       //              (terminated)
	);

	altera_merlin_axi_master_ni #(
		.ID_WIDTH                  (12),
		.ADDR_WIDTH                (30),
		.RDATA_WIDTH               (128),
		.WDATA_WIDTH               (128),
		.ADDR_USER_WIDTH           (1),
		.DATA_USER_WIDTH           (1),
		.AXI_BURST_LENGTH_WIDTH    (4),
		.AXI_LOCK_WIDTH            (2),
		.AXI_VERSION               ("AXI3"),
		.WRITE_ISSUING_CAPABILITY  (8),
		.READ_ISSUING_CAPABILITY   (8),
		.PKT_BEGIN_BURST           (207),
		.PKT_CACHE_H               (233),
		.PKT_CACHE_L               (230),
		.PKT_ADDR_SIDEBAND_H       (205),
		.PKT_ADDR_SIDEBAND_L       (205),
		.PKT_PROTECTION_H          (229),
		.PKT_PROTECTION_L          (227),
		.PKT_BURST_SIZE_H          (202),
		.PKT_BURST_SIZE_L          (200),
		.PKT_BURST_TYPE_H          (204),
		.PKT_BURST_TYPE_L          (203),
		.PKT_RESPONSE_STATUS_L     (234),
		.PKT_RESPONSE_STATUS_H     (235),
		.PKT_BURSTWRAP_H           (199),
		.PKT_BURSTWRAP_L           (191),
		.PKT_BYTE_CNT_H            (190),
		.PKT_BYTE_CNT_L            (182),
		.PKT_ADDR_H                (175),
		.PKT_ADDR_L                (144),
		.PKT_TRANS_EXCLUSIVE       (181),
		.PKT_TRANS_LOCK            (180),
		.PKT_TRANS_COMPRESSED_READ (176),
		.PKT_TRANS_POSTED          (177),
		.PKT_TRANS_WRITE           (178),
		.PKT_TRANS_READ            (179),
		.PKT_DATA_H                (127),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (143),
		.PKT_BYTEEN_L              (128),
		.PKT_SRC_ID_H              (211),
		.PKT_SRC_ID_L              (209),
		.PKT_DEST_ID_H             (214),
		.PKT_DEST_ID_L             (212),
		.PKT_THREAD_ID_H           (226),
		.PKT_THREAD_ID_L           (215),
		.PKT_QOS_L                 (208),
		.PKT_QOS_H                 (208),
		.PKT_ORI_BURST_SIZE_L      (236),
		.PKT_ORI_BURST_SIZE_H      (238),
		.PKT_DATA_SIDEBAND_H       (206),
		.PKT_DATA_SIDEBAND_L       (206),
		.ST_DATA_W                 (239),
		.ST_CHANNEL_W              (6),
		.ID                        (0)
	) arm_a9_hps_h2f_axi_master_agent (
		.aclk                   (System_PLL_sys_clk_clk),                                                 //              clk.clk
		.aresetn                (~Arm_A9_HPS_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), //        clk_reset.reset_n
		.write_cp_valid         (arm_a9_hps_h2f_axi_master_agent_write_cp_valid),                         //         write_cp.valid
		.write_cp_data          (arm_a9_hps_h2f_axi_master_agent_write_cp_data),                          //                 .data
		.write_cp_startofpacket (arm_a9_hps_h2f_axi_master_agent_write_cp_startofpacket),                 //                 .startofpacket
		.write_cp_endofpacket   (arm_a9_hps_h2f_axi_master_agent_write_cp_endofpacket),                   //                 .endofpacket
		.write_cp_ready         (arm_a9_hps_h2f_axi_master_agent_write_cp_ready),                         //                 .ready
		.write_rp_valid         (arm_a9_hps_h2f_axi_master_wr_limiter_rsp_src_valid),                     //         write_rp.valid
		.write_rp_data          (arm_a9_hps_h2f_axi_master_wr_limiter_rsp_src_data),                      //                 .data
		.write_rp_channel       (arm_a9_hps_h2f_axi_master_wr_limiter_rsp_src_channel),                   //                 .channel
		.write_rp_startofpacket (arm_a9_hps_h2f_axi_master_wr_limiter_rsp_src_startofpacket),             //                 .startofpacket
		.write_rp_endofpacket   (arm_a9_hps_h2f_axi_master_wr_limiter_rsp_src_endofpacket),               //                 .endofpacket
		.write_rp_ready         (arm_a9_hps_h2f_axi_master_wr_limiter_rsp_src_ready),                     //                 .ready
		.read_cp_valid          (arm_a9_hps_h2f_axi_master_agent_read_cp_valid),                          //          read_cp.valid
		.read_cp_data           (arm_a9_hps_h2f_axi_master_agent_read_cp_data),                           //                 .data
		.read_cp_startofpacket  (arm_a9_hps_h2f_axi_master_agent_read_cp_startofpacket),                  //                 .startofpacket
		.read_cp_endofpacket    (arm_a9_hps_h2f_axi_master_agent_read_cp_endofpacket),                    //                 .endofpacket
		.read_cp_ready          (arm_a9_hps_h2f_axi_master_agent_read_cp_ready),                          //                 .ready
		.read_rp_valid          (arm_a9_hps_h2f_axi_master_rd_limiter_rsp_src_valid),                     //          read_rp.valid
		.read_rp_data           (arm_a9_hps_h2f_axi_master_rd_limiter_rsp_src_data),                      //                 .data
		.read_rp_channel        (arm_a9_hps_h2f_axi_master_rd_limiter_rsp_src_channel),                   //                 .channel
		.read_rp_startofpacket  (arm_a9_hps_h2f_axi_master_rd_limiter_rsp_src_startofpacket),             //                 .startofpacket
		.read_rp_endofpacket    (arm_a9_hps_h2f_axi_master_rd_limiter_rsp_src_endofpacket),               //                 .endofpacket
		.read_rp_ready          (arm_a9_hps_h2f_axi_master_rd_limiter_rsp_src_ready),                     //                 .ready
		.awid                   (Arm_A9_HPS_h2f_axi_master_awid),                                         // altera_axi_slave.awid
		.awaddr                 (Arm_A9_HPS_h2f_axi_master_awaddr),                                       //                 .awaddr
		.awlen                  (Arm_A9_HPS_h2f_axi_master_awlen),                                        //                 .awlen
		.awsize                 (Arm_A9_HPS_h2f_axi_master_awsize),                                       //                 .awsize
		.awburst                (Arm_A9_HPS_h2f_axi_master_awburst),                                      //                 .awburst
		.awlock                 (Arm_A9_HPS_h2f_axi_master_awlock),                                       //                 .awlock
		.awcache                (Arm_A9_HPS_h2f_axi_master_awcache),                                      //                 .awcache
		.awprot                 (Arm_A9_HPS_h2f_axi_master_awprot),                                       //                 .awprot
		.awvalid                (Arm_A9_HPS_h2f_axi_master_awvalid),                                      //                 .awvalid
		.awready                (Arm_A9_HPS_h2f_axi_master_awready),                                      //                 .awready
		.wid                    (Arm_A9_HPS_h2f_axi_master_wid),                                          //                 .wid
		.wdata                  (Arm_A9_HPS_h2f_axi_master_wdata),                                        //                 .wdata
		.wstrb                  (Arm_A9_HPS_h2f_axi_master_wstrb),                                        //                 .wstrb
		.wlast                  (Arm_A9_HPS_h2f_axi_master_wlast),                                        //                 .wlast
		.wvalid                 (Arm_A9_HPS_h2f_axi_master_wvalid),                                       //                 .wvalid
		.wready                 (Arm_A9_HPS_h2f_axi_master_wready),                                       //                 .wready
		.bid                    (Arm_A9_HPS_h2f_axi_master_bid),                                          //                 .bid
		.bresp                  (Arm_A9_HPS_h2f_axi_master_bresp),                                        //                 .bresp
		.bvalid                 (Arm_A9_HPS_h2f_axi_master_bvalid),                                       //                 .bvalid
		.bready                 (Arm_A9_HPS_h2f_axi_master_bready),                                       //                 .bready
		.arid                   (Arm_A9_HPS_h2f_axi_master_arid),                                         //                 .arid
		.araddr                 (Arm_A9_HPS_h2f_axi_master_araddr),                                       //                 .araddr
		.arlen                  (Arm_A9_HPS_h2f_axi_master_arlen),                                        //                 .arlen
		.arsize                 (Arm_A9_HPS_h2f_axi_master_arsize),                                       //                 .arsize
		.arburst                (Arm_A9_HPS_h2f_axi_master_arburst),                                      //                 .arburst
		.arlock                 (Arm_A9_HPS_h2f_axi_master_arlock),                                       //                 .arlock
		.arcache                (Arm_A9_HPS_h2f_axi_master_arcache),                                      //                 .arcache
		.arprot                 (Arm_A9_HPS_h2f_axi_master_arprot),                                       //                 .arprot
		.arvalid                (Arm_A9_HPS_h2f_axi_master_arvalid),                                      //                 .arvalid
		.arready                (Arm_A9_HPS_h2f_axi_master_arready),                                      //                 .arready
		.rid                    (Arm_A9_HPS_h2f_axi_master_rid),                                          //                 .rid
		.rdata                  (Arm_A9_HPS_h2f_axi_master_rdata),                                        //                 .rdata
		.rresp                  (Arm_A9_HPS_h2f_axi_master_rresp),                                        //                 .rresp
		.rlast                  (Arm_A9_HPS_h2f_axi_master_rlast),                                        //                 .rlast
		.rvalid                 (Arm_A9_HPS_h2f_axi_master_rvalid),                                       //                 .rvalid
		.rready                 (Arm_A9_HPS_h2f_axi_master_rready),                                       //                 .rready
		.awuser                 (1'b0),                                                                   //      (terminated)
		.aruser                 (1'b0),                                                                   //      (terminated)
		.awqos                  (4'b0000),                                                                //      (terminated)
		.arqos                  (4'b0000),                                                                //      (terminated)
		.awregion               (4'b0000),                                                                //      (terminated)
		.arregion               (4'b0000),                                                                //      (terminated)
		.wuser                  (1'b0),                                                                   //      (terminated)
		.ruser                  (),                                                                       //      (terminated)
		.buser                  ()                                                                        //      (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_PROTECTION_H          (121),
		.PKT_PROTECTION_L          (119),
		.PKT_BEGIN_BURST           (99),
		.PKT_BURSTWRAP_H           (91),
		.PKT_BURSTWRAP_L           (83),
		.PKT_BURST_SIZE_H          (94),
		.PKT_BURST_SIZE_L          (92),
		.PKT_BURST_TYPE_H          (96),
		.PKT_BURST_TYPE_L          (95),
		.PKT_BYTE_CNT_H            (82),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_TRANS_LOCK            (72),
		.PKT_TRANS_EXCLUSIVE       (73),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (103),
		.PKT_SRC_ID_L              (101),
		.PKT_DEST_ID_H             (106),
		.PKT_DEST_ID_L             (104),
		.PKT_THREAD_ID_H           (118),
		.PKT_THREAD_ID_L           (107),
		.PKT_CACHE_H               (125),
		.PKT_CACHE_L               (122),
		.PKT_DATA_SIDEBAND_H       (98),
		.PKT_DATA_SIDEBAND_L       (98),
		.PKT_QOS_H                 (100),
		.PKT_QOS_L                 (100),
		.PKT_ADDR_SIDEBAND_H       (97),
		.PKT_ADDR_SIDEBAND_L       (97),
		.PKT_RESPONSE_STATUS_H     (127),
		.PKT_RESPONSE_STATUS_L     (126),
		.PKT_ORI_BURST_SIZE_L      (128),
		.PKT_ORI_BURST_SIZE_H      (130),
		.ST_DATA_W                 (131),
		.ST_CHANNEL_W              (6),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (2),
		.BURSTWRAP_VALUE           (511),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) jtag_to_fpga_bridge_master_agent (
		.clk                     (System_PLL_sys_clk_clk),                                                        //       clk.clk
		.reset                   (SDRAM_reset_reset_bridge_in_reset_reset),                                       // clk_reset.reset
		.av_address              (jtag_to_fpga_bridge_master_translator_avalon_universal_master_0_address),       //        av.address
		.av_write                (jtag_to_fpga_bridge_master_translator_avalon_universal_master_0_write),         //          .write
		.av_read                 (jtag_to_fpga_bridge_master_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata            (jtag_to_fpga_bridge_master_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata             (jtag_to_fpga_bridge_master_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest          (jtag_to_fpga_bridge_master_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid        (jtag_to_fpga_bridge_master_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable           (jtag_to_fpga_bridge_master_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount           (jtag_to_fpga_bridge_master_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess          (jtag_to_fpga_bridge_master_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock                 (jtag_to_fpga_bridge_master_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid                (jtag_to_fpga_bridge_master_agent_cp_valid),                                     //        cp.valid
		.cp_data                 (jtag_to_fpga_bridge_master_agent_cp_data),                                      //          .data
		.cp_startofpacket        (jtag_to_fpga_bridge_master_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket          (jtag_to_fpga_bridge_master_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready                (jtag_to_fpga_bridge_master_agent_cp_ready),                                     //          .ready
		.rp_valid                (jtag_to_fpga_bridge_master_limiter_rsp_src_valid),                              //        rp.valid
		.rp_data                 (jtag_to_fpga_bridge_master_limiter_rsp_src_data),                               //          .data
		.rp_channel              (jtag_to_fpga_bridge_master_limiter_rsp_src_channel),                            //          .channel
		.rp_startofpacket        (jtag_to_fpga_bridge_master_limiter_rsp_src_startofpacket),                      //          .startofpacket
		.rp_endofpacket          (jtag_to_fpga_bridge_master_limiter_rsp_src_endofpacket),                        //          .endofpacket
		.rp_ready                (jtag_to_fpga_bridge_master_limiter_rsp_src_ready),                              //          .ready
		.av_response             (),                                                                              // (terminated)
		.av_writeresponserequest (1'b0),                                                                          // (terminated)
		.av_writeresponsevalid   ()                                                                               // (terminated)
	);

	altera_merlin_axi_master_ni #(
		.ID_WIDTH                  (12),
		.ADDR_WIDTH                (21),
		.RDATA_WIDTH               (32),
		.WDATA_WIDTH               (32),
		.ADDR_USER_WIDTH           (1),
		.DATA_USER_WIDTH           (1),
		.AXI_BURST_LENGTH_WIDTH    (4),
		.AXI_LOCK_WIDTH            (2),
		.AXI_VERSION               ("AXI3"),
		.WRITE_ISSUING_CAPABILITY  (8),
		.READ_ISSUING_CAPABILITY   (8),
		.PKT_BEGIN_BURST           (99),
		.PKT_CACHE_H               (125),
		.PKT_CACHE_L               (122),
		.PKT_ADDR_SIDEBAND_H       (97),
		.PKT_ADDR_SIDEBAND_L       (97),
		.PKT_PROTECTION_H          (121),
		.PKT_PROTECTION_L          (119),
		.PKT_BURST_SIZE_H          (94),
		.PKT_BURST_SIZE_L          (92),
		.PKT_BURST_TYPE_H          (96),
		.PKT_BURST_TYPE_L          (95),
		.PKT_RESPONSE_STATUS_L     (126),
		.PKT_RESPONSE_STATUS_H     (127),
		.PKT_BURSTWRAP_H           (91),
		.PKT_BURSTWRAP_L           (83),
		.PKT_BYTE_CNT_H            (82),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_EXCLUSIVE       (73),
		.PKT_TRANS_LOCK            (72),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (103),
		.PKT_SRC_ID_L              (101),
		.PKT_DEST_ID_H             (106),
		.PKT_DEST_ID_L             (104),
		.PKT_THREAD_ID_H           (118),
		.PKT_THREAD_ID_L           (107),
		.PKT_QOS_L                 (100),
		.PKT_QOS_H                 (100),
		.PKT_ORI_BURST_SIZE_L      (128),
		.PKT_ORI_BURST_SIZE_H      (130),
		.PKT_DATA_SIDEBAND_H       (98),
		.PKT_DATA_SIDEBAND_L       (98),
		.ST_DATA_W                 (131),
		.ST_CHANNEL_W              (6),
		.ID                        (1)
	) arm_a9_hps_h2f_lw_axi_master_agent (
		.aclk                   (System_PLL_sys_clk_clk),                                                 //              clk.clk
		.aresetn                (~Arm_A9_HPS_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), //        clk_reset.reset_n
		.write_cp_valid         (arm_a9_hps_h2f_lw_axi_master_agent_write_cp_valid),                      //         write_cp.valid
		.write_cp_data          (arm_a9_hps_h2f_lw_axi_master_agent_write_cp_data),                       //                 .data
		.write_cp_startofpacket (arm_a9_hps_h2f_lw_axi_master_agent_write_cp_startofpacket),              //                 .startofpacket
		.write_cp_endofpacket   (arm_a9_hps_h2f_lw_axi_master_agent_write_cp_endofpacket),                //                 .endofpacket
		.write_cp_ready         (arm_a9_hps_h2f_lw_axi_master_agent_write_cp_ready),                      //                 .ready
		.write_rp_valid         (arm_a9_hps_h2f_lw_axi_master_wr_limiter_rsp_src_valid),                  //         write_rp.valid
		.write_rp_data          (arm_a9_hps_h2f_lw_axi_master_wr_limiter_rsp_src_data),                   //                 .data
		.write_rp_channel       (arm_a9_hps_h2f_lw_axi_master_wr_limiter_rsp_src_channel),                //                 .channel
		.write_rp_startofpacket (arm_a9_hps_h2f_lw_axi_master_wr_limiter_rsp_src_startofpacket),          //                 .startofpacket
		.write_rp_endofpacket   (arm_a9_hps_h2f_lw_axi_master_wr_limiter_rsp_src_endofpacket),            //                 .endofpacket
		.write_rp_ready         (arm_a9_hps_h2f_lw_axi_master_wr_limiter_rsp_src_ready),                  //                 .ready
		.read_cp_valid          (arm_a9_hps_h2f_lw_axi_master_agent_read_cp_valid),                       //          read_cp.valid
		.read_cp_data           (arm_a9_hps_h2f_lw_axi_master_agent_read_cp_data),                        //                 .data
		.read_cp_startofpacket  (arm_a9_hps_h2f_lw_axi_master_agent_read_cp_startofpacket),               //                 .startofpacket
		.read_cp_endofpacket    (arm_a9_hps_h2f_lw_axi_master_agent_read_cp_endofpacket),                 //                 .endofpacket
		.read_cp_ready          (arm_a9_hps_h2f_lw_axi_master_agent_read_cp_ready),                       //                 .ready
		.read_rp_valid          (arm_a9_hps_h2f_lw_axi_master_rd_limiter_rsp_src_valid),                  //          read_rp.valid
		.read_rp_data           (arm_a9_hps_h2f_lw_axi_master_rd_limiter_rsp_src_data),                   //                 .data
		.read_rp_channel        (arm_a9_hps_h2f_lw_axi_master_rd_limiter_rsp_src_channel),                //                 .channel
		.read_rp_startofpacket  (arm_a9_hps_h2f_lw_axi_master_rd_limiter_rsp_src_startofpacket),          //                 .startofpacket
		.read_rp_endofpacket    (arm_a9_hps_h2f_lw_axi_master_rd_limiter_rsp_src_endofpacket),            //                 .endofpacket
		.read_rp_ready          (arm_a9_hps_h2f_lw_axi_master_rd_limiter_rsp_src_ready),                  //                 .ready
		.awid                   (Arm_A9_HPS_h2f_lw_axi_master_awid),                                      // altera_axi_slave.awid
		.awaddr                 (Arm_A9_HPS_h2f_lw_axi_master_awaddr),                                    //                 .awaddr
		.awlen                  (Arm_A9_HPS_h2f_lw_axi_master_awlen),                                     //                 .awlen
		.awsize                 (Arm_A9_HPS_h2f_lw_axi_master_awsize),                                    //                 .awsize
		.awburst                (Arm_A9_HPS_h2f_lw_axi_master_awburst),                                   //                 .awburst
		.awlock                 (Arm_A9_HPS_h2f_lw_axi_master_awlock),                                    //                 .awlock
		.awcache                (Arm_A9_HPS_h2f_lw_axi_master_awcache),                                   //                 .awcache
		.awprot                 (Arm_A9_HPS_h2f_lw_axi_master_awprot),                                    //                 .awprot
		.awvalid                (Arm_A9_HPS_h2f_lw_axi_master_awvalid),                                   //                 .awvalid
		.awready                (Arm_A9_HPS_h2f_lw_axi_master_awready),                                   //                 .awready
		.wid                    (Arm_A9_HPS_h2f_lw_axi_master_wid),                                       //                 .wid
		.wdata                  (Arm_A9_HPS_h2f_lw_axi_master_wdata),                                     //                 .wdata
		.wstrb                  (Arm_A9_HPS_h2f_lw_axi_master_wstrb),                                     //                 .wstrb
		.wlast                  (Arm_A9_HPS_h2f_lw_axi_master_wlast),                                     //                 .wlast
		.wvalid                 (Arm_A9_HPS_h2f_lw_axi_master_wvalid),                                    //                 .wvalid
		.wready                 (Arm_A9_HPS_h2f_lw_axi_master_wready),                                    //                 .wready
		.bid                    (Arm_A9_HPS_h2f_lw_axi_master_bid),                                       //                 .bid
		.bresp                  (Arm_A9_HPS_h2f_lw_axi_master_bresp),                                     //                 .bresp
		.bvalid                 (Arm_A9_HPS_h2f_lw_axi_master_bvalid),                                    //                 .bvalid
		.bready                 (Arm_A9_HPS_h2f_lw_axi_master_bready),                                    //                 .bready
		.arid                   (Arm_A9_HPS_h2f_lw_axi_master_arid),                                      //                 .arid
		.araddr                 (Arm_A9_HPS_h2f_lw_axi_master_araddr),                                    //                 .araddr
		.arlen                  (Arm_A9_HPS_h2f_lw_axi_master_arlen),                                     //                 .arlen
		.arsize                 (Arm_A9_HPS_h2f_lw_axi_master_arsize),                                    //                 .arsize
		.arburst                (Arm_A9_HPS_h2f_lw_axi_master_arburst),                                   //                 .arburst
		.arlock                 (Arm_A9_HPS_h2f_lw_axi_master_arlock),                                    //                 .arlock
		.arcache                (Arm_A9_HPS_h2f_lw_axi_master_arcache),                                   //                 .arcache
		.arprot                 (Arm_A9_HPS_h2f_lw_axi_master_arprot),                                    //                 .arprot
		.arvalid                (Arm_A9_HPS_h2f_lw_axi_master_arvalid),                                   //                 .arvalid
		.arready                (Arm_A9_HPS_h2f_lw_axi_master_arready),                                   //                 .arready
		.rid                    (Arm_A9_HPS_h2f_lw_axi_master_rid),                                       //                 .rid
		.rdata                  (Arm_A9_HPS_h2f_lw_axi_master_rdata),                                     //                 .rdata
		.rresp                  (Arm_A9_HPS_h2f_lw_axi_master_rresp),                                     //                 .rresp
		.rlast                  (Arm_A9_HPS_h2f_lw_axi_master_rlast),                                     //                 .rlast
		.rvalid                 (Arm_A9_HPS_h2f_lw_axi_master_rvalid),                                    //                 .rvalid
		.rready                 (Arm_A9_HPS_h2f_lw_axi_master_rready),                                    //                 .rready
		.awuser                 (1'b0),                                                                   //      (terminated)
		.aruser                 (1'b0),                                                                   //      (terminated)
		.awqos                  (4'b0000),                                                                //      (terminated)
		.arqos                  (4'b0000),                                                                //      (terminated)
		.awregion               (4'b0000),                                                                //      (terminated)
		.arregion               (4'b0000),                                                                //      (terminated)
		.wuser                  (1'b0),                                                                   //      (terminated)
		.ruser                  (),                                                                       //      (terminated)
		.buser                  ()                                                                        //      (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_PROTECTION_H          (103),
		.PKT_PROTECTION_L          (101),
		.PKT_BEGIN_BURST           (81),
		.PKT_BURSTWRAP_H           (73),
		.PKT_BURSTWRAP_L           (65),
		.PKT_BURST_SIZE_H          (76),
		.PKT_BURST_SIZE_L          (74),
		.PKT_BURST_TYPE_H          (78),
		.PKT_BURST_TYPE_L          (77),
		.PKT_BYTE_CNT_H            (64),
		.PKT_BYTE_CNT_L            (56),
		.PKT_ADDR_H                (49),
		.PKT_ADDR_L                (18),
		.PKT_TRANS_COMPRESSED_READ (50),
		.PKT_TRANS_POSTED          (51),
		.PKT_TRANS_WRITE           (52),
		.PKT_TRANS_READ            (53),
		.PKT_TRANS_LOCK            (54),
		.PKT_TRANS_EXCLUSIVE       (55),
		.PKT_DATA_H                (15),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (17),
		.PKT_BYTEEN_L              (16),
		.PKT_SRC_ID_H              (85),
		.PKT_SRC_ID_L              (83),
		.PKT_DEST_ID_H             (88),
		.PKT_DEST_ID_L             (86),
		.PKT_THREAD_ID_H           (100),
		.PKT_THREAD_ID_L           (89),
		.PKT_CACHE_H               (107),
		.PKT_CACHE_L               (104),
		.PKT_DATA_SIDEBAND_H       (80),
		.PKT_DATA_SIDEBAND_L       (80),
		.PKT_QOS_H                 (82),
		.PKT_QOS_L                 (82),
		.PKT_ADDR_SIDEBAND_H       (79),
		.PKT_ADDR_SIDEBAND_L       (79),
		.PKT_RESPONSE_STATUS_H     (109),
		.PKT_RESPONSE_STATUS_L     (108),
		.PKT_ORI_BURST_SIZE_L      (110),
		.PKT_ORI_BURST_SIZE_H      (112),
		.ST_DATA_W                 (113),
		.ST_CHANNEL_W              (6),
		.AV_BURSTCOUNT_W           (2),
		.SUPPRESS_0_BYTEEN_RSP     (1),
		.ID                        (3),
		.BURSTWRAP_VALUE           (511),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) vga_subsystem_pixel_dma_master_agent (
		.clk                     (System_PLL_sys_clk_clk),                                                            //       clk.clk
		.reset                   (SDRAM_reset_reset_bridge_in_reset_reset),                                           // clk_reset.reset
		.av_address              (vga_subsystem_pixel_dma_master_translator_avalon_universal_master_0_address),       //        av.address
		.av_write                (vga_subsystem_pixel_dma_master_translator_avalon_universal_master_0_write),         //          .write
		.av_read                 (vga_subsystem_pixel_dma_master_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata            (vga_subsystem_pixel_dma_master_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata             (vga_subsystem_pixel_dma_master_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest          (vga_subsystem_pixel_dma_master_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid        (vga_subsystem_pixel_dma_master_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable           (vga_subsystem_pixel_dma_master_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount           (vga_subsystem_pixel_dma_master_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess          (vga_subsystem_pixel_dma_master_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock                 (vga_subsystem_pixel_dma_master_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid                (vga_subsystem_pixel_dma_master_agent_cp_valid),                                     //        cp.valid
		.cp_data                 (vga_subsystem_pixel_dma_master_agent_cp_data),                                      //          .data
		.cp_startofpacket        (vga_subsystem_pixel_dma_master_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket          (vga_subsystem_pixel_dma_master_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready                (vga_subsystem_pixel_dma_master_agent_cp_ready),                                     //          .ready
		.rp_valid                (rsp_mux_005_src_valid),                                                             //        rp.valid
		.rp_data                 (rsp_mux_005_src_data),                                                              //          .data
		.rp_channel              (rsp_mux_005_src_channel),                                                           //          .channel
		.rp_startofpacket        (rsp_mux_005_src_startofpacket),                                                     //          .startofpacket
		.rp_endofpacket          (rsp_mux_005_src_endofpacket),                                                       //          .endofpacket
		.rp_ready                (rsp_mux_005_src_ready),                                                             //          .ready
		.av_response             (),                                                                                  // (terminated)
		.av_writeresponserequest (1'b0),                                                                              // (terminated)
		.av_writeresponsevalid   ()                                                                                   // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (15),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (81),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (17),
		.PKT_BYTEEN_L              (16),
		.PKT_ADDR_H                (49),
		.PKT_ADDR_L                (18),
		.PKT_TRANS_COMPRESSED_READ (50),
		.PKT_TRANS_POSTED          (51),
		.PKT_TRANS_WRITE           (52),
		.PKT_TRANS_READ            (53),
		.PKT_TRANS_LOCK            (54),
		.PKT_SRC_ID_H              (85),
		.PKT_SRC_ID_L              (83),
		.PKT_DEST_ID_H             (88),
		.PKT_DEST_ID_L             (86),
		.PKT_BURSTWRAP_H           (73),
		.PKT_BURSTWRAP_L           (65),
		.PKT_BYTE_CNT_H            (64),
		.PKT_BYTE_CNT_L            (56),
		.PKT_PROTECTION_H          (103),
		.PKT_PROTECTION_L          (101),
		.PKT_RESPONSE_STATUS_H     (109),
		.PKT_RESPONSE_STATUS_L     (108),
		.PKT_BURST_SIZE_H          (76),
		.PKT_BURST_SIZE_L          (74),
		.PKT_ORI_BURST_SIZE_L      (110),
		.PKT_ORI_BURST_SIZE_H      (112),
		.ST_CHANNEL_W              (6),
		.ST_DATA_W                 (113),
		.AVS_BURSTCOUNT_W          (2),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) sdram_s1_agent (
		.clk                     (System_PLL_sys_clk_clk),                       //             clk.clk
		.reset                   (SDRAM_reset_reset_bridge_in_reset_reset),      //       clk_reset.reset
		.m0_address              (sdram_s1_agent_m0_address),                    //              m0.address
		.m0_burstcount           (sdram_s1_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (sdram_s1_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (sdram_s1_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (sdram_s1_agent_m0_lock),                       //                .lock
		.m0_readdata             (sdram_s1_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (sdram_s1_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (sdram_s1_agent_m0_read),                       //                .read
		.m0_waitrequest          (sdram_s1_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (sdram_s1_agent_m0_writedata),                  //                .writedata
		.m0_write                (sdram_s1_agent_m0_write),                      //                .write
		.rp_endofpacket          (sdram_s1_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (sdram_s1_agent_rp_ready),                      //                .ready
		.rp_valid                (sdram_s1_agent_rp_valid),                      //                .valid
		.rp_data                 (sdram_s1_agent_rp_data),                       //                .data
		.rp_startofpacket        (sdram_s1_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (sdram_s1_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (sdram_s1_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (sdram_s1_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (sdram_s1_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (sdram_s1_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (sdram_s1_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (sdram_s1_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (sdram_s1_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (sdram_s1_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (sdram_s1_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (sdram_s1_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (sdram_s1_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (sdram_s1_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (sdram_s1_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (sdram_s1_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (sdram_s1_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (sdram_s1_agent_rdata_fifo_out_ready),          // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (sdram_s1_agent_rdata_fifo_out_valid),          //                .valid
		.rdata_fifo_sink_data    (sdram_s1_agent_rdata_fifo_out_data),           //                .data
		.rdata_fifo_src_ready    (sdram_s1_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (sdram_s1_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (sdram_s1_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                        //     (terminated)
		.m0_writeresponserequest (),                                             //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                          //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (114),
		.FIFO_DEPTH          (8),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sdram_s1_agent_rsp_fifo (
		.clk               (System_PLL_sys_clk_clk),                    //       clk.clk
		.reset             (SDRAM_reset_reset_bridge_in_reset_reset),   // clk_reset.reset
		.in_data           (sdram_s1_agent_rf_source_data),             //        in.data
		.in_valid          (sdram_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (sdram_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (sdram_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (sdram_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (sdram_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (sdram_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (sdram_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (sdram_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (sdram_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                     // (terminated)
		.csr_read          (1'b0),                                      // (terminated)
		.csr_write         (1'b0),                                      // (terminated)
		.csr_readdata      (),                                          // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),      // (terminated)
		.almost_full_data  (),                                          // (terminated)
		.almost_empty_data (),                                          // (terminated)
		.in_empty          (1'b0),                                      // (terminated)
		.out_empty         (),                                          // (terminated)
		.in_error          (1'b0),                                      // (terminated)
		.out_error         (),                                          // (terminated)
		.in_channel        (1'b0),                                      // (terminated)
		.out_channel       ()                                           // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (18),
		.FIFO_DEPTH          (8),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (3),
		.USE_MEMORY_BLOCKS   (1),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sdram_s1_agent_rdata_fifo (
		.clk               (System_PLL_sys_clk_clk),                  //       clk.clk
		.reset             (SDRAM_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (sdram_s1_agent_rdata_fifo_src_data),      //        in.data
		.in_valid          (sdram_s1_agent_rdata_fifo_src_valid),     //          .valid
		.in_ready          (sdram_s1_agent_rdata_fifo_src_ready),     //          .ready
		.out_data          (sdram_s1_agent_rdata_fifo_out_data),      //       out.data
		.out_valid         (sdram_s1_agent_rdata_fifo_out_valid),     //          .valid
		.out_ready         (sdram_s1_agent_rdata_fifo_out_ready),     //          .ready
		.csr_address       (2'b00),                                   // (terminated)
		.csr_read          (1'b0),                                    // (terminated)
		.csr_write         (1'b0),                                    // (terminated)
		.csr_readdata      (),                                        // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),    // (terminated)
		.almost_full_data  (),                                        // (terminated)
		.almost_empty_data (),                                        // (terminated)
		.in_startofpacket  (1'b0),                                    // (terminated)
		.in_endofpacket    (1'b0),                                    // (terminated)
		.out_startofpacket (),                                        // (terminated)
		.out_endofpacket   (),                                        // (terminated)
		.in_empty          (1'b0),                                    // (terminated)
		.out_empty         (),                                        // (terminated)
		.in_error          (1'b0),                                    // (terminated)
		.out_error         (),                                        // (terminated)
		.in_channel        (1'b0),                                    // (terminated)
		.out_channel       ()                                         // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (99),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_TRANS_LOCK            (72),
		.PKT_SRC_ID_H              (103),
		.PKT_SRC_ID_L              (101),
		.PKT_DEST_ID_H             (106),
		.PKT_DEST_ID_L             (104),
		.PKT_BURSTWRAP_H           (91),
		.PKT_BURSTWRAP_L           (83),
		.PKT_BYTE_CNT_H            (82),
		.PKT_BYTE_CNT_L            (74),
		.PKT_PROTECTION_H          (121),
		.PKT_PROTECTION_L          (119),
		.PKT_RESPONSE_STATUS_H     (127),
		.PKT_RESPONSE_STATUS_L     (126),
		.PKT_BURST_SIZE_H          (94),
		.PKT_BURST_SIZE_L          (92),
		.PKT_ORI_BURST_SIZE_L      (128),
		.PKT_ORI_BURST_SIZE_H      (130),
		.ST_CHANNEL_W              (6),
		.ST_DATA_W                 (131),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) vga_subsystem_pixel_dma_control_slave_agent (
		.clk                     (System_PLL_sys_clk_clk),                                                    //             clk.clk
		.reset                   (SDRAM_reset_reset_bridge_in_reset_reset),                                   //       clk_reset.reset
		.m0_address              (vga_subsystem_pixel_dma_control_slave_agent_m0_address),                    //              m0.address
		.m0_burstcount           (vga_subsystem_pixel_dma_control_slave_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (vga_subsystem_pixel_dma_control_slave_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (vga_subsystem_pixel_dma_control_slave_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (vga_subsystem_pixel_dma_control_slave_agent_m0_lock),                       //                .lock
		.m0_readdata             (vga_subsystem_pixel_dma_control_slave_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (vga_subsystem_pixel_dma_control_slave_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (vga_subsystem_pixel_dma_control_slave_agent_m0_read),                       //                .read
		.m0_waitrequest          (vga_subsystem_pixel_dma_control_slave_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (vga_subsystem_pixel_dma_control_slave_agent_m0_writedata),                  //                .writedata
		.m0_write                (vga_subsystem_pixel_dma_control_slave_agent_m0_write),                      //                .write
		.rp_endofpacket          (vga_subsystem_pixel_dma_control_slave_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (vga_subsystem_pixel_dma_control_slave_agent_rp_ready),                      //                .ready
		.rp_valid                (vga_subsystem_pixel_dma_control_slave_agent_rp_valid),                      //                .valid
		.rp_data                 (vga_subsystem_pixel_dma_control_slave_agent_rp_data),                       //                .data
		.rp_startofpacket        (vga_subsystem_pixel_dma_control_slave_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (vga_subsystem_pixel_dma_control_slave_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (vga_subsystem_pixel_dma_control_slave_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (vga_subsystem_pixel_dma_control_slave_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (vga_subsystem_pixel_dma_control_slave_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (vga_subsystem_pixel_dma_control_slave_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (vga_subsystem_pixel_dma_control_slave_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (vga_subsystem_pixel_dma_control_slave_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (vga_subsystem_pixel_dma_control_slave_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (vga_subsystem_pixel_dma_control_slave_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (vga_subsystem_pixel_dma_control_slave_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (vga_subsystem_pixel_dma_control_slave_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (vga_subsystem_pixel_dma_control_slave_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (vga_subsystem_pixel_dma_control_slave_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (vga_subsystem_pixel_dma_control_slave_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (vga_subsystem_pixel_dma_control_slave_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (vga_subsystem_pixel_dma_control_slave_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (vga_subsystem_pixel_dma_control_slave_agent_rdata_fifo_out_ready),          // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (vga_subsystem_pixel_dma_control_slave_agent_rdata_fifo_out_valid),          //                .valid
		.rdata_fifo_sink_data    (vga_subsystem_pixel_dma_control_slave_agent_rdata_fifo_out_data),           //                .data
		.rdata_fifo_src_ready    (vga_subsystem_pixel_dma_control_slave_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (vga_subsystem_pixel_dma_control_slave_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (vga_subsystem_pixel_dma_control_slave_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                                     //     (terminated)
		.m0_writeresponserequest (),                                                                          //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                       //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (132),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) vga_subsystem_pixel_dma_control_slave_agent_rsp_fifo (
		.clk               (System_PLL_sys_clk_clk),                                                 //       clk.clk
		.reset             (SDRAM_reset_reset_bridge_in_reset_reset),                                // clk_reset.reset
		.in_data           (vga_subsystem_pixel_dma_control_slave_agent_rf_source_data),             //        in.data
		.in_valid          (vga_subsystem_pixel_dma_control_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (vga_subsystem_pixel_dma_control_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (vga_subsystem_pixel_dma_control_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (vga_subsystem_pixel_dma_control_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (vga_subsystem_pixel_dma_control_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (vga_subsystem_pixel_dma_control_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (vga_subsystem_pixel_dma_control_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (vga_subsystem_pixel_dma_control_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (vga_subsystem_pixel_dma_control_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                                  // (terminated)
		.csr_read          (1'b0),                                                                   // (terminated)
		.csr_write         (1'b0),                                                                   // (terminated)
		.csr_readdata      (),                                                                       // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                   // (terminated)
		.almost_full_data  (),                                                                       // (terminated)
		.almost_empty_data (),                                                                       // (terminated)
		.in_empty          (1'b0),                                                                   // (terminated)
		.out_empty         (),                                                                       // (terminated)
		.in_error          (1'b0),                                                                   // (terminated)
		.out_error         (),                                                                       // (terminated)
		.in_channel        (1'b0),                                                                   // (terminated)
		.out_channel       ()                                                                        // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) vga_subsystem_pixel_dma_control_slave_agent_rdata_fifo (
		.clk               (System_PLL_sys_clk_clk),                                           //       clk.clk
		.reset             (SDRAM_reset_reset_bridge_in_reset_reset),                          // clk_reset.reset
		.in_data           (vga_subsystem_pixel_dma_control_slave_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (vga_subsystem_pixel_dma_control_slave_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (vga_subsystem_pixel_dma_control_slave_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (vga_subsystem_pixel_dma_control_slave_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (vga_subsystem_pixel_dma_control_slave_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (vga_subsystem_pixel_dma_control_slave_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                                            // (terminated)
		.csr_read          (1'b0),                                                             // (terminated)
		.csr_write         (1'b0),                                                             // (terminated)
		.csr_readdata      (),                                                                 // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                             // (terminated)
		.almost_full_data  (),                                                                 // (terminated)
		.almost_empty_data (),                                                                 // (terminated)
		.in_startofpacket  (1'b0),                                                             // (terminated)
		.in_endofpacket    (1'b0),                                                             // (terminated)
		.out_startofpacket (),                                                                 // (terminated)
		.out_endofpacket   (),                                                                 // (terminated)
		.in_empty          (1'b0),                                                             // (terminated)
		.out_empty         (),                                                                 // (terminated)
		.in_error          (1'b0),                                                             // (terminated)
		.out_error         (),                                                                 // (terminated)
		.in_channel        (1'b0),                                                             // (terminated)
		.out_channel       ()                                                                  // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (99),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_TRANS_LOCK            (72),
		.PKT_SRC_ID_H              (103),
		.PKT_SRC_ID_L              (101),
		.PKT_DEST_ID_H             (106),
		.PKT_DEST_ID_L             (104),
		.PKT_BURSTWRAP_H           (91),
		.PKT_BURSTWRAP_L           (83),
		.PKT_BYTE_CNT_H            (82),
		.PKT_BYTE_CNT_L            (74),
		.PKT_PROTECTION_H          (121),
		.PKT_PROTECTION_L          (119),
		.PKT_RESPONSE_STATUS_H     (127),
		.PKT_RESPONSE_STATUS_L     (126),
		.PKT_BURST_SIZE_H          (94),
		.PKT_BURST_SIZE_L          (92),
		.PKT_ORI_BURST_SIZE_L      (128),
		.PKT_ORI_BURST_SIZE_H      (130),
		.ST_CHANNEL_W              (6),
		.ST_DATA_W                 (131),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) jtag_uart_avalon_jtag_slave_agent (
		.clk                     (System_PLL_sys_clk_clk),                                          //             clk.clk
		.reset                   (SDRAM_reset_reset_bridge_in_reset_reset),                         //       clk_reset.reset
		.m0_address              (jtag_uart_avalon_jtag_slave_agent_m0_address),                    //              m0.address
		.m0_burstcount           (jtag_uart_avalon_jtag_slave_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (jtag_uart_avalon_jtag_slave_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (jtag_uart_avalon_jtag_slave_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (jtag_uart_avalon_jtag_slave_agent_m0_lock),                       //                .lock
		.m0_readdata             (jtag_uart_avalon_jtag_slave_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (jtag_uart_avalon_jtag_slave_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (jtag_uart_avalon_jtag_slave_agent_m0_read),                       //                .read
		.m0_waitrequest          (jtag_uart_avalon_jtag_slave_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (jtag_uart_avalon_jtag_slave_agent_m0_writedata),                  //                .writedata
		.m0_write                (jtag_uart_avalon_jtag_slave_agent_m0_write),                      //                .write
		.rp_endofpacket          (jtag_uart_avalon_jtag_slave_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (jtag_uart_avalon_jtag_slave_agent_rp_ready),                      //                .ready
		.rp_valid                (jtag_uart_avalon_jtag_slave_agent_rp_valid),                      //                .valid
		.rp_data                 (jtag_uart_avalon_jtag_slave_agent_rp_data),                       //                .data
		.rp_startofpacket        (jtag_uart_avalon_jtag_slave_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (jtag_uart_avalon_jtag_slave_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (jtag_uart_avalon_jtag_slave_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (jtag_uart_avalon_jtag_slave_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (jtag_uart_avalon_jtag_slave_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (jtag_uart_avalon_jtag_slave_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (jtag_uart_avalon_jtag_slave_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (jtag_uart_avalon_jtag_slave_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (jtag_uart_avalon_jtag_slave_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (jtag_uart_avalon_jtag_slave_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (jtag_uart_avalon_jtag_slave_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (jtag_uart_avalon_jtag_slave_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (jtag_uart_avalon_jtag_slave_agent_rdata_fifo_out_ready),          // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (jtag_uart_avalon_jtag_slave_agent_rdata_fifo_out_valid),          //                .valid
		.rdata_fifo_sink_data    (jtag_uart_avalon_jtag_slave_agent_rdata_fifo_out_data),           //                .data
		.rdata_fifo_src_ready    (jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                           //     (terminated)
		.m0_writeresponserequest (),                                                                //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                             //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (132),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) jtag_uart_avalon_jtag_slave_agent_rsp_fifo (
		.clk               (System_PLL_sys_clk_clk),                                       //       clk.clk
		.reset             (SDRAM_reset_reset_bridge_in_reset_reset),                      // clk_reset.reset
		.in_data           (jtag_uart_avalon_jtag_slave_agent_rf_source_data),             //        in.data
		.in_valid          (jtag_uart_avalon_jtag_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (jtag_uart_avalon_jtag_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (jtag_uart_avalon_jtag_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (jtag_uart_avalon_jtag_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                        // (terminated)
		.csr_read          (1'b0),                                                         // (terminated)
		.csr_write         (1'b0),                                                         // (terminated)
		.csr_readdata      (),                                                             // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                         // (terminated)
		.almost_full_data  (),                                                             // (terminated)
		.almost_empty_data (),                                                             // (terminated)
		.in_empty          (1'b0),                                                         // (terminated)
		.out_empty         (),                                                             // (terminated)
		.in_error          (1'b0),                                                         // (terminated)
		.out_error         (),                                                             // (terminated)
		.in_channel        (1'b0),                                                         // (terminated)
		.out_channel       ()                                                              // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) jtag_uart_avalon_jtag_slave_agent_rdata_fifo (
		.clk               (System_PLL_sys_clk_clk),                                 //       clk.clk
		.reset             (SDRAM_reset_reset_bridge_in_reset_reset),                // clk_reset.reset
		.in_data           (jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (jtag_uart_avalon_jtag_slave_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (jtag_uart_avalon_jtag_slave_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (jtag_uart_avalon_jtag_slave_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                                  // (terminated)
		.csr_read          (1'b0),                                                   // (terminated)
		.csr_write         (1'b0),                                                   // (terminated)
		.csr_readdata      (),                                                       // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                   // (terminated)
		.almost_full_data  (),                                                       // (terminated)
		.almost_empty_data (),                                                       // (terminated)
		.in_startofpacket  (1'b0),                                                   // (terminated)
		.in_endofpacket    (1'b0),                                                   // (terminated)
		.out_startofpacket (),                                                       // (terminated)
		.out_endofpacket   (),                                                       // (terminated)
		.in_empty          (1'b0),                                                   // (terminated)
		.out_empty         (),                                                       // (terminated)
		.in_error          (1'b0),                                                   // (terminated)
		.out_error         (),                                                       // (terminated)
		.in_channel        (1'b0),                                                   // (terminated)
		.out_channel       ()                                                        // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (99),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_TRANS_LOCK            (72),
		.PKT_SRC_ID_H              (103),
		.PKT_SRC_ID_L              (101),
		.PKT_DEST_ID_H             (106),
		.PKT_DEST_ID_L             (104),
		.PKT_BURSTWRAP_H           (91),
		.PKT_BURSTWRAP_L           (83),
		.PKT_BYTE_CNT_H            (82),
		.PKT_BYTE_CNT_L            (74),
		.PKT_PROTECTION_H          (121),
		.PKT_PROTECTION_L          (119),
		.PKT_RESPONSE_STATUS_H     (127),
		.PKT_RESPONSE_STATUS_L     (126),
		.PKT_BURST_SIZE_H          (94),
		.PKT_BURST_SIZE_L          (92),
		.PKT_ORI_BURST_SIZE_L      (128),
		.PKT_ORI_BURST_SIZE_H      (130),
		.ST_CHANNEL_W              (6),
		.ST_DATA_W                 (131),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) interval_timer_s1_agent (
		.clk                     (System_PLL_sys_clk_clk),                                //             clk.clk
		.reset                   (SDRAM_reset_reset_bridge_in_reset_reset),               //       clk_reset.reset
		.m0_address              (interval_timer_s1_agent_m0_address),                    //              m0.address
		.m0_burstcount           (interval_timer_s1_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (interval_timer_s1_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (interval_timer_s1_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (interval_timer_s1_agent_m0_lock),                       //                .lock
		.m0_readdata             (interval_timer_s1_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (interval_timer_s1_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (interval_timer_s1_agent_m0_read),                       //                .read
		.m0_waitrequest          (interval_timer_s1_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (interval_timer_s1_agent_m0_writedata),                  //                .writedata
		.m0_write                (interval_timer_s1_agent_m0_write),                      //                .write
		.rp_endofpacket          (interval_timer_s1_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (interval_timer_s1_agent_rp_ready),                      //                .ready
		.rp_valid                (interval_timer_s1_agent_rp_valid),                      //                .valid
		.rp_data                 (interval_timer_s1_agent_rp_data),                       //                .data
		.rp_startofpacket        (interval_timer_s1_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (interval_timer_s1_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (interval_timer_s1_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (interval_timer_s1_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (interval_timer_s1_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (interval_timer_s1_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (interval_timer_s1_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (interval_timer_s1_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (interval_timer_s1_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (interval_timer_s1_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (interval_timer_s1_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (interval_timer_s1_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (interval_timer_s1_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (interval_timer_s1_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (interval_timer_s1_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (interval_timer_s1_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (interval_timer_s1_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (interval_timer_s1_agent_rdata_fifo_out_ready),          // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (interval_timer_s1_agent_rdata_fifo_out_valid),          //                .valid
		.rdata_fifo_sink_data    (interval_timer_s1_agent_rdata_fifo_out_data),           //                .data
		.rdata_fifo_src_ready    (interval_timer_s1_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (interval_timer_s1_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (interval_timer_s1_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                 //     (terminated)
		.m0_writeresponserequest (),                                                      //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                   //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (132),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) interval_timer_s1_agent_rsp_fifo (
		.clk               (System_PLL_sys_clk_clk),                             //       clk.clk
		.reset             (SDRAM_reset_reset_bridge_in_reset_reset),            // clk_reset.reset
		.in_data           (interval_timer_s1_agent_rf_source_data),             //        in.data
		.in_valid          (interval_timer_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (interval_timer_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (interval_timer_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (interval_timer_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (interval_timer_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (interval_timer_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (interval_timer_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (interval_timer_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (interval_timer_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                              // (terminated)
		.csr_read          (1'b0),                                               // (terminated)
		.csr_write         (1'b0),                                               // (terminated)
		.csr_readdata      (),                                                   // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),               // (terminated)
		.almost_full_data  (),                                                   // (terminated)
		.almost_empty_data (),                                                   // (terminated)
		.in_empty          (1'b0),                                               // (terminated)
		.out_empty         (),                                                   // (terminated)
		.in_error          (1'b0),                                               // (terminated)
		.out_error         (),                                                   // (terminated)
		.in_channel        (1'b0),                                               // (terminated)
		.out_channel       ()                                                    // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) interval_timer_s1_agent_rdata_fifo (
		.clk               (System_PLL_sys_clk_clk),                       //       clk.clk
		.reset             (SDRAM_reset_reset_bridge_in_reset_reset),      // clk_reset.reset
		.in_data           (interval_timer_s1_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (interval_timer_s1_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (interval_timer_s1_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (interval_timer_s1_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (interval_timer_s1_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (interval_timer_s1_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                        // (terminated)
		.csr_read          (1'b0),                                         // (terminated)
		.csr_write         (1'b0),                                         // (terminated)
		.csr_readdata      (),                                             // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),         // (terminated)
		.almost_full_data  (),                                             // (terminated)
		.almost_empty_data (),                                             // (terminated)
		.in_startofpacket  (1'b0),                                         // (terminated)
		.in_endofpacket    (1'b0),                                         // (terminated)
		.out_startofpacket (),                                             // (terminated)
		.out_endofpacket   (),                                             // (terminated)
		.in_empty          (1'b0),                                         // (terminated)
		.out_empty         (),                                             // (terminated)
		.in_error          (1'b0),                                         // (terminated)
		.out_error         (),                                             // (terminated)
		.in_channel        (1'b0),                                         // (terminated)
		.out_channel       ()                                              // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (99),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_TRANS_LOCK            (72),
		.PKT_SRC_ID_H              (103),
		.PKT_SRC_ID_L              (101),
		.PKT_DEST_ID_H             (106),
		.PKT_DEST_ID_L             (104),
		.PKT_BURSTWRAP_H           (91),
		.PKT_BURSTWRAP_L           (83),
		.PKT_BYTE_CNT_H            (82),
		.PKT_BYTE_CNT_L            (74),
		.PKT_PROTECTION_H          (121),
		.PKT_PROTECTION_L          (119),
		.PKT_RESPONSE_STATUS_H     (127),
		.PKT_RESPONSE_STATUS_L     (126),
		.PKT_BURST_SIZE_H          (94),
		.PKT_BURST_SIZE_L          (92),
		.PKT_ORI_BURST_SIZE_L      (128),
		.PKT_ORI_BURST_SIZE_H      (130),
		.ST_CHANNEL_W              (6),
		.ST_DATA_W                 (131),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) leds_s1_agent (
		.clk                     (System_PLL_sys_clk_clk),                      //             clk.clk
		.reset                   (SDRAM_reset_reset_bridge_in_reset_reset),     //       clk_reset.reset
		.m0_address              (leds_s1_agent_m0_address),                    //              m0.address
		.m0_burstcount           (leds_s1_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (leds_s1_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (leds_s1_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (leds_s1_agent_m0_lock),                       //                .lock
		.m0_readdata             (leds_s1_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (leds_s1_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (leds_s1_agent_m0_read),                       //                .read
		.m0_waitrequest          (leds_s1_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (leds_s1_agent_m0_writedata),                  //                .writedata
		.m0_write                (leds_s1_agent_m0_write),                      //                .write
		.rp_endofpacket          (leds_s1_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (leds_s1_agent_rp_ready),                      //                .ready
		.rp_valid                (leds_s1_agent_rp_valid),                      //                .valid
		.rp_data                 (leds_s1_agent_rp_data),                       //                .data
		.rp_startofpacket        (leds_s1_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (leds_s1_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (leds_s1_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (leds_s1_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (leds_s1_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (leds_s1_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (leds_s1_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (leds_s1_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (leds_s1_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (leds_s1_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (leds_s1_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (leds_s1_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (leds_s1_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (leds_s1_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (leds_s1_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (leds_s1_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (leds_s1_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (leds_s1_agent_rdata_fifo_out_ready),          // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (leds_s1_agent_rdata_fifo_out_valid),          //                .valid
		.rdata_fifo_sink_data    (leds_s1_agent_rdata_fifo_out_data),           //                .data
		.rdata_fifo_src_ready    (leds_s1_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (leds_s1_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (leds_s1_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                       //     (terminated)
		.m0_writeresponserequest (),                                            //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                         //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (132),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) leds_s1_agent_rsp_fifo (
		.clk               (System_PLL_sys_clk_clk),                   //       clk.clk
		.reset             (SDRAM_reset_reset_bridge_in_reset_reset),  // clk_reset.reset
		.in_data           (leds_s1_agent_rf_source_data),             //        in.data
		.in_valid          (leds_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (leds_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (leds_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (leds_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (leds_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (leds_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (leds_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (leds_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (leds_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                    // (terminated)
		.csr_read          (1'b0),                                     // (terminated)
		.csr_write         (1'b0),                                     // (terminated)
		.csr_readdata      (),                                         // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),     // (terminated)
		.almost_full_data  (),                                         // (terminated)
		.almost_empty_data (),                                         // (terminated)
		.in_empty          (1'b0),                                     // (terminated)
		.out_empty         (),                                         // (terminated)
		.in_error          (1'b0),                                     // (terminated)
		.out_error         (),                                         // (terminated)
		.in_channel        (1'b0),                                     // (terminated)
		.out_channel       ()                                          // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) leds_s1_agent_rdata_fifo (
		.clk               (System_PLL_sys_clk_clk),                  //       clk.clk
		.reset             (SDRAM_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (leds_s1_agent_rdata_fifo_src_data),       //        in.data
		.in_valid          (leds_s1_agent_rdata_fifo_src_valid),      //          .valid
		.in_ready          (leds_s1_agent_rdata_fifo_src_ready),      //          .ready
		.out_data          (leds_s1_agent_rdata_fifo_out_data),       //       out.data
		.out_valid         (leds_s1_agent_rdata_fifo_out_valid),      //          .valid
		.out_ready         (leds_s1_agent_rdata_fifo_out_ready),      //          .ready
		.csr_address       (2'b00),                                   // (terminated)
		.csr_read          (1'b0),                                    // (terminated)
		.csr_write         (1'b0),                                    // (terminated)
		.csr_readdata      (),                                        // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),    // (terminated)
		.almost_full_data  (),                                        // (terminated)
		.almost_empty_data (),                                        // (terminated)
		.in_startofpacket  (1'b0),                                    // (terminated)
		.in_endofpacket    (1'b0),                                    // (terminated)
		.out_startofpacket (),                                        // (terminated)
		.out_endofpacket   (),                                        // (terminated)
		.in_empty          (1'b0),                                    // (terminated)
		.out_empty         (),                                        // (terminated)
		.in_error          (1'b0),                                    // (terminated)
		.out_error         (),                                        // (terminated)
		.in_channel        (1'b0),                                    // (terminated)
		.out_channel       ()                                         // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (99),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_TRANS_LOCK            (72),
		.PKT_SRC_ID_H              (103),
		.PKT_SRC_ID_L              (101),
		.PKT_DEST_ID_H             (106),
		.PKT_DEST_ID_L             (104),
		.PKT_BURSTWRAP_H           (91),
		.PKT_BURSTWRAP_L           (83),
		.PKT_BYTE_CNT_H            (82),
		.PKT_BYTE_CNT_L            (74),
		.PKT_PROTECTION_H          (121),
		.PKT_PROTECTION_L          (119),
		.PKT_RESPONSE_STATUS_H     (127),
		.PKT_RESPONSE_STATUS_L     (126),
		.PKT_BURST_SIZE_H          (94),
		.PKT_BURST_SIZE_L          (92),
		.PKT_ORI_BURST_SIZE_L      (128),
		.PKT_ORI_BURST_SIZE_H      (130),
		.ST_CHANNEL_W              (6),
		.ST_DATA_W                 (131),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) slider_switches_s1_agent (
		.clk                     (System_PLL_sys_clk_clk),                                 //             clk.clk
		.reset                   (SDRAM_reset_reset_bridge_in_reset_reset),                //       clk_reset.reset
		.m0_address              (slider_switches_s1_agent_m0_address),                    //              m0.address
		.m0_burstcount           (slider_switches_s1_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (slider_switches_s1_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (slider_switches_s1_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (slider_switches_s1_agent_m0_lock),                       //                .lock
		.m0_readdata             (slider_switches_s1_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (slider_switches_s1_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (slider_switches_s1_agent_m0_read),                       //                .read
		.m0_waitrequest          (slider_switches_s1_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (slider_switches_s1_agent_m0_writedata),                  //                .writedata
		.m0_write                (slider_switches_s1_agent_m0_write),                      //                .write
		.rp_endofpacket          (slider_switches_s1_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (slider_switches_s1_agent_rp_ready),                      //                .ready
		.rp_valid                (slider_switches_s1_agent_rp_valid),                      //                .valid
		.rp_data                 (slider_switches_s1_agent_rp_data),                       //                .data
		.rp_startofpacket        (slider_switches_s1_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (slider_switches_s1_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (slider_switches_s1_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (slider_switches_s1_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (slider_switches_s1_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (slider_switches_s1_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (slider_switches_s1_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (slider_switches_s1_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (slider_switches_s1_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (slider_switches_s1_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (slider_switches_s1_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (slider_switches_s1_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (slider_switches_s1_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (slider_switches_s1_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (slider_switches_s1_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (slider_switches_s1_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (slider_switches_s1_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (slider_switches_s1_agent_rdata_fifo_out_ready),          // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (slider_switches_s1_agent_rdata_fifo_out_valid),          //                .valid
		.rdata_fifo_sink_data    (slider_switches_s1_agent_rdata_fifo_out_data),           //                .data
		.rdata_fifo_src_ready    (slider_switches_s1_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (slider_switches_s1_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (slider_switches_s1_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                  //     (terminated)
		.m0_writeresponserequest (),                                                       //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                    //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (132),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) slider_switches_s1_agent_rsp_fifo (
		.clk               (System_PLL_sys_clk_clk),                              //       clk.clk
		.reset             (SDRAM_reset_reset_bridge_in_reset_reset),             // clk_reset.reset
		.in_data           (slider_switches_s1_agent_rf_source_data),             //        in.data
		.in_valid          (slider_switches_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (slider_switches_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (slider_switches_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (slider_switches_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (slider_switches_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (slider_switches_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (slider_switches_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (slider_switches_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (slider_switches_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                               // (terminated)
		.csr_read          (1'b0),                                                // (terminated)
		.csr_write         (1'b0),                                                // (terminated)
		.csr_readdata      (),                                                    // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                // (terminated)
		.almost_full_data  (),                                                    // (terminated)
		.almost_empty_data (),                                                    // (terminated)
		.in_empty          (1'b0),                                                // (terminated)
		.out_empty         (),                                                    // (terminated)
		.in_error          (1'b0),                                                // (terminated)
		.out_error         (),                                                    // (terminated)
		.in_channel        (1'b0),                                                // (terminated)
		.out_channel       ()                                                     // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) slider_switches_s1_agent_rdata_fifo (
		.clk               (System_PLL_sys_clk_clk),                        //       clk.clk
		.reset             (SDRAM_reset_reset_bridge_in_reset_reset),       // clk_reset.reset
		.in_data           (slider_switches_s1_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (slider_switches_s1_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (slider_switches_s1_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (slider_switches_s1_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (slider_switches_s1_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (slider_switches_s1_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                         // (terminated)
		.csr_read          (1'b0),                                          // (terminated)
		.csr_write         (1'b0),                                          // (terminated)
		.csr_readdata      (),                                              // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),          // (terminated)
		.almost_full_data  (),                                              // (terminated)
		.almost_empty_data (),                                              // (terminated)
		.in_startofpacket  (1'b0),                                          // (terminated)
		.in_endofpacket    (1'b0),                                          // (terminated)
		.out_startofpacket (),                                              // (terminated)
		.out_endofpacket   (),                                              // (terminated)
		.in_empty          (1'b0),                                          // (terminated)
		.out_empty         (),                                              // (terminated)
		.in_error          (1'b0),                                          // (terminated)
		.out_error         (),                                              // (terminated)
		.in_channel        (1'b0),                                          // (terminated)
		.out_channel       ()                                               // (terminated)
	);

	Computer_System_mm_interconnect_1_router router (
		.sink_ready         (arm_a9_hps_h2f_axi_master_agent_write_cp_ready),                        //      sink.ready
		.sink_valid         (arm_a9_hps_h2f_axi_master_agent_write_cp_valid),                        //          .valid
		.sink_data          (arm_a9_hps_h2f_axi_master_agent_write_cp_data),                         //          .data
		.sink_startofpacket (arm_a9_hps_h2f_axi_master_agent_write_cp_startofpacket),                //          .startofpacket
		.sink_endofpacket   (arm_a9_hps_h2f_axi_master_agent_write_cp_endofpacket),                  //          .endofpacket
		.clk                (System_PLL_sys_clk_clk),                                                //       clk.clk
		.reset              (Arm_A9_HPS_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_src_ready),                                                      //       src.ready
		.src_valid          (router_src_valid),                                                      //          .valid
		.src_data           (router_src_data),                                                       //          .data
		.src_channel        (router_src_channel),                                                    //          .channel
		.src_startofpacket  (router_src_startofpacket),                                              //          .startofpacket
		.src_endofpacket    (router_src_endofpacket)                                                 //          .endofpacket
	);

	Computer_System_mm_interconnect_1_router router_001 (
		.sink_ready         (arm_a9_hps_h2f_axi_master_agent_read_cp_ready),                         //      sink.ready
		.sink_valid         (arm_a9_hps_h2f_axi_master_agent_read_cp_valid),                         //          .valid
		.sink_data          (arm_a9_hps_h2f_axi_master_agent_read_cp_data),                          //          .data
		.sink_startofpacket (arm_a9_hps_h2f_axi_master_agent_read_cp_startofpacket),                 //          .startofpacket
		.sink_endofpacket   (arm_a9_hps_h2f_axi_master_agent_read_cp_endofpacket),                   //          .endofpacket
		.clk                (System_PLL_sys_clk_clk),                                                //       clk.clk
		.reset              (Arm_A9_HPS_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_001_src_ready),                                                  //       src.ready
		.src_valid          (router_001_src_valid),                                                  //          .valid
		.src_data           (router_001_src_data),                                                   //          .data
		.src_channel        (router_001_src_channel),                                                //          .channel
		.src_startofpacket  (router_001_src_startofpacket),                                          //          .startofpacket
		.src_endofpacket    (router_001_src_endofpacket)                                             //          .endofpacket
	);

	Computer_System_mm_interconnect_1_router_002 router_002 (
		.sink_ready         (jtag_to_fpga_bridge_master_agent_cp_ready),         //      sink.ready
		.sink_valid         (jtag_to_fpga_bridge_master_agent_cp_valid),         //          .valid
		.sink_data          (jtag_to_fpga_bridge_master_agent_cp_data),          //          .data
		.sink_startofpacket (jtag_to_fpga_bridge_master_agent_cp_startofpacket), //          .startofpacket
		.sink_endofpacket   (jtag_to_fpga_bridge_master_agent_cp_endofpacket),   //          .endofpacket
		.clk                (System_PLL_sys_clk_clk),                            //       clk.clk
		.reset              (SDRAM_reset_reset_bridge_in_reset_reset),           // clk_reset.reset
		.src_ready          (router_002_src_ready),                              //       src.ready
		.src_valid          (router_002_src_valid),                              //          .valid
		.src_data           (router_002_src_data),                               //          .data
		.src_channel        (router_002_src_channel),                            //          .channel
		.src_startofpacket  (router_002_src_startofpacket),                      //          .startofpacket
		.src_endofpacket    (router_002_src_endofpacket)                         //          .endofpacket
	);

	Computer_System_mm_interconnect_1_router_003 router_003 (
		.sink_ready         (arm_a9_hps_h2f_lw_axi_master_agent_write_cp_ready),                     //      sink.ready
		.sink_valid         (arm_a9_hps_h2f_lw_axi_master_agent_write_cp_valid),                     //          .valid
		.sink_data          (arm_a9_hps_h2f_lw_axi_master_agent_write_cp_data),                      //          .data
		.sink_startofpacket (arm_a9_hps_h2f_lw_axi_master_agent_write_cp_startofpacket),             //          .startofpacket
		.sink_endofpacket   (arm_a9_hps_h2f_lw_axi_master_agent_write_cp_endofpacket),               //          .endofpacket
		.clk                (System_PLL_sys_clk_clk),                                                //       clk.clk
		.reset              (Arm_A9_HPS_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_003_src_ready),                                                  //       src.ready
		.src_valid          (router_003_src_valid),                                                  //          .valid
		.src_data           (router_003_src_data),                                                   //          .data
		.src_channel        (router_003_src_channel),                                                //          .channel
		.src_startofpacket  (router_003_src_startofpacket),                                          //          .startofpacket
		.src_endofpacket    (router_003_src_endofpacket)                                             //          .endofpacket
	);

	Computer_System_mm_interconnect_1_router_003 router_004 (
		.sink_ready         (arm_a9_hps_h2f_lw_axi_master_agent_read_cp_ready),                      //      sink.ready
		.sink_valid         (arm_a9_hps_h2f_lw_axi_master_agent_read_cp_valid),                      //          .valid
		.sink_data          (arm_a9_hps_h2f_lw_axi_master_agent_read_cp_data),                       //          .data
		.sink_startofpacket (arm_a9_hps_h2f_lw_axi_master_agent_read_cp_startofpacket),              //          .startofpacket
		.sink_endofpacket   (arm_a9_hps_h2f_lw_axi_master_agent_read_cp_endofpacket),                //          .endofpacket
		.clk                (System_PLL_sys_clk_clk),                                                //       clk.clk
		.reset              (Arm_A9_HPS_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_004_src_ready),                                                  //       src.ready
		.src_valid          (router_004_src_valid),                                                  //          .valid
		.src_data           (router_004_src_data),                                                   //          .data
		.src_channel        (router_004_src_channel),                                                //          .channel
		.src_startofpacket  (router_004_src_startofpacket),                                          //          .startofpacket
		.src_endofpacket    (router_004_src_endofpacket)                                             //          .endofpacket
	);

	Computer_System_mm_interconnect_1_router_005 router_005 (
		.sink_ready         (vga_subsystem_pixel_dma_master_agent_cp_ready),         //      sink.ready
		.sink_valid         (vga_subsystem_pixel_dma_master_agent_cp_valid),         //          .valid
		.sink_data          (vga_subsystem_pixel_dma_master_agent_cp_data),          //          .data
		.sink_startofpacket (vga_subsystem_pixel_dma_master_agent_cp_startofpacket), //          .startofpacket
		.sink_endofpacket   (vga_subsystem_pixel_dma_master_agent_cp_endofpacket),   //          .endofpacket
		.clk                (System_PLL_sys_clk_clk),                                //       clk.clk
		.reset              (SDRAM_reset_reset_bridge_in_reset_reset),               // clk_reset.reset
		.src_ready          (router_005_src_ready),                                  //       src.ready
		.src_valid          (router_005_src_valid),                                  //          .valid
		.src_data           (router_005_src_data),                                   //          .data
		.src_channel        (router_005_src_channel),                                //          .channel
		.src_startofpacket  (router_005_src_startofpacket),                          //          .startofpacket
		.src_endofpacket    (router_005_src_endofpacket)                             //          .endofpacket
	);

	Computer_System_mm_interconnect_1_router_006 router_006 (
		.sink_ready         (sdram_s1_agent_rp_ready),                 //      sink.ready
		.sink_valid         (sdram_s1_agent_rp_valid),                 //          .valid
		.sink_data          (sdram_s1_agent_rp_data),                  //          .data
		.sink_startofpacket (sdram_s1_agent_rp_startofpacket),         //          .startofpacket
		.sink_endofpacket   (sdram_s1_agent_rp_endofpacket),           //          .endofpacket
		.clk                (System_PLL_sys_clk_clk),                  //       clk.clk
		.reset              (SDRAM_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_006_src_ready),                    //       src.ready
		.src_valid          (router_006_src_valid),                    //          .valid
		.src_data           (router_006_src_data),                     //          .data
		.src_channel        (router_006_src_channel),                  //          .channel
		.src_startofpacket  (router_006_src_startofpacket),            //          .startofpacket
		.src_endofpacket    (router_006_src_endofpacket)               //          .endofpacket
	);

	Computer_System_mm_interconnect_1_router_007 router_007 (
		.sink_ready         (vga_subsystem_pixel_dma_control_slave_agent_rp_ready),         //      sink.ready
		.sink_valid         (vga_subsystem_pixel_dma_control_slave_agent_rp_valid),         //          .valid
		.sink_data          (vga_subsystem_pixel_dma_control_slave_agent_rp_data),          //          .data
		.sink_startofpacket (vga_subsystem_pixel_dma_control_slave_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (vga_subsystem_pixel_dma_control_slave_agent_rp_endofpacket),   //          .endofpacket
		.clk                (System_PLL_sys_clk_clk),                                       //       clk.clk
		.reset              (SDRAM_reset_reset_bridge_in_reset_reset),                      // clk_reset.reset
		.src_ready          (router_007_src_ready),                                         //       src.ready
		.src_valid          (router_007_src_valid),                                         //          .valid
		.src_data           (router_007_src_data),                                          //          .data
		.src_channel        (router_007_src_channel),                                       //          .channel
		.src_startofpacket  (router_007_src_startofpacket),                                 //          .startofpacket
		.src_endofpacket    (router_007_src_endofpacket)                                    //          .endofpacket
	);

	Computer_System_mm_interconnect_1_router_008 router_008 (
		.sink_ready         (jtag_uart_avalon_jtag_slave_agent_rp_ready),         //      sink.ready
		.sink_valid         (jtag_uart_avalon_jtag_slave_agent_rp_valid),         //          .valid
		.sink_data          (jtag_uart_avalon_jtag_slave_agent_rp_data),          //          .data
		.sink_startofpacket (jtag_uart_avalon_jtag_slave_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (jtag_uart_avalon_jtag_slave_agent_rp_endofpacket),   //          .endofpacket
		.clk                (System_PLL_sys_clk_clk),                             //       clk.clk
		.reset              (SDRAM_reset_reset_bridge_in_reset_reset),            // clk_reset.reset
		.src_ready          (router_008_src_ready),                               //       src.ready
		.src_valid          (router_008_src_valid),                               //          .valid
		.src_data           (router_008_src_data),                                //          .data
		.src_channel        (router_008_src_channel),                             //          .channel
		.src_startofpacket  (router_008_src_startofpacket),                       //          .startofpacket
		.src_endofpacket    (router_008_src_endofpacket)                          //          .endofpacket
	);

	Computer_System_mm_interconnect_1_router_008 router_009 (
		.sink_ready         (interval_timer_s1_agent_rp_ready),         //      sink.ready
		.sink_valid         (interval_timer_s1_agent_rp_valid),         //          .valid
		.sink_data          (interval_timer_s1_agent_rp_data),          //          .data
		.sink_startofpacket (interval_timer_s1_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (interval_timer_s1_agent_rp_endofpacket),   //          .endofpacket
		.clk                (System_PLL_sys_clk_clk),                   //       clk.clk
		.reset              (SDRAM_reset_reset_bridge_in_reset_reset),  // clk_reset.reset
		.src_ready          (router_009_src_ready),                     //       src.ready
		.src_valid          (router_009_src_valid),                     //          .valid
		.src_data           (router_009_src_data),                      //          .data
		.src_channel        (router_009_src_channel),                   //          .channel
		.src_startofpacket  (router_009_src_startofpacket),             //          .startofpacket
		.src_endofpacket    (router_009_src_endofpacket)                //          .endofpacket
	);

	Computer_System_mm_interconnect_1_router_008 router_010 (
		.sink_ready         (leds_s1_agent_rp_ready),                  //      sink.ready
		.sink_valid         (leds_s1_agent_rp_valid),                  //          .valid
		.sink_data          (leds_s1_agent_rp_data),                   //          .data
		.sink_startofpacket (leds_s1_agent_rp_startofpacket),          //          .startofpacket
		.sink_endofpacket   (leds_s1_agent_rp_endofpacket),            //          .endofpacket
		.clk                (System_PLL_sys_clk_clk),                  //       clk.clk
		.reset              (SDRAM_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_010_src_ready),                    //       src.ready
		.src_valid          (router_010_src_valid),                    //          .valid
		.src_data           (router_010_src_data),                     //          .data
		.src_channel        (router_010_src_channel),                  //          .channel
		.src_startofpacket  (router_010_src_startofpacket),            //          .startofpacket
		.src_endofpacket    (router_010_src_endofpacket)               //          .endofpacket
	);

	Computer_System_mm_interconnect_1_router_008 router_011 (
		.sink_ready         (slider_switches_s1_agent_rp_ready),         //      sink.ready
		.sink_valid         (slider_switches_s1_agent_rp_valid),         //          .valid
		.sink_data          (slider_switches_s1_agent_rp_data),          //          .data
		.sink_startofpacket (slider_switches_s1_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (slider_switches_s1_agent_rp_endofpacket),   //          .endofpacket
		.clk                (System_PLL_sys_clk_clk),                    //       clk.clk
		.reset              (SDRAM_reset_reset_bridge_in_reset_reset),   // clk_reset.reset
		.src_ready          (router_011_src_ready),                      //       src.ready
		.src_valid          (router_011_src_valid),                      //          .valid
		.src_data           (router_011_src_data),                       //          .data
		.src_channel        (router_011_src_channel),                    //          .channel
		.src_startofpacket  (router_011_src_startofpacket),              //          .startofpacket
		.src_endofpacket    (router_011_src_endofpacket)                 //          .endofpacket
	);

	altera_merlin_traffic_limiter #(
		.PKT_DEST_ID_H             (214),
		.PKT_DEST_ID_L             (212),
		.PKT_SRC_ID_H              (211),
		.PKT_SRC_ID_L              (209),
		.PKT_TRANS_POSTED          (177),
		.PKT_TRANS_WRITE           (178),
		.MAX_OUTSTANDING_RESPONSES (9),
		.PIPELINED                 (0),
		.ST_DATA_W                 (239),
		.ST_CHANNEL_W              (6),
		.VALID_WIDTH               (6),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (0),
		.PKT_BYTE_CNT_H            (190),
		.PKT_BYTE_CNT_L            (182),
		.PKT_BYTEEN_H              (143),
		.PKT_BYTEEN_L              (128),
		.REORDER                   (0)
	) arm_a9_hps_h2f_axi_master_wr_limiter (
		.clk                    (System_PLL_sys_clk_clk),                                                //       clk.clk
		.reset                  (Arm_A9_HPS_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.cmd_sink_ready         (router_src_ready),                                                      //  cmd_sink.ready
		.cmd_sink_valid         (router_src_valid),                                                      //          .valid
		.cmd_sink_data          (router_src_data),                                                       //          .data
		.cmd_sink_channel       (router_src_channel),                                                    //          .channel
		.cmd_sink_startofpacket (router_src_startofpacket),                                              //          .startofpacket
		.cmd_sink_endofpacket   (router_src_endofpacket),                                                //          .endofpacket
		.cmd_src_ready          (arm_a9_hps_h2f_axi_master_wr_limiter_cmd_src_ready),                    //   cmd_src.ready
		.cmd_src_data           (arm_a9_hps_h2f_axi_master_wr_limiter_cmd_src_data),                     //          .data
		.cmd_src_channel        (arm_a9_hps_h2f_axi_master_wr_limiter_cmd_src_channel),                  //          .channel
		.cmd_src_startofpacket  (arm_a9_hps_h2f_axi_master_wr_limiter_cmd_src_startofpacket),            //          .startofpacket
		.cmd_src_endofpacket    (arm_a9_hps_h2f_axi_master_wr_limiter_cmd_src_endofpacket),              //          .endofpacket
		.rsp_sink_ready         (rsp_mux_src_ready),                                                     //  rsp_sink.ready
		.rsp_sink_valid         (rsp_mux_src_valid),                                                     //          .valid
		.rsp_sink_channel       (rsp_mux_src_channel),                                                   //          .channel
		.rsp_sink_data          (rsp_mux_src_data),                                                      //          .data
		.rsp_sink_startofpacket (rsp_mux_src_startofpacket),                                             //          .startofpacket
		.rsp_sink_endofpacket   (rsp_mux_src_endofpacket),                                               //          .endofpacket
		.rsp_src_ready          (arm_a9_hps_h2f_axi_master_wr_limiter_rsp_src_ready),                    //   rsp_src.ready
		.rsp_src_valid          (arm_a9_hps_h2f_axi_master_wr_limiter_rsp_src_valid),                    //          .valid
		.rsp_src_data           (arm_a9_hps_h2f_axi_master_wr_limiter_rsp_src_data),                     //          .data
		.rsp_src_channel        (arm_a9_hps_h2f_axi_master_wr_limiter_rsp_src_channel),                  //          .channel
		.rsp_src_startofpacket  (arm_a9_hps_h2f_axi_master_wr_limiter_rsp_src_startofpacket),            //          .startofpacket
		.rsp_src_endofpacket    (arm_a9_hps_h2f_axi_master_wr_limiter_rsp_src_endofpacket),              //          .endofpacket
		.cmd_src_valid          (arm_a9_hps_h2f_axi_master_wr_limiter_cmd_valid_data)                    // cmd_valid.data
	);

	altera_merlin_traffic_limiter #(
		.PKT_DEST_ID_H             (214),
		.PKT_DEST_ID_L             (212),
		.PKT_SRC_ID_H              (211),
		.PKT_SRC_ID_L              (209),
		.PKT_TRANS_POSTED          (177),
		.PKT_TRANS_WRITE           (178),
		.MAX_OUTSTANDING_RESPONSES (9),
		.PIPELINED                 (0),
		.ST_DATA_W                 (239),
		.ST_CHANNEL_W              (6),
		.VALID_WIDTH               (6),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (0),
		.PKT_BYTE_CNT_H            (190),
		.PKT_BYTE_CNT_L            (182),
		.PKT_BYTEEN_H              (143),
		.PKT_BYTEEN_L              (128),
		.REORDER                   (0)
	) arm_a9_hps_h2f_axi_master_rd_limiter (
		.clk                    (System_PLL_sys_clk_clk),                                                //       clk.clk
		.reset                  (Arm_A9_HPS_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.cmd_sink_ready         (router_001_src_ready),                                                  //  cmd_sink.ready
		.cmd_sink_valid         (router_001_src_valid),                                                  //          .valid
		.cmd_sink_data          (router_001_src_data),                                                   //          .data
		.cmd_sink_channel       (router_001_src_channel),                                                //          .channel
		.cmd_sink_startofpacket (router_001_src_startofpacket),                                          //          .startofpacket
		.cmd_sink_endofpacket   (router_001_src_endofpacket),                                            //          .endofpacket
		.cmd_src_ready          (arm_a9_hps_h2f_axi_master_rd_limiter_cmd_src_ready),                    //   cmd_src.ready
		.cmd_src_data           (arm_a9_hps_h2f_axi_master_rd_limiter_cmd_src_data),                     //          .data
		.cmd_src_channel        (arm_a9_hps_h2f_axi_master_rd_limiter_cmd_src_channel),                  //          .channel
		.cmd_src_startofpacket  (arm_a9_hps_h2f_axi_master_rd_limiter_cmd_src_startofpacket),            //          .startofpacket
		.cmd_src_endofpacket    (arm_a9_hps_h2f_axi_master_rd_limiter_cmd_src_endofpacket),              //          .endofpacket
		.rsp_sink_ready         (rsp_mux_001_src_ready),                                                 //  rsp_sink.ready
		.rsp_sink_valid         (rsp_mux_001_src_valid),                                                 //          .valid
		.rsp_sink_channel       (rsp_mux_001_src_channel),                                               //          .channel
		.rsp_sink_data          (rsp_mux_001_src_data),                                                  //          .data
		.rsp_sink_startofpacket (rsp_mux_001_src_startofpacket),                                         //          .startofpacket
		.rsp_sink_endofpacket   (rsp_mux_001_src_endofpacket),                                           //          .endofpacket
		.rsp_src_ready          (arm_a9_hps_h2f_axi_master_rd_limiter_rsp_src_ready),                    //   rsp_src.ready
		.rsp_src_valid          (arm_a9_hps_h2f_axi_master_rd_limiter_rsp_src_valid),                    //          .valid
		.rsp_src_data           (arm_a9_hps_h2f_axi_master_rd_limiter_rsp_src_data),                     //          .data
		.rsp_src_channel        (arm_a9_hps_h2f_axi_master_rd_limiter_rsp_src_channel),                  //          .channel
		.rsp_src_startofpacket  (arm_a9_hps_h2f_axi_master_rd_limiter_rsp_src_startofpacket),            //          .startofpacket
		.rsp_src_endofpacket    (arm_a9_hps_h2f_axi_master_rd_limiter_rsp_src_endofpacket),              //          .endofpacket
		.cmd_src_valid          (arm_a9_hps_h2f_axi_master_rd_limiter_cmd_valid_data)                    // cmd_valid.data
	);

	altera_merlin_traffic_limiter #(
		.PKT_DEST_ID_H             (106),
		.PKT_DEST_ID_L             (104),
		.PKT_SRC_ID_H              (103),
		.PKT_SRC_ID_L              (101),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.MAX_OUTSTANDING_RESPONSES (9),
		.PIPELINED                 (0),
		.ST_DATA_W                 (131),
		.ST_CHANNEL_W              (6),
		.VALID_WIDTH               (6),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (0),
		.PKT_BYTE_CNT_H            (82),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.REORDER                   (0)
	) jtag_to_fpga_bridge_master_limiter (
		.clk                    (System_PLL_sys_clk_clk),                                   //       clk.clk
		.reset                  (SDRAM_reset_reset_bridge_in_reset_reset),                  // clk_reset.reset
		.cmd_sink_ready         (router_002_src_ready),                                     //  cmd_sink.ready
		.cmd_sink_valid         (router_002_src_valid),                                     //          .valid
		.cmd_sink_data          (router_002_src_data),                                      //          .data
		.cmd_sink_channel       (router_002_src_channel),                                   //          .channel
		.cmd_sink_startofpacket (router_002_src_startofpacket),                             //          .startofpacket
		.cmd_sink_endofpacket   (router_002_src_endofpacket),                               //          .endofpacket
		.cmd_src_ready          (jtag_to_fpga_bridge_master_limiter_cmd_src_ready),         //   cmd_src.ready
		.cmd_src_data           (jtag_to_fpga_bridge_master_limiter_cmd_src_data),          //          .data
		.cmd_src_channel        (jtag_to_fpga_bridge_master_limiter_cmd_src_channel),       //          .channel
		.cmd_src_startofpacket  (jtag_to_fpga_bridge_master_limiter_cmd_src_startofpacket), //          .startofpacket
		.cmd_src_endofpacket    (jtag_to_fpga_bridge_master_limiter_cmd_src_endofpacket),   //          .endofpacket
		.rsp_sink_ready         (rsp_mux_002_src_ready),                                    //  rsp_sink.ready
		.rsp_sink_valid         (rsp_mux_002_src_valid),                                    //          .valid
		.rsp_sink_channel       (rsp_mux_002_src_channel),                                  //          .channel
		.rsp_sink_data          (rsp_mux_002_src_data),                                     //          .data
		.rsp_sink_startofpacket (rsp_mux_002_src_startofpacket),                            //          .startofpacket
		.rsp_sink_endofpacket   (rsp_mux_002_src_endofpacket),                              //          .endofpacket
		.rsp_src_ready          (jtag_to_fpga_bridge_master_limiter_rsp_src_ready),         //   rsp_src.ready
		.rsp_src_valid          (jtag_to_fpga_bridge_master_limiter_rsp_src_valid),         //          .valid
		.rsp_src_data           (jtag_to_fpga_bridge_master_limiter_rsp_src_data),          //          .data
		.rsp_src_channel        (jtag_to_fpga_bridge_master_limiter_rsp_src_channel),       //          .channel
		.rsp_src_startofpacket  (jtag_to_fpga_bridge_master_limiter_rsp_src_startofpacket), //          .startofpacket
		.rsp_src_endofpacket    (jtag_to_fpga_bridge_master_limiter_rsp_src_endofpacket),   //          .endofpacket
		.cmd_src_valid          (jtag_to_fpga_bridge_master_limiter_cmd_valid_data)         // cmd_valid.data
	);

	altera_merlin_traffic_limiter #(
		.PKT_DEST_ID_H             (106),
		.PKT_DEST_ID_L             (104),
		.PKT_SRC_ID_H              (103),
		.PKT_SRC_ID_L              (101),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.MAX_OUTSTANDING_RESPONSES (3),
		.PIPELINED                 (0),
		.ST_DATA_W                 (131),
		.ST_CHANNEL_W              (6),
		.VALID_WIDTH               (6),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (0),
		.PKT_BYTE_CNT_H            (82),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.REORDER                   (0)
	) arm_a9_hps_h2f_lw_axi_master_wr_limiter (
		.clk                    (System_PLL_sys_clk_clk),                                                //       clk.clk
		.reset                  (Arm_A9_HPS_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.cmd_sink_ready         (router_003_src_ready),                                                  //  cmd_sink.ready
		.cmd_sink_valid         (router_003_src_valid),                                                  //          .valid
		.cmd_sink_data          (router_003_src_data),                                                   //          .data
		.cmd_sink_channel       (router_003_src_channel),                                                //          .channel
		.cmd_sink_startofpacket (router_003_src_startofpacket),                                          //          .startofpacket
		.cmd_sink_endofpacket   (router_003_src_endofpacket),                                            //          .endofpacket
		.cmd_src_ready          (arm_a9_hps_h2f_lw_axi_master_wr_limiter_cmd_src_ready),                 //   cmd_src.ready
		.cmd_src_data           (arm_a9_hps_h2f_lw_axi_master_wr_limiter_cmd_src_data),                  //          .data
		.cmd_src_channel        (arm_a9_hps_h2f_lw_axi_master_wr_limiter_cmd_src_channel),               //          .channel
		.cmd_src_startofpacket  (arm_a9_hps_h2f_lw_axi_master_wr_limiter_cmd_src_startofpacket),         //          .startofpacket
		.cmd_src_endofpacket    (arm_a9_hps_h2f_lw_axi_master_wr_limiter_cmd_src_endofpacket),           //          .endofpacket
		.rsp_sink_ready         (rsp_mux_003_src_ready),                                                 //  rsp_sink.ready
		.rsp_sink_valid         (rsp_mux_003_src_valid),                                                 //          .valid
		.rsp_sink_channel       (rsp_mux_003_src_channel),                                               //          .channel
		.rsp_sink_data          (rsp_mux_003_src_data),                                                  //          .data
		.rsp_sink_startofpacket (rsp_mux_003_src_startofpacket),                                         //          .startofpacket
		.rsp_sink_endofpacket   (rsp_mux_003_src_endofpacket),                                           //          .endofpacket
		.rsp_src_ready          (arm_a9_hps_h2f_lw_axi_master_wr_limiter_rsp_src_ready),                 //   rsp_src.ready
		.rsp_src_valid          (arm_a9_hps_h2f_lw_axi_master_wr_limiter_rsp_src_valid),                 //          .valid
		.rsp_src_data           (arm_a9_hps_h2f_lw_axi_master_wr_limiter_rsp_src_data),                  //          .data
		.rsp_src_channel        (arm_a9_hps_h2f_lw_axi_master_wr_limiter_rsp_src_channel),               //          .channel
		.rsp_src_startofpacket  (arm_a9_hps_h2f_lw_axi_master_wr_limiter_rsp_src_startofpacket),         //          .startofpacket
		.rsp_src_endofpacket    (arm_a9_hps_h2f_lw_axi_master_wr_limiter_rsp_src_endofpacket),           //          .endofpacket
		.cmd_src_valid          (arm_a9_hps_h2f_lw_axi_master_wr_limiter_cmd_valid_data)                 // cmd_valid.data
	);

	altera_merlin_traffic_limiter #(
		.PKT_DEST_ID_H             (106),
		.PKT_DEST_ID_L             (104),
		.PKT_SRC_ID_H              (103),
		.PKT_SRC_ID_L              (101),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.MAX_OUTSTANDING_RESPONSES (3),
		.PIPELINED                 (0),
		.ST_DATA_W                 (131),
		.ST_CHANNEL_W              (6),
		.VALID_WIDTH               (6),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (0),
		.PKT_BYTE_CNT_H            (82),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.REORDER                   (0)
	) arm_a9_hps_h2f_lw_axi_master_rd_limiter (
		.clk                    (System_PLL_sys_clk_clk),                                                //       clk.clk
		.reset                  (Arm_A9_HPS_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.cmd_sink_ready         (router_004_src_ready),                                                  //  cmd_sink.ready
		.cmd_sink_valid         (router_004_src_valid),                                                  //          .valid
		.cmd_sink_data          (router_004_src_data),                                                   //          .data
		.cmd_sink_channel       (router_004_src_channel),                                                //          .channel
		.cmd_sink_startofpacket (router_004_src_startofpacket),                                          //          .startofpacket
		.cmd_sink_endofpacket   (router_004_src_endofpacket),                                            //          .endofpacket
		.cmd_src_ready          (arm_a9_hps_h2f_lw_axi_master_rd_limiter_cmd_src_ready),                 //   cmd_src.ready
		.cmd_src_data           (arm_a9_hps_h2f_lw_axi_master_rd_limiter_cmd_src_data),                  //          .data
		.cmd_src_channel        (arm_a9_hps_h2f_lw_axi_master_rd_limiter_cmd_src_channel),               //          .channel
		.cmd_src_startofpacket  (arm_a9_hps_h2f_lw_axi_master_rd_limiter_cmd_src_startofpacket),         //          .startofpacket
		.cmd_src_endofpacket    (arm_a9_hps_h2f_lw_axi_master_rd_limiter_cmd_src_endofpacket),           //          .endofpacket
		.rsp_sink_ready         (rsp_mux_004_src_ready),                                                 //  rsp_sink.ready
		.rsp_sink_valid         (rsp_mux_004_src_valid),                                                 //          .valid
		.rsp_sink_channel       (rsp_mux_004_src_channel),                                               //          .channel
		.rsp_sink_data          (rsp_mux_004_src_data),                                                  //          .data
		.rsp_sink_startofpacket (rsp_mux_004_src_startofpacket),                                         //          .startofpacket
		.rsp_sink_endofpacket   (rsp_mux_004_src_endofpacket),                                           //          .endofpacket
		.rsp_src_ready          (arm_a9_hps_h2f_lw_axi_master_rd_limiter_rsp_src_ready),                 //   rsp_src.ready
		.rsp_src_valid          (arm_a9_hps_h2f_lw_axi_master_rd_limiter_rsp_src_valid),                 //          .valid
		.rsp_src_data           (arm_a9_hps_h2f_lw_axi_master_rd_limiter_rsp_src_data),                  //          .data
		.rsp_src_channel        (arm_a9_hps_h2f_lw_axi_master_rd_limiter_rsp_src_channel),               //          .channel
		.rsp_src_startofpacket  (arm_a9_hps_h2f_lw_axi_master_rd_limiter_rsp_src_startofpacket),         //          .startofpacket
		.rsp_src_endofpacket    (arm_a9_hps_h2f_lw_axi_master_rd_limiter_rsp_src_endofpacket),           //          .endofpacket
		.cmd_src_valid          (arm_a9_hps_h2f_lw_axi_master_rd_limiter_cmd_valid_data)                 // cmd_valid.data
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (49),
		.PKT_ADDR_L                (18),
		.PKT_BEGIN_BURST           (81),
		.PKT_BYTE_CNT_H            (64),
		.PKT_BYTE_CNT_L            (56),
		.PKT_BYTEEN_H              (17),
		.PKT_BYTEEN_L              (16),
		.PKT_BURST_SIZE_H          (76),
		.PKT_BURST_SIZE_L          (74),
		.PKT_BURST_TYPE_H          (78),
		.PKT_BURST_TYPE_L          (77),
		.PKT_BURSTWRAP_H           (73),
		.PKT_BURSTWRAP_L           (65),
		.PKT_TRANS_COMPRESSED_READ (50),
		.PKT_TRANS_WRITE           (52),
		.PKT_TRANS_READ            (53),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (113),
		.ST_CHANNEL_W              (6),
		.OUT_BYTE_CNT_H            (57),
		.OUT_BURSTWRAP_H           (73),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) sdram_s1_burst_adapter (
		.clk                   (System_PLL_sys_clk_clk),                       //       cr0.clk
		.reset                 (SDRAM_reset_reset_bridge_in_reset_reset),      // cr0_reset.reset
		.sink0_valid           (cmd_mux_src_valid),                            //     sink0.valid
		.sink0_data            (cmd_mux_src_data),                             //          .data
		.sink0_channel         (cmd_mux_src_channel),                          //          .channel
		.sink0_startofpacket   (cmd_mux_src_startofpacket),                    //          .startofpacket
		.sink0_endofpacket     (cmd_mux_src_endofpacket),                      //          .endofpacket
		.sink0_ready           (cmd_mux_src_ready),                            //          .ready
		.source0_valid         (sdram_s1_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (sdram_s1_burst_adapter_source0_data),          //          .data
		.source0_channel       (sdram_s1_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (sdram_s1_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (sdram_s1_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (sdram_s1_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (99),
		.PKT_BYTE_CNT_H            (82),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (94),
		.PKT_BURST_SIZE_L          (92),
		.PKT_BURST_TYPE_H          (96),
		.PKT_BURST_TYPE_L          (95),
		.PKT_BURSTWRAP_H           (91),
		.PKT_BURSTWRAP_L           (83),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (131),
		.ST_CHANNEL_W              (6),
		.OUT_BYTE_CNT_H            (76),
		.OUT_BURSTWRAP_H           (91),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) vga_subsystem_pixel_dma_control_slave_burst_adapter (
		.clk                   (System_PLL_sys_clk_clk),                                                    //       cr0.clk
		.reset                 (SDRAM_reset_reset_bridge_in_reset_reset),                                   // cr0_reset.reset
		.sink0_valid           (cmd_mux_001_src_valid),                                                     //     sink0.valid
		.sink0_data            (cmd_mux_001_src_data),                                                      //          .data
		.sink0_channel         (cmd_mux_001_src_channel),                                                   //          .channel
		.sink0_startofpacket   (cmd_mux_001_src_startofpacket),                                             //          .startofpacket
		.sink0_endofpacket     (cmd_mux_001_src_endofpacket),                                               //          .endofpacket
		.sink0_ready           (cmd_mux_001_src_ready),                                                     //          .ready
		.source0_valid         (vga_subsystem_pixel_dma_control_slave_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (vga_subsystem_pixel_dma_control_slave_burst_adapter_source0_data),          //          .data
		.source0_channel       (vga_subsystem_pixel_dma_control_slave_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (vga_subsystem_pixel_dma_control_slave_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (vga_subsystem_pixel_dma_control_slave_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (vga_subsystem_pixel_dma_control_slave_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (99),
		.PKT_BYTE_CNT_H            (82),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (94),
		.PKT_BURST_SIZE_L          (92),
		.PKT_BURST_TYPE_H          (96),
		.PKT_BURST_TYPE_L          (95),
		.PKT_BURSTWRAP_H           (91),
		.PKT_BURSTWRAP_L           (83),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (131),
		.ST_CHANNEL_W              (6),
		.OUT_BYTE_CNT_H            (76),
		.OUT_BURSTWRAP_H           (91),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) jtag_uart_avalon_jtag_slave_burst_adapter (
		.clk                   (System_PLL_sys_clk_clk),                                          //       cr0.clk
		.reset                 (SDRAM_reset_reset_bridge_in_reset_reset),                         // cr0_reset.reset
		.sink0_valid           (cmd_mux_002_src_valid),                                           //     sink0.valid
		.sink0_data            (cmd_mux_002_src_data),                                            //          .data
		.sink0_channel         (cmd_mux_002_src_channel),                                         //          .channel
		.sink0_startofpacket   (cmd_mux_002_src_startofpacket),                                   //          .startofpacket
		.sink0_endofpacket     (cmd_mux_002_src_endofpacket),                                     //          .endofpacket
		.sink0_ready           (cmd_mux_002_src_ready),                                           //          .ready
		.source0_valid         (jtag_uart_avalon_jtag_slave_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (jtag_uart_avalon_jtag_slave_burst_adapter_source0_data),          //          .data
		.source0_channel       (jtag_uart_avalon_jtag_slave_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (jtag_uart_avalon_jtag_slave_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (jtag_uart_avalon_jtag_slave_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (jtag_uart_avalon_jtag_slave_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (99),
		.PKT_BYTE_CNT_H            (82),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (94),
		.PKT_BURST_SIZE_L          (92),
		.PKT_BURST_TYPE_H          (96),
		.PKT_BURST_TYPE_L          (95),
		.PKT_BURSTWRAP_H           (91),
		.PKT_BURSTWRAP_L           (83),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (131),
		.ST_CHANNEL_W              (6),
		.OUT_BYTE_CNT_H            (76),
		.OUT_BURSTWRAP_H           (91),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) interval_timer_s1_burst_adapter (
		.clk                   (System_PLL_sys_clk_clk),                                //       cr0.clk
		.reset                 (SDRAM_reset_reset_bridge_in_reset_reset),               // cr0_reset.reset
		.sink0_valid           (cmd_mux_003_src_valid),                                 //     sink0.valid
		.sink0_data            (cmd_mux_003_src_data),                                  //          .data
		.sink0_channel         (cmd_mux_003_src_channel),                               //          .channel
		.sink0_startofpacket   (cmd_mux_003_src_startofpacket),                         //          .startofpacket
		.sink0_endofpacket     (cmd_mux_003_src_endofpacket),                           //          .endofpacket
		.sink0_ready           (cmd_mux_003_src_ready),                                 //          .ready
		.source0_valid         (interval_timer_s1_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (interval_timer_s1_burst_adapter_source0_data),          //          .data
		.source0_channel       (interval_timer_s1_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (interval_timer_s1_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (interval_timer_s1_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (interval_timer_s1_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (99),
		.PKT_BYTE_CNT_H            (82),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (94),
		.PKT_BURST_SIZE_L          (92),
		.PKT_BURST_TYPE_H          (96),
		.PKT_BURST_TYPE_L          (95),
		.PKT_BURSTWRAP_H           (91),
		.PKT_BURSTWRAP_L           (83),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (131),
		.ST_CHANNEL_W              (6),
		.OUT_BYTE_CNT_H            (76),
		.OUT_BURSTWRAP_H           (91),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) leds_s1_burst_adapter (
		.clk                   (System_PLL_sys_clk_clk),                      //       cr0.clk
		.reset                 (SDRAM_reset_reset_bridge_in_reset_reset),     // cr0_reset.reset
		.sink0_valid           (cmd_mux_004_src_valid),                       //     sink0.valid
		.sink0_data            (cmd_mux_004_src_data),                        //          .data
		.sink0_channel         (cmd_mux_004_src_channel),                     //          .channel
		.sink0_startofpacket   (cmd_mux_004_src_startofpacket),               //          .startofpacket
		.sink0_endofpacket     (cmd_mux_004_src_endofpacket),                 //          .endofpacket
		.sink0_ready           (cmd_mux_004_src_ready),                       //          .ready
		.source0_valid         (leds_s1_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (leds_s1_burst_adapter_source0_data),          //          .data
		.source0_channel       (leds_s1_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (leds_s1_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (leds_s1_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (leds_s1_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (99),
		.PKT_BYTE_CNT_H            (82),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (94),
		.PKT_BURST_SIZE_L          (92),
		.PKT_BURST_TYPE_H          (96),
		.PKT_BURST_TYPE_L          (95),
		.PKT_BURSTWRAP_H           (91),
		.PKT_BURSTWRAP_L           (83),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (131),
		.ST_CHANNEL_W              (6),
		.OUT_BYTE_CNT_H            (76),
		.OUT_BURSTWRAP_H           (91),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) slider_switches_s1_burst_adapter (
		.clk                   (System_PLL_sys_clk_clk),                                 //       cr0.clk
		.reset                 (SDRAM_reset_reset_bridge_in_reset_reset),                // cr0_reset.reset
		.sink0_valid           (cmd_mux_005_src_valid),                                  //     sink0.valid
		.sink0_data            (cmd_mux_005_src_data),                                   //          .data
		.sink0_channel         (cmd_mux_005_src_channel),                                //          .channel
		.sink0_startofpacket   (cmd_mux_005_src_startofpacket),                          //          .startofpacket
		.sink0_endofpacket     (cmd_mux_005_src_endofpacket),                            //          .endofpacket
		.sink0_ready           (cmd_mux_005_src_ready),                                  //          .ready
		.source0_valid         (slider_switches_s1_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (slider_switches_s1_burst_adapter_source0_data),          //          .data
		.source0_channel       (slider_switches_s1_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (slider_switches_s1_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (slider_switches_s1_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (slider_switches_s1_burst_adapter_source0_ready)          //          .ready
	);

	Computer_System_mm_interconnect_1_cmd_demux cmd_demux (
		.clk                (System_PLL_sys_clk_clk),                                                //        clk.clk
		.reset              (Arm_A9_HPS_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), //  clk_reset.reset
		.sink_ready         (arm_a9_hps_h2f_axi_master_wr_limiter_cmd_src_ready),                    //       sink.ready
		.sink_channel       (arm_a9_hps_h2f_axi_master_wr_limiter_cmd_src_channel),                  //           .channel
		.sink_data          (arm_a9_hps_h2f_axi_master_wr_limiter_cmd_src_data),                     //           .data
		.sink_startofpacket (arm_a9_hps_h2f_axi_master_wr_limiter_cmd_src_startofpacket),            //           .startofpacket
		.sink_endofpacket   (arm_a9_hps_h2f_axi_master_wr_limiter_cmd_src_endofpacket),              //           .endofpacket
		.sink_valid         (arm_a9_hps_h2f_axi_master_wr_limiter_cmd_valid_data),                   // sink_valid.data
		.src0_ready         (cmd_demux_src0_ready),                                                  //       src0.ready
		.src0_valid         (cmd_demux_src0_valid),                                                  //           .valid
		.src0_data          (cmd_demux_src0_data),                                                   //           .data
		.src0_channel       (cmd_demux_src0_channel),                                                //           .channel
		.src0_startofpacket (cmd_demux_src0_startofpacket),                                          //           .startofpacket
		.src0_endofpacket   (cmd_demux_src0_endofpacket),                                            //           .endofpacket
		.src1_ready         (cmd_demux_src1_ready),                                                  //       src1.ready
		.src1_valid         (cmd_demux_src1_valid),                                                  //           .valid
		.src1_data          (cmd_demux_src1_data),                                                   //           .data
		.src1_channel       (cmd_demux_src1_channel),                                                //           .channel
		.src1_startofpacket (cmd_demux_src1_startofpacket),                                          //           .startofpacket
		.src1_endofpacket   (cmd_demux_src1_endofpacket)                                             //           .endofpacket
	);

	Computer_System_mm_interconnect_1_cmd_demux cmd_demux_001 (
		.clk                (System_PLL_sys_clk_clk),                                                //        clk.clk
		.reset              (Arm_A9_HPS_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), //  clk_reset.reset
		.sink_ready         (arm_a9_hps_h2f_axi_master_rd_limiter_cmd_src_ready),                    //       sink.ready
		.sink_channel       (arm_a9_hps_h2f_axi_master_rd_limiter_cmd_src_channel),                  //           .channel
		.sink_data          (arm_a9_hps_h2f_axi_master_rd_limiter_cmd_src_data),                     //           .data
		.sink_startofpacket (arm_a9_hps_h2f_axi_master_rd_limiter_cmd_src_startofpacket),            //           .startofpacket
		.sink_endofpacket   (arm_a9_hps_h2f_axi_master_rd_limiter_cmd_src_endofpacket),              //           .endofpacket
		.sink_valid         (arm_a9_hps_h2f_axi_master_rd_limiter_cmd_valid_data),                   // sink_valid.data
		.src0_ready         (cmd_demux_001_src0_ready),                                              //       src0.ready
		.src0_valid         (cmd_demux_001_src0_valid),                                              //           .valid
		.src0_data          (cmd_demux_001_src0_data),                                               //           .data
		.src0_channel       (cmd_demux_001_src0_channel),                                            //           .channel
		.src0_startofpacket (cmd_demux_001_src0_startofpacket),                                      //           .startofpacket
		.src0_endofpacket   (cmd_demux_001_src0_endofpacket),                                        //           .endofpacket
		.src1_ready         (cmd_demux_001_src1_ready),                                              //       src1.ready
		.src1_valid         (cmd_demux_001_src1_valid),                                              //           .valid
		.src1_data          (cmd_demux_001_src1_data),                                               //           .data
		.src1_channel       (cmd_demux_001_src1_channel),                                            //           .channel
		.src1_startofpacket (cmd_demux_001_src1_startofpacket),                                      //           .startofpacket
		.src1_endofpacket   (cmd_demux_001_src1_endofpacket)                                         //           .endofpacket
	);

	Computer_System_mm_interconnect_1_cmd_demux_002 cmd_demux_002 (
		.clk                (System_PLL_sys_clk_clk),                                   //        clk.clk
		.reset              (SDRAM_reset_reset_bridge_in_reset_reset),                  //  clk_reset.reset
		.sink_ready         (jtag_to_fpga_bridge_master_limiter_cmd_src_ready),         //       sink.ready
		.sink_channel       (jtag_to_fpga_bridge_master_limiter_cmd_src_channel),       //           .channel
		.sink_data          (jtag_to_fpga_bridge_master_limiter_cmd_src_data),          //           .data
		.sink_startofpacket (jtag_to_fpga_bridge_master_limiter_cmd_src_startofpacket), //           .startofpacket
		.sink_endofpacket   (jtag_to_fpga_bridge_master_limiter_cmd_src_endofpacket),   //           .endofpacket
		.sink_valid         (jtag_to_fpga_bridge_master_limiter_cmd_valid_data),        // sink_valid.data
		.src0_ready         (cmd_demux_002_src0_ready),                                 //       src0.ready
		.src0_valid         (cmd_demux_002_src0_valid),                                 //           .valid
		.src0_data          (cmd_demux_002_src0_data),                                  //           .data
		.src0_channel       (cmd_demux_002_src0_channel),                               //           .channel
		.src0_startofpacket (cmd_demux_002_src0_startofpacket),                         //           .startofpacket
		.src0_endofpacket   (cmd_demux_002_src0_endofpacket),                           //           .endofpacket
		.src1_ready         (cmd_demux_002_src1_ready),                                 //       src1.ready
		.src1_valid         (cmd_demux_002_src1_valid),                                 //           .valid
		.src1_data          (cmd_demux_002_src1_data),                                  //           .data
		.src1_channel       (cmd_demux_002_src1_channel),                               //           .channel
		.src1_startofpacket (cmd_demux_002_src1_startofpacket),                         //           .startofpacket
		.src1_endofpacket   (cmd_demux_002_src1_endofpacket),                           //           .endofpacket
		.src2_ready         (cmd_demux_002_src2_ready),                                 //       src2.ready
		.src2_valid         (cmd_demux_002_src2_valid),                                 //           .valid
		.src2_data          (cmd_demux_002_src2_data),                                  //           .data
		.src2_channel       (cmd_demux_002_src2_channel),                               //           .channel
		.src2_startofpacket (cmd_demux_002_src2_startofpacket),                         //           .startofpacket
		.src2_endofpacket   (cmd_demux_002_src2_endofpacket),                           //           .endofpacket
		.src3_ready         (cmd_demux_002_src3_ready),                                 //       src3.ready
		.src3_valid         (cmd_demux_002_src3_valid),                                 //           .valid
		.src3_data          (cmd_demux_002_src3_data),                                  //           .data
		.src3_channel       (cmd_demux_002_src3_channel),                               //           .channel
		.src3_startofpacket (cmd_demux_002_src3_startofpacket),                         //           .startofpacket
		.src3_endofpacket   (cmd_demux_002_src3_endofpacket),                           //           .endofpacket
		.src4_ready         (cmd_demux_002_src4_ready),                                 //       src4.ready
		.src4_valid         (cmd_demux_002_src4_valid),                                 //           .valid
		.src4_data          (cmd_demux_002_src4_data),                                  //           .data
		.src4_channel       (cmd_demux_002_src4_channel),                               //           .channel
		.src4_startofpacket (cmd_demux_002_src4_startofpacket),                         //           .startofpacket
		.src4_endofpacket   (cmd_demux_002_src4_endofpacket),                           //           .endofpacket
		.src5_ready         (cmd_demux_002_src5_ready),                                 //       src5.ready
		.src5_valid         (cmd_demux_002_src5_valid),                                 //           .valid
		.src5_data          (cmd_demux_002_src5_data),                                  //           .data
		.src5_channel       (cmd_demux_002_src5_channel),                               //           .channel
		.src5_startofpacket (cmd_demux_002_src5_startofpacket),                         //           .startofpacket
		.src5_endofpacket   (cmd_demux_002_src5_endofpacket)                            //           .endofpacket
	);

	Computer_System_mm_interconnect_1_cmd_demux_003 cmd_demux_003 (
		.clk                (System_PLL_sys_clk_clk),                                                //        clk.clk
		.reset              (Arm_A9_HPS_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), //  clk_reset.reset
		.sink_ready         (arm_a9_hps_h2f_lw_axi_master_wr_limiter_cmd_src_ready),                 //       sink.ready
		.sink_channel       (arm_a9_hps_h2f_lw_axi_master_wr_limiter_cmd_src_channel),               //           .channel
		.sink_data          (arm_a9_hps_h2f_lw_axi_master_wr_limiter_cmd_src_data),                  //           .data
		.sink_startofpacket (arm_a9_hps_h2f_lw_axi_master_wr_limiter_cmd_src_startofpacket),         //           .startofpacket
		.sink_endofpacket   (arm_a9_hps_h2f_lw_axi_master_wr_limiter_cmd_src_endofpacket),           //           .endofpacket
		.sink_valid         (arm_a9_hps_h2f_lw_axi_master_wr_limiter_cmd_valid_data),                // sink_valid.data
		.src0_ready         (cmd_demux_003_src0_ready),                                              //       src0.ready
		.src0_valid         (cmd_demux_003_src0_valid),                                              //           .valid
		.src0_data          (cmd_demux_003_src0_data),                                               //           .data
		.src0_channel       (cmd_demux_003_src0_channel),                                            //           .channel
		.src0_startofpacket (cmd_demux_003_src0_startofpacket),                                      //           .startofpacket
		.src0_endofpacket   (cmd_demux_003_src0_endofpacket),                                        //           .endofpacket
		.src1_ready         (cmd_demux_003_src1_ready),                                              //       src1.ready
		.src1_valid         (cmd_demux_003_src1_valid),                                              //           .valid
		.src1_data          (cmd_demux_003_src1_data),                                               //           .data
		.src1_channel       (cmd_demux_003_src1_channel),                                            //           .channel
		.src1_startofpacket (cmd_demux_003_src1_startofpacket),                                      //           .startofpacket
		.src1_endofpacket   (cmd_demux_003_src1_endofpacket),                                        //           .endofpacket
		.src2_ready         (cmd_demux_003_src2_ready),                                              //       src2.ready
		.src2_valid         (cmd_demux_003_src2_valid),                                              //           .valid
		.src2_data          (cmd_demux_003_src2_data),                                               //           .data
		.src2_channel       (cmd_demux_003_src2_channel),                                            //           .channel
		.src2_startofpacket (cmd_demux_003_src2_startofpacket),                                      //           .startofpacket
		.src2_endofpacket   (cmd_demux_003_src2_endofpacket),                                        //           .endofpacket
		.src3_ready         (cmd_demux_003_src3_ready),                                              //       src3.ready
		.src3_valid         (cmd_demux_003_src3_valid),                                              //           .valid
		.src3_data          (cmd_demux_003_src3_data),                                               //           .data
		.src3_channel       (cmd_demux_003_src3_channel),                                            //           .channel
		.src3_startofpacket (cmd_demux_003_src3_startofpacket),                                      //           .startofpacket
		.src3_endofpacket   (cmd_demux_003_src3_endofpacket)                                         //           .endofpacket
	);

	Computer_System_mm_interconnect_1_cmd_demux_003 cmd_demux_004 (
		.clk                (System_PLL_sys_clk_clk),                                                //        clk.clk
		.reset              (Arm_A9_HPS_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), //  clk_reset.reset
		.sink_ready         (arm_a9_hps_h2f_lw_axi_master_rd_limiter_cmd_src_ready),                 //       sink.ready
		.sink_channel       (arm_a9_hps_h2f_lw_axi_master_rd_limiter_cmd_src_channel),               //           .channel
		.sink_data          (arm_a9_hps_h2f_lw_axi_master_rd_limiter_cmd_src_data),                  //           .data
		.sink_startofpacket (arm_a9_hps_h2f_lw_axi_master_rd_limiter_cmd_src_startofpacket),         //           .startofpacket
		.sink_endofpacket   (arm_a9_hps_h2f_lw_axi_master_rd_limiter_cmd_src_endofpacket),           //           .endofpacket
		.sink_valid         (arm_a9_hps_h2f_lw_axi_master_rd_limiter_cmd_valid_data),                // sink_valid.data
		.src0_ready         (cmd_demux_004_src0_ready),                                              //       src0.ready
		.src0_valid         (cmd_demux_004_src0_valid),                                              //           .valid
		.src0_data          (cmd_demux_004_src0_data),                                               //           .data
		.src0_channel       (cmd_demux_004_src0_channel),                                            //           .channel
		.src0_startofpacket (cmd_demux_004_src0_startofpacket),                                      //           .startofpacket
		.src0_endofpacket   (cmd_demux_004_src0_endofpacket),                                        //           .endofpacket
		.src1_ready         (cmd_demux_004_src1_ready),                                              //       src1.ready
		.src1_valid         (cmd_demux_004_src1_valid),                                              //           .valid
		.src1_data          (cmd_demux_004_src1_data),                                               //           .data
		.src1_channel       (cmd_demux_004_src1_channel),                                            //           .channel
		.src1_startofpacket (cmd_demux_004_src1_startofpacket),                                      //           .startofpacket
		.src1_endofpacket   (cmd_demux_004_src1_endofpacket),                                        //           .endofpacket
		.src2_ready         (cmd_demux_004_src2_ready),                                              //       src2.ready
		.src2_valid         (cmd_demux_004_src2_valid),                                              //           .valid
		.src2_data          (cmd_demux_004_src2_data),                                               //           .data
		.src2_channel       (cmd_demux_004_src2_channel),                                            //           .channel
		.src2_startofpacket (cmd_demux_004_src2_startofpacket),                                      //           .startofpacket
		.src2_endofpacket   (cmd_demux_004_src2_endofpacket),                                        //           .endofpacket
		.src3_ready         (cmd_demux_004_src3_ready),                                              //       src3.ready
		.src3_valid         (cmd_demux_004_src3_valid),                                              //           .valid
		.src3_data          (cmd_demux_004_src3_data),                                               //           .data
		.src3_channel       (cmd_demux_004_src3_channel),                                            //           .channel
		.src3_startofpacket (cmd_demux_004_src3_startofpacket),                                      //           .startofpacket
		.src3_endofpacket   (cmd_demux_004_src3_endofpacket)                                         //           .endofpacket
	);

	Computer_System_mm_interconnect_1_cmd_demux_005 cmd_demux_005 (
		.clk                (System_PLL_sys_clk_clk),                  //       clk.clk
		.reset              (SDRAM_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_005_src_ready),                    //      sink.ready
		.sink_channel       (router_005_src_channel),                  //          .channel
		.sink_data          (router_005_src_data),                     //          .data
		.sink_startofpacket (router_005_src_startofpacket),            //          .startofpacket
		.sink_endofpacket   (router_005_src_endofpacket),              //          .endofpacket
		.sink_valid         (router_005_src_valid),                    //          .valid
		.src0_ready         (cmd_demux_005_src0_ready),                //      src0.ready
		.src0_valid         (cmd_demux_005_src0_valid),                //          .valid
		.src0_data          (cmd_demux_005_src0_data),                 //          .data
		.src0_channel       (cmd_demux_005_src0_channel),              //          .channel
		.src0_startofpacket (cmd_demux_005_src0_startofpacket),        //          .startofpacket
		.src0_endofpacket   (cmd_demux_005_src0_endofpacket)           //          .endofpacket
	);

	Computer_System_mm_interconnect_1_cmd_mux cmd_mux (
		.clk                 (System_PLL_sys_clk_clk),                                                       //       clk.clk
		.reset               (SDRAM_reset_reset_bridge_in_reset_reset),                                      // clk_reset.reset
		.src_ready           (cmd_mux_src_ready),                                                            //       src.ready
		.src_valid           (cmd_mux_src_valid),                                                            //          .valid
		.src_data            (cmd_mux_src_data),                                                             //          .data
		.src_channel         (cmd_mux_src_channel),                                                          //          .channel
		.src_startofpacket   (cmd_mux_src_startofpacket),                                                    //          .startofpacket
		.src_endofpacket     (cmd_mux_src_endofpacket),                                                      //          .endofpacket
		.sink0_ready         (arm_a9_hps_h2f_axi_master_wr_to_sdram_s1_cmd_width_adapter_src_ready),         //     sink0.ready
		.sink0_valid         (arm_a9_hps_h2f_axi_master_wr_to_sdram_s1_cmd_width_adapter_src_valid),         //          .valid
		.sink0_channel       (arm_a9_hps_h2f_axi_master_wr_to_sdram_s1_cmd_width_adapter_src_channel),       //          .channel
		.sink0_data          (arm_a9_hps_h2f_axi_master_wr_to_sdram_s1_cmd_width_adapter_src_data),          //          .data
		.sink0_startofpacket (arm_a9_hps_h2f_axi_master_wr_to_sdram_s1_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.sink0_endofpacket   (arm_a9_hps_h2f_axi_master_wr_to_sdram_s1_cmd_width_adapter_src_endofpacket),   //          .endofpacket
		.sink1_ready         (arm_a9_hps_h2f_axi_master_rd_to_sdram_s1_cmd_width_adapter_src_ready),         //     sink1.ready
		.sink1_valid         (arm_a9_hps_h2f_axi_master_rd_to_sdram_s1_cmd_width_adapter_src_valid),         //          .valid
		.sink1_channel       (arm_a9_hps_h2f_axi_master_rd_to_sdram_s1_cmd_width_adapter_src_channel),       //          .channel
		.sink1_data          (arm_a9_hps_h2f_axi_master_rd_to_sdram_s1_cmd_width_adapter_src_data),          //          .data
		.sink1_startofpacket (arm_a9_hps_h2f_axi_master_rd_to_sdram_s1_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.sink1_endofpacket   (arm_a9_hps_h2f_axi_master_rd_to_sdram_s1_cmd_width_adapter_src_endofpacket),   //          .endofpacket
		.sink2_ready         (jtag_to_fpga_bridge_master_to_sdram_s1_cmd_width_adapter_src_ready),           //     sink2.ready
		.sink2_valid         (jtag_to_fpga_bridge_master_to_sdram_s1_cmd_width_adapter_src_valid),           //          .valid
		.sink2_channel       (jtag_to_fpga_bridge_master_to_sdram_s1_cmd_width_adapter_src_channel),         //          .channel
		.sink2_data          (jtag_to_fpga_bridge_master_to_sdram_s1_cmd_width_adapter_src_data),            //          .data
		.sink2_startofpacket (jtag_to_fpga_bridge_master_to_sdram_s1_cmd_width_adapter_src_startofpacket),   //          .startofpacket
		.sink2_endofpacket   (jtag_to_fpga_bridge_master_to_sdram_s1_cmd_width_adapter_src_endofpacket),     //          .endofpacket
		.sink3_ready         (cmd_demux_005_src0_ready),                                                     //     sink3.ready
		.sink3_valid         (cmd_demux_005_src0_valid),                                                     //          .valid
		.sink3_channel       (cmd_demux_005_src0_channel),                                                   //          .channel
		.sink3_data          (cmd_demux_005_src0_data),                                                      //          .data
		.sink3_startofpacket (cmd_demux_005_src0_startofpacket),                                             //          .startofpacket
		.sink3_endofpacket   (cmd_demux_005_src0_endofpacket)                                                //          .endofpacket
	);

	Computer_System_mm_interconnect_1_cmd_mux_001 cmd_mux_001 (
		.clk                 (System_PLL_sys_clk_clk),                                                                                    //       clk.clk
		.reset               (SDRAM_reset_reset_bridge_in_reset_reset),                                                                   // clk_reset.reset
		.src_ready           (cmd_mux_001_src_ready),                                                                                     //       src.ready
		.src_valid           (cmd_mux_001_src_valid),                                                                                     //          .valid
		.src_data            (cmd_mux_001_src_data),                                                                                      //          .data
		.src_channel         (cmd_mux_001_src_channel),                                                                                   //          .channel
		.src_startofpacket   (cmd_mux_001_src_startofpacket),                                                                             //          .startofpacket
		.src_endofpacket     (cmd_mux_001_src_endofpacket),                                                                               //          .endofpacket
		.sink0_ready         (arm_a9_hps_h2f_axi_master_wr_to_vga_subsystem_pixel_dma_control_slave_cmd_width_adapter_src_ready),         //     sink0.ready
		.sink0_valid         (arm_a9_hps_h2f_axi_master_wr_to_vga_subsystem_pixel_dma_control_slave_cmd_width_adapter_src_valid),         //          .valid
		.sink0_channel       (arm_a9_hps_h2f_axi_master_wr_to_vga_subsystem_pixel_dma_control_slave_cmd_width_adapter_src_channel),       //          .channel
		.sink0_data          (arm_a9_hps_h2f_axi_master_wr_to_vga_subsystem_pixel_dma_control_slave_cmd_width_adapter_src_data),          //          .data
		.sink0_startofpacket (arm_a9_hps_h2f_axi_master_wr_to_vga_subsystem_pixel_dma_control_slave_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.sink0_endofpacket   (arm_a9_hps_h2f_axi_master_wr_to_vga_subsystem_pixel_dma_control_slave_cmd_width_adapter_src_endofpacket),   //          .endofpacket
		.sink1_ready         (arm_a9_hps_h2f_axi_master_rd_to_vga_subsystem_pixel_dma_control_slave_cmd_width_adapter_src_ready),         //     sink1.ready
		.sink1_valid         (arm_a9_hps_h2f_axi_master_rd_to_vga_subsystem_pixel_dma_control_slave_cmd_width_adapter_src_valid),         //          .valid
		.sink1_channel       (arm_a9_hps_h2f_axi_master_rd_to_vga_subsystem_pixel_dma_control_slave_cmd_width_adapter_src_channel),       //          .channel
		.sink1_data          (arm_a9_hps_h2f_axi_master_rd_to_vga_subsystem_pixel_dma_control_slave_cmd_width_adapter_src_data),          //          .data
		.sink1_startofpacket (arm_a9_hps_h2f_axi_master_rd_to_vga_subsystem_pixel_dma_control_slave_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.sink1_endofpacket   (arm_a9_hps_h2f_axi_master_rd_to_vga_subsystem_pixel_dma_control_slave_cmd_width_adapter_src_endofpacket),   //          .endofpacket
		.sink2_ready         (cmd_demux_002_src1_ready),                                                                                  //     sink2.ready
		.sink2_valid         (cmd_demux_002_src1_valid),                                                                                  //          .valid
		.sink2_channel       (cmd_demux_002_src1_channel),                                                                                //          .channel
		.sink2_data          (cmd_demux_002_src1_data),                                                                                   //          .data
		.sink2_startofpacket (cmd_demux_002_src1_startofpacket),                                                                          //          .startofpacket
		.sink2_endofpacket   (cmd_demux_002_src1_endofpacket)                                                                             //          .endofpacket
	);

	Computer_System_mm_interconnect_1_cmd_mux_001 cmd_mux_002 (
		.clk                 (System_PLL_sys_clk_clk),                  //       clk.clk
		.reset               (SDRAM_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_002_src_ready),                   //       src.ready
		.src_valid           (cmd_mux_002_src_valid),                   //          .valid
		.src_data            (cmd_mux_002_src_data),                    //          .data
		.src_channel         (cmd_mux_002_src_channel),                 //          .channel
		.src_startofpacket   (cmd_mux_002_src_startofpacket),           //          .startofpacket
		.src_endofpacket     (cmd_mux_002_src_endofpacket),             //          .endofpacket
		.sink0_ready         (cmd_demux_002_src2_ready),                //     sink0.ready
		.sink0_valid         (cmd_demux_002_src2_valid),                //          .valid
		.sink0_channel       (cmd_demux_002_src2_channel),              //          .channel
		.sink0_data          (cmd_demux_002_src2_data),                 //          .data
		.sink0_startofpacket (cmd_demux_002_src2_startofpacket),        //          .startofpacket
		.sink0_endofpacket   (cmd_demux_002_src2_endofpacket),          //          .endofpacket
		.sink1_ready         (cmd_demux_003_src0_ready),                //     sink1.ready
		.sink1_valid         (cmd_demux_003_src0_valid),                //          .valid
		.sink1_channel       (cmd_demux_003_src0_channel),              //          .channel
		.sink1_data          (cmd_demux_003_src0_data),                 //          .data
		.sink1_startofpacket (cmd_demux_003_src0_startofpacket),        //          .startofpacket
		.sink1_endofpacket   (cmd_demux_003_src0_endofpacket),          //          .endofpacket
		.sink2_ready         (cmd_demux_004_src0_ready),                //     sink2.ready
		.sink2_valid         (cmd_demux_004_src0_valid),                //          .valid
		.sink2_channel       (cmd_demux_004_src0_channel),              //          .channel
		.sink2_data          (cmd_demux_004_src0_data),                 //          .data
		.sink2_startofpacket (cmd_demux_004_src0_startofpacket),        //          .startofpacket
		.sink2_endofpacket   (cmd_demux_004_src0_endofpacket)           //          .endofpacket
	);

	Computer_System_mm_interconnect_1_cmd_mux_001 cmd_mux_003 (
		.clk                 (System_PLL_sys_clk_clk),                  //       clk.clk
		.reset               (SDRAM_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_003_src_ready),                   //       src.ready
		.src_valid           (cmd_mux_003_src_valid),                   //          .valid
		.src_data            (cmd_mux_003_src_data),                    //          .data
		.src_channel         (cmd_mux_003_src_channel),                 //          .channel
		.src_startofpacket   (cmd_mux_003_src_startofpacket),           //          .startofpacket
		.src_endofpacket     (cmd_mux_003_src_endofpacket),             //          .endofpacket
		.sink0_ready         (cmd_demux_002_src3_ready),                //     sink0.ready
		.sink0_valid         (cmd_demux_002_src3_valid),                //          .valid
		.sink0_channel       (cmd_demux_002_src3_channel),              //          .channel
		.sink0_data          (cmd_demux_002_src3_data),                 //          .data
		.sink0_startofpacket (cmd_demux_002_src3_startofpacket),        //          .startofpacket
		.sink0_endofpacket   (cmd_demux_002_src3_endofpacket),          //          .endofpacket
		.sink1_ready         (cmd_demux_003_src1_ready),                //     sink1.ready
		.sink1_valid         (cmd_demux_003_src1_valid),                //          .valid
		.sink1_channel       (cmd_demux_003_src1_channel),              //          .channel
		.sink1_data          (cmd_demux_003_src1_data),                 //          .data
		.sink1_startofpacket (cmd_demux_003_src1_startofpacket),        //          .startofpacket
		.sink1_endofpacket   (cmd_demux_003_src1_endofpacket),          //          .endofpacket
		.sink2_ready         (cmd_demux_004_src1_ready),                //     sink2.ready
		.sink2_valid         (cmd_demux_004_src1_valid),                //          .valid
		.sink2_channel       (cmd_demux_004_src1_channel),              //          .channel
		.sink2_data          (cmd_demux_004_src1_data),                 //          .data
		.sink2_startofpacket (cmd_demux_004_src1_startofpacket),        //          .startofpacket
		.sink2_endofpacket   (cmd_demux_004_src1_endofpacket)           //          .endofpacket
	);

	Computer_System_mm_interconnect_1_cmd_mux_001 cmd_mux_004 (
		.clk                 (System_PLL_sys_clk_clk),                  //       clk.clk
		.reset               (SDRAM_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_004_src_ready),                   //       src.ready
		.src_valid           (cmd_mux_004_src_valid),                   //          .valid
		.src_data            (cmd_mux_004_src_data),                    //          .data
		.src_channel         (cmd_mux_004_src_channel),                 //          .channel
		.src_startofpacket   (cmd_mux_004_src_startofpacket),           //          .startofpacket
		.src_endofpacket     (cmd_mux_004_src_endofpacket),             //          .endofpacket
		.sink0_ready         (cmd_demux_002_src4_ready),                //     sink0.ready
		.sink0_valid         (cmd_demux_002_src4_valid),                //          .valid
		.sink0_channel       (cmd_demux_002_src4_channel),              //          .channel
		.sink0_data          (cmd_demux_002_src4_data),                 //          .data
		.sink0_startofpacket (cmd_demux_002_src4_startofpacket),        //          .startofpacket
		.sink0_endofpacket   (cmd_demux_002_src4_endofpacket),          //          .endofpacket
		.sink1_ready         (cmd_demux_003_src2_ready),                //     sink1.ready
		.sink1_valid         (cmd_demux_003_src2_valid),                //          .valid
		.sink1_channel       (cmd_demux_003_src2_channel),              //          .channel
		.sink1_data          (cmd_demux_003_src2_data),                 //          .data
		.sink1_startofpacket (cmd_demux_003_src2_startofpacket),        //          .startofpacket
		.sink1_endofpacket   (cmd_demux_003_src2_endofpacket),          //          .endofpacket
		.sink2_ready         (cmd_demux_004_src2_ready),                //     sink2.ready
		.sink2_valid         (cmd_demux_004_src2_valid),                //          .valid
		.sink2_channel       (cmd_demux_004_src2_channel),              //          .channel
		.sink2_data          (cmd_demux_004_src2_data),                 //          .data
		.sink2_startofpacket (cmd_demux_004_src2_startofpacket),        //          .startofpacket
		.sink2_endofpacket   (cmd_demux_004_src2_endofpacket)           //          .endofpacket
	);

	Computer_System_mm_interconnect_1_cmd_mux_001 cmd_mux_005 (
		.clk                 (System_PLL_sys_clk_clk),                  //       clk.clk
		.reset               (SDRAM_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_005_src_ready),                   //       src.ready
		.src_valid           (cmd_mux_005_src_valid),                   //          .valid
		.src_data            (cmd_mux_005_src_data),                    //          .data
		.src_channel         (cmd_mux_005_src_channel),                 //          .channel
		.src_startofpacket   (cmd_mux_005_src_startofpacket),           //          .startofpacket
		.src_endofpacket     (cmd_mux_005_src_endofpacket),             //          .endofpacket
		.sink0_ready         (cmd_demux_002_src5_ready),                //     sink0.ready
		.sink0_valid         (cmd_demux_002_src5_valid),                //          .valid
		.sink0_channel       (cmd_demux_002_src5_channel),              //          .channel
		.sink0_data          (cmd_demux_002_src5_data),                 //          .data
		.sink0_startofpacket (cmd_demux_002_src5_startofpacket),        //          .startofpacket
		.sink0_endofpacket   (cmd_demux_002_src5_endofpacket),          //          .endofpacket
		.sink1_ready         (cmd_demux_003_src3_ready),                //     sink1.ready
		.sink1_valid         (cmd_demux_003_src3_valid),                //          .valid
		.sink1_channel       (cmd_demux_003_src3_channel),              //          .channel
		.sink1_data          (cmd_demux_003_src3_data),                 //          .data
		.sink1_startofpacket (cmd_demux_003_src3_startofpacket),        //          .startofpacket
		.sink1_endofpacket   (cmd_demux_003_src3_endofpacket),          //          .endofpacket
		.sink2_ready         (cmd_demux_004_src3_ready),                //     sink2.ready
		.sink2_valid         (cmd_demux_004_src3_valid),                //          .valid
		.sink2_channel       (cmd_demux_004_src3_channel),              //          .channel
		.sink2_data          (cmd_demux_004_src3_data),                 //          .data
		.sink2_startofpacket (cmd_demux_004_src3_startofpacket),        //          .startofpacket
		.sink2_endofpacket   (cmd_demux_004_src3_endofpacket)           //          .endofpacket
	);

	Computer_System_mm_interconnect_1_rsp_demux rsp_demux (
		.clk                (System_PLL_sys_clk_clk),                  //       clk.clk
		.reset              (SDRAM_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_006_src_ready),                    //      sink.ready
		.sink_channel       (router_006_src_channel),                  //          .channel
		.sink_data          (router_006_src_data),                     //          .data
		.sink_startofpacket (router_006_src_startofpacket),            //          .startofpacket
		.sink_endofpacket   (router_006_src_endofpacket),              //          .endofpacket
		.sink_valid         (router_006_src_valid),                    //          .valid
		.src0_ready         (rsp_demux_src0_ready),                    //      src0.ready
		.src0_valid         (rsp_demux_src0_valid),                    //          .valid
		.src0_data          (rsp_demux_src0_data),                     //          .data
		.src0_channel       (rsp_demux_src0_channel),                  //          .channel
		.src0_startofpacket (rsp_demux_src0_startofpacket),            //          .startofpacket
		.src0_endofpacket   (rsp_demux_src0_endofpacket),              //          .endofpacket
		.src1_ready         (rsp_demux_src1_ready),                    //      src1.ready
		.src1_valid         (rsp_demux_src1_valid),                    //          .valid
		.src1_data          (rsp_demux_src1_data),                     //          .data
		.src1_channel       (rsp_demux_src1_channel),                  //          .channel
		.src1_startofpacket (rsp_demux_src1_startofpacket),            //          .startofpacket
		.src1_endofpacket   (rsp_demux_src1_endofpacket),              //          .endofpacket
		.src2_ready         (rsp_demux_src2_ready),                    //      src2.ready
		.src2_valid         (rsp_demux_src2_valid),                    //          .valid
		.src2_data          (rsp_demux_src2_data),                     //          .data
		.src2_channel       (rsp_demux_src2_channel),                  //          .channel
		.src2_startofpacket (rsp_demux_src2_startofpacket),            //          .startofpacket
		.src2_endofpacket   (rsp_demux_src2_endofpacket),              //          .endofpacket
		.src3_ready         (rsp_demux_src3_ready),                    //      src3.ready
		.src3_valid         (rsp_demux_src3_valid),                    //          .valid
		.src3_data          (rsp_demux_src3_data),                     //          .data
		.src3_channel       (rsp_demux_src3_channel),                  //          .channel
		.src3_startofpacket (rsp_demux_src3_startofpacket),            //          .startofpacket
		.src3_endofpacket   (rsp_demux_src3_endofpacket)               //          .endofpacket
	);

	Computer_System_mm_interconnect_1_rsp_demux_001 rsp_demux_001 (
		.clk                (System_PLL_sys_clk_clk),                  //       clk.clk
		.reset              (SDRAM_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_007_src_ready),                    //      sink.ready
		.sink_channel       (router_007_src_channel),                  //          .channel
		.sink_data          (router_007_src_data),                     //          .data
		.sink_startofpacket (router_007_src_startofpacket),            //          .startofpacket
		.sink_endofpacket   (router_007_src_endofpacket),              //          .endofpacket
		.sink_valid         (router_007_src_valid),                    //          .valid
		.src0_ready         (rsp_demux_001_src0_ready),                //      src0.ready
		.src0_valid         (rsp_demux_001_src0_valid),                //          .valid
		.src0_data          (rsp_demux_001_src0_data),                 //          .data
		.src0_channel       (rsp_demux_001_src0_channel),              //          .channel
		.src0_startofpacket (rsp_demux_001_src0_startofpacket),        //          .startofpacket
		.src0_endofpacket   (rsp_demux_001_src0_endofpacket),          //          .endofpacket
		.src1_ready         (rsp_demux_001_src1_ready),                //      src1.ready
		.src1_valid         (rsp_demux_001_src1_valid),                //          .valid
		.src1_data          (rsp_demux_001_src1_data),                 //          .data
		.src1_channel       (rsp_demux_001_src1_channel),              //          .channel
		.src1_startofpacket (rsp_demux_001_src1_startofpacket),        //          .startofpacket
		.src1_endofpacket   (rsp_demux_001_src1_endofpacket),          //          .endofpacket
		.src2_ready         (rsp_demux_001_src2_ready),                //      src2.ready
		.src2_valid         (rsp_demux_001_src2_valid),                //          .valid
		.src2_data          (rsp_demux_001_src2_data),                 //          .data
		.src2_channel       (rsp_demux_001_src2_channel),              //          .channel
		.src2_startofpacket (rsp_demux_001_src2_startofpacket),        //          .startofpacket
		.src2_endofpacket   (rsp_demux_001_src2_endofpacket)           //          .endofpacket
	);

	Computer_System_mm_interconnect_1_rsp_demux_001 rsp_demux_002 (
		.clk                (System_PLL_sys_clk_clk),                  //       clk.clk
		.reset              (SDRAM_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_008_src_ready),                    //      sink.ready
		.sink_channel       (router_008_src_channel),                  //          .channel
		.sink_data          (router_008_src_data),                     //          .data
		.sink_startofpacket (router_008_src_startofpacket),            //          .startofpacket
		.sink_endofpacket   (router_008_src_endofpacket),              //          .endofpacket
		.sink_valid         (router_008_src_valid),                    //          .valid
		.src0_ready         (rsp_demux_002_src0_ready),                //      src0.ready
		.src0_valid         (rsp_demux_002_src0_valid),                //          .valid
		.src0_data          (rsp_demux_002_src0_data),                 //          .data
		.src0_channel       (rsp_demux_002_src0_channel),              //          .channel
		.src0_startofpacket (rsp_demux_002_src0_startofpacket),        //          .startofpacket
		.src0_endofpacket   (rsp_demux_002_src0_endofpacket),          //          .endofpacket
		.src1_ready         (rsp_demux_002_src1_ready),                //      src1.ready
		.src1_valid         (rsp_demux_002_src1_valid),                //          .valid
		.src1_data          (rsp_demux_002_src1_data),                 //          .data
		.src1_channel       (rsp_demux_002_src1_channel),              //          .channel
		.src1_startofpacket (rsp_demux_002_src1_startofpacket),        //          .startofpacket
		.src1_endofpacket   (rsp_demux_002_src1_endofpacket),          //          .endofpacket
		.src2_ready         (rsp_demux_002_src2_ready),                //      src2.ready
		.src2_valid         (rsp_demux_002_src2_valid),                //          .valid
		.src2_data          (rsp_demux_002_src2_data),                 //          .data
		.src2_channel       (rsp_demux_002_src2_channel),              //          .channel
		.src2_startofpacket (rsp_demux_002_src2_startofpacket),        //          .startofpacket
		.src2_endofpacket   (rsp_demux_002_src2_endofpacket)           //          .endofpacket
	);

	Computer_System_mm_interconnect_1_rsp_demux_001 rsp_demux_003 (
		.clk                (System_PLL_sys_clk_clk),                  //       clk.clk
		.reset              (SDRAM_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_009_src_ready),                    //      sink.ready
		.sink_channel       (router_009_src_channel),                  //          .channel
		.sink_data          (router_009_src_data),                     //          .data
		.sink_startofpacket (router_009_src_startofpacket),            //          .startofpacket
		.sink_endofpacket   (router_009_src_endofpacket),              //          .endofpacket
		.sink_valid         (router_009_src_valid),                    //          .valid
		.src0_ready         (rsp_demux_003_src0_ready),                //      src0.ready
		.src0_valid         (rsp_demux_003_src0_valid),                //          .valid
		.src0_data          (rsp_demux_003_src0_data),                 //          .data
		.src0_channel       (rsp_demux_003_src0_channel),              //          .channel
		.src0_startofpacket (rsp_demux_003_src0_startofpacket),        //          .startofpacket
		.src0_endofpacket   (rsp_demux_003_src0_endofpacket),          //          .endofpacket
		.src1_ready         (rsp_demux_003_src1_ready),                //      src1.ready
		.src1_valid         (rsp_demux_003_src1_valid),                //          .valid
		.src1_data          (rsp_demux_003_src1_data),                 //          .data
		.src1_channel       (rsp_demux_003_src1_channel),              //          .channel
		.src1_startofpacket (rsp_demux_003_src1_startofpacket),        //          .startofpacket
		.src1_endofpacket   (rsp_demux_003_src1_endofpacket),          //          .endofpacket
		.src2_ready         (rsp_demux_003_src2_ready),                //      src2.ready
		.src2_valid         (rsp_demux_003_src2_valid),                //          .valid
		.src2_data          (rsp_demux_003_src2_data),                 //          .data
		.src2_channel       (rsp_demux_003_src2_channel),              //          .channel
		.src2_startofpacket (rsp_demux_003_src2_startofpacket),        //          .startofpacket
		.src2_endofpacket   (rsp_demux_003_src2_endofpacket)           //          .endofpacket
	);

	Computer_System_mm_interconnect_1_rsp_demux_001 rsp_demux_004 (
		.clk                (System_PLL_sys_clk_clk),                  //       clk.clk
		.reset              (SDRAM_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_010_src_ready),                    //      sink.ready
		.sink_channel       (router_010_src_channel),                  //          .channel
		.sink_data          (router_010_src_data),                     //          .data
		.sink_startofpacket (router_010_src_startofpacket),            //          .startofpacket
		.sink_endofpacket   (router_010_src_endofpacket),              //          .endofpacket
		.sink_valid         (router_010_src_valid),                    //          .valid
		.src0_ready         (rsp_demux_004_src0_ready),                //      src0.ready
		.src0_valid         (rsp_demux_004_src0_valid),                //          .valid
		.src0_data          (rsp_demux_004_src0_data),                 //          .data
		.src0_channel       (rsp_demux_004_src0_channel),              //          .channel
		.src0_startofpacket (rsp_demux_004_src0_startofpacket),        //          .startofpacket
		.src0_endofpacket   (rsp_demux_004_src0_endofpacket),          //          .endofpacket
		.src1_ready         (rsp_demux_004_src1_ready),                //      src1.ready
		.src1_valid         (rsp_demux_004_src1_valid),                //          .valid
		.src1_data          (rsp_demux_004_src1_data),                 //          .data
		.src1_channel       (rsp_demux_004_src1_channel),              //          .channel
		.src1_startofpacket (rsp_demux_004_src1_startofpacket),        //          .startofpacket
		.src1_endofpacket   (rsp_demux_004_src1_endofpacket),          //          .endofpacket
		.src2_ready         (rsp_demux_004_src2_ready),                //      src2.ready
		.src2_valid         (rsp_demux_004_src2_valid),                //          .valid
		.src2_data          (rsp_demux_004_src2_data),                 //          .data
		.src2_channel       (rsp_demux_004_src2_channel),              //          .channel
		.src2_startofpacket (rsp_demux_004_src2_startofpacket),        //          .startofpacket
		.src2_endofpacket   (rsp_demux_004_src2_endofpacket)           //          .endofpacket
	);

	Computer_System_mm_interconnect_1_rsp_demux_001 rsp_demux_005 (
		.clk                (System_PLL_sys_clk_clk),                  //       clk.clk
		.reset              (SDRAM_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_011_src_ready),                    //      sink.ready
		.sink_channel       (router_011_src_channel),                  //          .channel
		.sink_data          (router_011_src_data),                     //          .data
		.sink_startofpacket (router_011_src_startofpacket),            //          .startofpacket
		.sink_endofpacket   (router_011_src_endofpacket),              //          .endofpacket
		.sink_valid         (router_011_src_valid),                    //          .valid
		.src0_ready         (rsp_demux_005_src0_ready),                //      src0.ready
		.src0_valid         (rsp_demux_005_src0_valid),                //          .valid
		.src0_data          (rsp_demux_005_src0_data),                 //          .data
		.src0_channel       (rsp_demux_005_src0_channel),              //          .channel
		.src0_startofpacket (rsp_demux_005_src0_startofpacket),        //          .startofpacket
		.src0_endofpacket   (rsp_demux_005_src0_endofpacket),          //          .endofpacket
		.src1_ready         (rsp_demux_005_src1_ready),                //      src1.ready
		.src1_valid         (rsp_demux_005_src1_valid),                //          .valid
		.src1_data          (rsp_demux_005_src1_data),                 //          .data
		.src1_channel       (rsp_demux_005_src1_channel),              //          .channel
		.src1_startofpacket (rsp_demux_005_src1_startofpacket),        //          .startofpacket
		.src1_endofpacket   (rsp_demux_005_src1_endofpacket),          //          .endofpacket
		.src2_ready         (rsp_demux_005_src2_ready),                //      src2.ready
		.src2_valid         (rsp_demux_005_src2_valid),                //          .valid
		.src2_data          (rsp_demux_005_src2_data),                 //          .data
		.src2_channel       (rsp_demux_005_src2_channel),              //          .channel
		.src2_startofpacket (rsp_demux_005_src2_startofpacket),        //          .startofpacket
		.src2_endofpacket   (rsp_demux_005_src2_endofpacket)           //          .endofpacket
	);

	Computer_System_mm_interconnect_1_rsp_mux rsp_mux (
		.clk                 (System_PLL_sys_clk_clk),                                                                                    //       clk.clk
		.reset               (Arm_A9_HPS_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset),                                     // clk_reset.reset
		.src_ready           (rsp_mux_src_ready),                                                                                         //       src.ready
		.src_valid           (rsp_mux_src_valid),                                                                                         //          .valid
		.src_data            (rsp_mux_src_data),                                                                                          //          .data
		.src_channel         (rsp_mux_src_channel),                                                                                       //          .channel
		.src_startofpacket   (rsp_mux_src_startofpacket),                                                                                 //          .startofpacket
		.src_endofpacket     (rsp_mux_src_endofpacket),                                                                                   //          .endofpacket
		.sink0_ready         (sdram_s1_to_arm_a9_hps_h2f_axi_master_wr_rsp_width_adapter_src_ready),                                      //     sink0.ready
		.sink0_valid         (sdram_s1_to_arm_a9_hps_h2f_axi_master_wr_rsp_width_adapter_src_valid),                                      //          .valid
		.sink0_channel       (sdram_s1_to_arm_a9_hps_h2f_axi_master_wr_rsp_width_adapter_src_channel),                                    //          .channel
		.sink0_data          (sdram_s1_to_arm_a9_hps_h2f_axi_master_wr_rsp_width_adapter_src_data),                                       //          .data
		.sink0_startofpacket (sdram_s1_to_arm_a9_hps_h2f_axi_master_wr_rsp_width_adapter_src_startofpacket),                              //          .startofpacket
		.sink0_endofpacket   (sdram_s1_to_arm_a9_hps_h2f_axi_master_wr_rsp_width_adapter_src_endofpacket),                                //          .endofpacket
		.sink1_ready         (vga_subsystem_pixel_dma_control_slave_to_arm_a9_hps_h2f_axi_master_wr_rsp_width_adapter_src_ready),         //     sink1.ready
		.sink1_valid         (vga_subsystem_pixel_dma_control_slave_to_arm_a9_hps_h2f_axi_master_wr_rsp_width_adapter_src_valid),         //          .valid
		.sink1_channel       (vga_subsystem_pixel_dma_control_slave_to_arm_a9_hps_h2f_axi_master_wr_rsp_width_adapter_src_channel),       //          .channel
		.sink1_data          (vga_subsystem_pixel_dma_control_slave_to_arm_a9_hps_h2f_axi_master_wr_rsp_width_adapter_src_data),          //          .data
		.sink1_startofpacket (vga_subsystem_pixel_dma_control_slave_to_arm_a9_hps_h2f_axi_master_wr_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.sink1_endofpacket   (vga_subsystem_pixel_dma_control_slave_to_arm_a9_hps_h2f_axi_master_wr_rsp_width_adapter_src_endofpacket)    //          .endofpacket
	);

	Computer_System_mm_interconnect_1_rsp_mux rsp_mux_001 (
		.clk                 (System_PLL_sys_clk_clk),                                                                                    //       clk.clk
		.reset               (Arm_A9_HPS_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset),                                     // clk_reset.reset
		.src_ready           (rsp_mux_001_src_ready),                                                                                     //       src.ready
		.src_valid           (rsp_mux_001_src_valid),                                                                                     //          .valid
		.src_data            (rsp_mux_001_src_data),                                                                                      //          .data
		.src_channel         (rsp_mux_001_src_channel),                                                                                   //          .channel
		.src_startofpacket   (rsp_mux_001_src_startofpacket),                                                                             //          .startofpacket
		.src_endofpacket     (rsp_mux_001_src_endofpacket),                                                                               //          .endofpacket
		.sink0_ready         (sdram_s1_to_arm_a9_hps_h2f_axi_master_rd_rsp_width_adapter_src_ready),                                      //     sink0.ready
		.sink0_valid         (sdram_s1_to_arm_a9_hps_h2f_axi_master_rd_rsp_width_adapter_src_valid),                                      //          .valid
		.sink0_channel       (sdram_s1_to_arm_a9_hps_h2f_axi_master_rd_rsp_width_adapter_src_channel),                                    //          .channel
		.sink0_data          (sdram_s1_to_arm_a9_hps_h2f_axi_master_rd_rsp_width_adapter_src_data),                                       //          .data
		.sink0_startofpacket (sdram_s1_to_arm_a9_hps_h2f_axi_master_rd_rsp_width_adapter_src_startofpacket),                              //          .startofpacket
		.sink0_endofpacket   (sdram_s1_to_arm_a9_hps_h2f_axi_master_rd_rsp_width_adapter_src_endofpacket),                                //          .endofpacket
		.sink1_ready         (vga_subsystem_pixel_dma_control_slave_to_arm_a9_hps_h2f_axi_master_rd_rsp_width_adapter_src_ready),         //     sink1.ready
		.sink1_valid         (vga_subsystem_pixel_dma_control_slave_to_arm_a9_hps_h2f_axi_master_rd_rsp_width_adapter_src_valid),         //          .valid
		.sink1_channel       (vga_subsystem_pixel_dma_control_slave_to_arm_a9_hps_h2f_axi_master_rd_rsp_width_adapter_src_channel),       //          .channel
		.sink1_data          (vga_subsystem_pixel_dma_control_slave_to_arm_a9_hps_h2f_axi_master_rd_rsp_width_adapter_src_data),          //          .data
		.sink1_startofpacket (vga_subsystem_pixel_dma_control_slave_to_arm_a9_hps_h2f_axi_master_rd_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.sink1_endofpacket   (vga_subsystem_pixel_dma_control_slave_to_arm_a9_hps_h2f_axi_master_rd_rsp_width_adapter_src_endofpacket)    //          .endofpacket
	);

	Computer_System_mm_interconnect_1_rsp_mux_002 rsp_mux_002 (
		.clk                 (System_PLL_sys_clk_clk),                                                     //       clk.clk
		.reset               (SDRAM_reset_reset_bridge_in_reset_reset),                                    // clk_reset.reset
		.src_ready           (rsp_mux_002_src_ready),                                                      //       src.ready
		.src_valid           (rsp_mux_002_src_valid),                                                      //          .valid
		.src_data            (rsp_mux_002_src_data),                                                       //          .data
		.src_channel         (rsp_mux_002_src_channel),                                                    //          .channel
		.src_startofpacket   (rsp_mux_002_src_startofpacket),                                              //          .startofpacket
		.src_endofpacket     (rsp_mux_002_src_endofpacket),                                                //          .endofpacket
		.sink0_ready         (sdram_s1_to_jtag_to_fpga_bridge_master_rsp_width_adapter_src_ready),         //     sink0.ready
		.sink0_valid         (sdram_s1_to_jtag_to_fpga_bridge_master_rsp_width_adapter_src_valid),         //          .valid
		.sink0_channel       (sdram_s1_to_jtag_to_fpga_bridge_master_rsp_width_adapter_src_channel),       //          .channel
		.sink0_data          (sdram_s1_to_jtag_to_fpga_bridge_master_rsp_width_adapter_src_data),          //          .data
		.sink0_startofpacket (sdram_s1_to_jtag_to_fpga_bridge_master_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.sink0_endofpacket   (sdram_s1_to_jtag_to_fpga_bridge_master_rsp_width_adapter_src_endofpacket),   //          .endofpacket
		.sink1_ready         (rsp_demux_001_src2_ready),                                                   //     sink1.ready
		.sink1_valid         (rsp_demux_001_src2_valid),                                                   //          .valid
		.sink1_channel       (rsp_demux_001_src2_channel),                                                 //          .channel
		.sink1_data          (rsp_demux_001_src2_data),                                                    //          .data
		.sink1_startofpacket (rsp_demux_001_src2_startofpacket),                                           //          .startofpacket
		.sink1_endofpacket   (rsp_demux_001_src2_endofpacket),                                             //          .endofpacket
		.sink2_ready         (rsp_demux_002_src0_ready),                                                   //     sink2.ready
		.sink2_valid         (rsp_demux_002_src0_valid),                                                   //          .valid
		.sink2_channel       (rsp_demux_002_src0_channel),                                                 //          .channel
		.sink2_data          (rsp_demux_002_src0_data),                                                    //          .data
		.sink2_startofpacket (rsp_demux_002_src0_startofpacket),                                           //          .startofpacket
		.sink2_endofpacket   (rsp_demux_002_src0_endofpacket),                                             //          .endofpacket
		.sink3_ready         (rsp_demux_003_src0_ready),                                                   //     sink3.ready
		.sink3_valid         (rsp_demux_003_src0_valid),                                                   //          .valid
		.sink3_channel       (rsp_demux_003_src0_channel),                                                 //          .channel
		.sink3_data          (rsp_demux_003_src0_data),                                                    //          .data
		.sink3_startofpacket (rsp_demux_003_src0_startofpacket),                                           //          .startofpacket
		.sink3_endofpacket   (rsp_demux_003_src0_endofpacket),                                             //          .endofpacket
		.sink4_ready         (rsp_demux_004_src0_ready),                                                   //     sink4.ready
		.sink4_valid         (rsp_demux_004_src0_valid),                                                   //          .valid
		.sink4_channel       (rsp_demux_004_src0_channel),                                                 //          .channel
		.sink4_data          (rsp_demux_004_src0_data),                                                    //          .data
		.sink4_startofpacket (rsp_demux_004_src0_startofpacket),                                           //          .startofpacket
		.sink4_endofpacket   (rsp_demux_004_src0_endofpacket),                                             //          .endofpacket
		.sink5_ready         (rsp_demux_005_src0_ready),                                                   //     sink5.ready
		.sink5_valid         (rsp_demux_005_src0_valid),                                                   //          .valid
		.sink5_channel       (rsp_demux_005_src0_channel),                                                 //          .channel
		.sink5_data          (rsp_demux_005_src0_data),                                                    //          .data
		.sink5_startofpacket (rsp_demux_005_src0_startofpacket),                                           //          .startofpacket
		.sink5_endofpacket   (rsp_demux_005_src0_endofpacket)                                              //          .endofpacket
	);

	Computer_System_mm_interconnect_1_rsp_mux_003 rsp_mux_003 (
		.clk                 (System_PLL_sys_clk_clk),                                                //       clk.clk
		.reset               (Arm_A9_HPS_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_003_src_ready),                                                 //       src.ready
		.src_valid           (rsp_mux_003_src_valid),                                                 //          .valid
		.src_data            (rsp_mux_003_src_data),                                                  //          .data
		.src_channel         (rsp_mux_003_src_channel),                                               //          .channel
		.src_startofpacket   (rsp_mux_003_src_startofpacket),                                         //          .startofpacket
		.src_endofpacket     (rsp_mux_003_src_endofpacket),                                           //          .endofpacket
		.sink0_ready         (rsp_demux_002_src1_ready),                                              //     sink0.ready
		.sink0_valid         (rsp_demux_002_src1_valid),                                              //          .valid
		.sink0_channel       (rsp_demux_002_src1_channel),                                            //          .channel
		.sink0_data          (rsp_demux_002_src1_data),                                               //          .data
		.sink0_startofpacket (rsp_demux_002_src1_startofpacket),                                      //          .startofpacket
		.sink0_endofpacket   (rsp_demux_002_src1_endofpacket),                                        //          .endofpacket
		.sink1_ready         (rsp_demux_003_src1_ready),                                              //     sink1.ready
		.sink1_valid         (rsp_demux_003_src1_valid),                                              //          .valid
		.sink1_channel       (rsp_demux_003_src1_channel),                                            //          .channel
		.sink1_data          (rsp_demux_003_src1_data),                                               //          .data
		.sink1_startofpacket (rsp_demux_003_src1_startofpacket),                                      //          .startofpacket
		.sink1_endofpacket   (rsp_demux_003_src1_endofpacket),                                        //          .endofpacket
		.sink2_ready         (rsp_demux_004_src1_ready),                                              //     sink2.ready
		.sink2_valid         (rsp_demux_004_src1_valid),                                              //          .valid
		.sink2_channel       (rsp_demux_004_src1_channel),                                            //          .channel
		.sink2_data          (rsp_demux_004_src1_data),                                               //          .data
		.sink2_startofpacket (rsp_demux_004_src1_startofpacket),                                      //          .startofpacket
		.sink2_endofpacket   (rsp_demux_004_src1_endofpacket),                                        //          .endofpacket
		.sink3_ready         (rsp_demux_005_src1_ready),                                              //     sink3.ready
		.sink3_valid         (rsp_demux_005_src1_valid),                                              //          .valid
		.sink3_channel       (rsp_demux_005_src1_channel),                                            //          .channel
		.sink3_data          (rsp_demux_005_src1_data),                                               //          .data
		.sink3_startofpacket (rsp_demux_005_src1_startofpacket),                                      //          .startofpacket
		.sink3_endofpacket   (rsp_demux_005_src1_endofpacket)                                         //          .endofpacket
	);

	Computer_System_mm_interconnect_1_rsp_mux_003 rsp_mux_004 (
		.clk                 (System_PLL_sys_clk_clk),                                                //       clk.clk
		.reset               (Arm_A9_HPS_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_004_src_ready),                                                 //       src.ready
		.src_valid           (rsp_mux_004_src_valid),                                                 //          .valid
		.src_data            (rsp_mux_004_src_data),                                                  //          .data
		.src_channel         (rsp_mux_004_src_channel),                                               //          .channel
		.src_startofpacket   (rsp_mux_004_src_startofpacket),                                         //          .startofpacket
		.src_endofpacket     (rsp_mux_004_src_endofpacket),                                           //          .endofpacket
		.sink0_ready         (rsp_demux_002_src2_ready),                                              //     sink0.ready
		.sink0_valid         (rsp_demux_002_src2_valid),                                              //          .valid
		.sink0_channel       (rsp_demux_002_src2_channel),                                            //          .channel
		.sink0_data          (rsp_demux_002_src2_data),                                               //          .data
		.sink0_startofpacket (rsp_demux_002_src2_startofpacket),                                      //          .startofpacket
		.sink0_endofpacket   (rsp_demux_002_src2_endofpacket),                                        //          .endofpacket
		.sink1_ready         (rsp_demux_003_src2_ready),                                              //     sink1.ready
		.sink1_valid         (rsp_demux_003_src2_valid),                                              //          .valid
		.sink1_channel       (rsp_demux_003_src2_channel),                                            //          .channel
		.sink1_data          (rsp_demux_003_src2_data),                                               //          .data
		.sink1_startofpacket (rsp_demux_003_src2_startofpacket),                                      //          .startofpacket
		.sink1_endofpacket   (rsp_demux_003_src2_endofpacket),                                        //          .endofpacket
		.sink2_ready         (rsp_demux_004_src2_ready),                                              //     sink2.ready
		.sink2_valid         (rsp_demux_004_src2_valid),                                              //          .valid
		.sink2_channel       (rsp_demux_004_src2_channel),                                            //          .channel
		.sink2_data          (rsp_demux_004_src2_data),                                               //          .data
		.sink2_startofpacket (rsp_demux_004_src2_startofpacket),                                      //          .startofpacket
		.sink2_endofpacket   (rsp_demux_004_src2_endofpacket),                                        //          .endofpacket
		.sink3_ready         (rsp_demux_005_src2_ready),                                              //     sink3.ready
		.sink3_valid         (rsp_demux_005_src2_valid),                                              //          .valid
		.sink3_channel       (rsp_demux_005_src2_channel),                                            //          .channel
		.sink3_data          (rsp_demux_005_src2_data),                                               //          .data
		.sink3_startofpacket (rsp_demux_005_src2_startofpacket),                                      //          .startofpacket
		.sink3_endofpacket   (rsp_demux_005_src2_endofpacket)                                         //          .endofpacket
	);

	Computer_System_mm_interconnect_1_rsp_mux_005 rsp_mux_005 (
		.clk                 (System_PLL_sys_clk_clk),                  //       clk.clk
		.reset               (SDRAM_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_005_src_ready),                   //       src.ready
		.src_valid           (rsp_mux_005_src_valid),                   //          .valid
		.src_data            (rsp_mux_005_src_data),                    //          .data
		.src_channel         (rsp_mux_005_src_channel),                 //          .channel
		.src_startofpacket   (rsp_mux_005_src_startofpacket),           //          .startofpacket
		.src_endofpacket     (rsp_mux_005_src_endofpacket),             //          .endofpacket
		.sink0_ready         (rsp_demux_src3_ready),                    //     sink0.ready
		.sink0_valid         (rsp_demux_src3_valid),                    //          .valid
		.sink0_channel       (rsp_demux_src3_channel),                  //          .channel
		.sink0_data          (rsp_demux_src3_data),                     //          .data
		.sink0_startofpacket (rsp_demux_src3_startofpacket),            //          .startofpacket
		.sink0_endofpacket   (rsp_demux_src3_endofpacket)               //          .endofpacket
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (175),
		.IN_PKT_ADDR_L                 (144),
		.IN_PKT_DATA_H                 (127),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (143),
		.IN_PKT_BYTEEN_L               (128),
		.IN_PKT_BYTE_CNT_H             (190),
		.IN_PKT_BYTE_CNT_L             (182),
		.IN_PKT_TRANS_COMPRESSED_READ  (176),
		.IN_PKT_BURSTWRAP_H            (199),
		.IN_PKT_BURSTWRAP_L            (191),
		.IN_PKT_BURST_SIZE_H           (202),
		.IN_PKT_BURST_SIZE_L           (200),
		.IN_PKT_RESPONSE_STATUS_H      (235),
		.IN_PKT_RESPONSE_STATUS_L      (234),
		.IN_PKT_TRANS_EXCLUSIVE        (181),
		.IN_PKT_BURST_TYPE_H           (204),
		.IN_PKT_BURST_TYPE_L           (203),
		.IN_PKT_ORI_BURST_SIZE_L       (236),
		.IN_PKT_ORI_BURST_SIZE_H       (238),
		.IN_ST_DATA_W                  (239),
		.OUT_PKT_ADDR_H                (49),
		.OUT_PKT_ADDR_L                (18),
		.OUT_PKT_DATA_H                (15),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (17),
		.OUT_PKT_BYTEEN_L              (16),
		.OUT_PKT_BYTE_CNT_H            (64),
		.OUT_PKT_BYTE_CNT_L            (56),
		.OUT_PKT_TRANS_COMPRESSED_READ (50),
		.OUT_PKT_BURST_SIZE_H          (76),
		.OUT_PKT_BURST_SIZE_L          (74),
		.OUT_PKT_RESPONSE_STATUS_H     (109),
		.OUT_PKT_RESPONSE_STATUS_L     (108),
		.OUT_PKT_TRANS_EXCLUSIVE       (55),
		.OUT_PKT_BURST_TYPE_H          (78),
		.OUT_PKT_BURST_TYPE_L          (77),
		.OUT_PKT_ORI_BURST_SIZE_L      (110),
		.OUT_PKT_ORI_BURST_SIZE_H      (112),
		.OUT_ST_DATA_W                 (113),
		.ST_CHANNEL_W                  (6),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (0),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) arm_a9_hps_h2f_axi_master_wr_to_sdram_s1_cmd_width_adapter (
		.clk                  (System_PLL_sys_clk_clk),                                                       //       clk.clk
		.reset                (Arm_A9_HPS_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset),        // clk_reset.reset
		.in_valid             (cmd_demux_src0_valid),                                                         //      sink.valid
		.in_channel           (cmd_demux_src0_channel),                                                       //          .channel
		.in_startofpacket     (cmd_demux_src0_startofpacket),                                                 //          .startofpacket
		.in_endofpacket       (cmd_demux_src0_endofpacket),                                                   //          .endofpacket
		.in_ready             (cmd_demux_src0_ready),                                                         //          .ready
		.in_data              (cmd_demux_src0_data),                                                          //          .data
		.out_endofpacket      (arm_a9_hps_h2f_axi_master_wr_to_sdram_s1_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (arm_a9_hps_h2f_axi_master_wr_to_sdram_s1_cmd_width_adapter_src_data),          //          .data
		.out_channel          (arm_a9_hps_h2f_axi_master_wr_to_sdram_s1_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (arm_a9_hps_h2f_axi_master_wr_to_sdram_s1_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (arm_a9_hps_h2f_axi_master_wr_to_sdram_s1_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (arm_a9_hps_h2f_axi_master_wr_to_sdram_s1_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                        // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (175),
		.IN_PKT_ADDR_L                 (144),
		.IN_PKT_DATA_H                 (127),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (143),
		.IN_PKT_BYTEEN_L               (128),
		.IN_PKT_BYTE_CNT_H             (190),
		.IN_PKT_BYTE_CNT_L             (182),
		.IN_PKT_TRANS_COMPRESSED_READ  (176),
		.IN_PKT_BURSTWRAP_H            (199),
		.IN_PKT_BURSTWRAP_L            (191),
		.IN_PKT_BURST_SIZE_H           (202),
		.IN_PKT_BURST_SIZE_L           (200),
		.IN_PKT_RESPONSE_STATUS_H      (235),
		.IN_PKT_RESPONSE_STATUS_L      (234),
		.IN_PKT_TRANS_EXCLUSIVE        (181),
		.IN_PKT_BURST_TYPE_H           (204),
		.IN_PKT_BURST_TYPE_L           (203),
		.IN_PKT_ORI_BURST_SIZE_L       (236),
		.IN_PKT_ORI_BURST_SIZE_H       (238),
		.IN_ST_DATA_W                  (239),
		.OUT_PKT_ADDR_H                (67),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (82),
		.OUT_PKT_BYTE_CNT_L            (74),
		.OUT_PKT_TRANS_COMPRESSED_READ (68),
		.OUT_PKT_BURST_SIZE_H          (94),
		.OUT_PKT_BURST_SIZE_L          (92),
		.OUT_PKT_RESPONSE_STATUS_H     (127),
		.OUT_PKT_RESPONSE_STATUS_L     (126),
		.OUT_PKT_TRANS_EXCLUSIVE       (73),
		.OUT_PKT_BURST_TYPE_H          (96),
		.OUT_PKT_BURST_TYPE_L          (95),
		.OUT_PKT_ORI_BURST_SIZE_L      (128),
		.OUT_PKT_ORI_BURST_SIZE_H      (130),
		.OUT_ST_DATA_W                 (131),
		.ST_CHANNEL_W                  (6),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (0),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) arm_a9_hps_h2f_axi_master_wr_to_vga_subsystem_pixel_dma_control_slave_cmd_width_adapter (
		.clk                  (System_PLL_sys_clk_clk),                                                                                    //       clk.clk
		.reset                (Arm_A9_HPS_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset),                                     // clk_reset.reset
		.in_valid             (cmd_demux_src1_valid),                                                                                      //      sink.valid
		.in_channel           (cmd_demux_src1_channel),                                                                                    //          .channel
		.in_startofpacket     (cmd_demux_src1_startofpacket),                                                                              //          .startofpacket
		.in_endofpacket       (cmd_demux_src1_endofpacket),                                                                                //          .endofpacket
		.in_ready             (cmd_demux_src1_ready),                                                                                      //          .ready
		.in_data              (cmd_demux_src1_data),                                                                                       //          .data
		.out_endofpacket      (arm_a9_hps_h2f_axi_master_wr_to_vga_subsystem_pixel_dma_control_slave_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (arm_a9_hps_h2f_axi_master_wr_to_vga_subsystem_pixel_dma_control_slave_cmd_width_adapter_src_data),          //          .data
		.out_channel          (arm_a9_hps_h2f_axi_master_wr_to_vga_subsystem_pixel_dma_control_slave_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (arm_a9_hps_h2f_axi_master_wr_to_vga_subsystem_pixel_dma_control_slave_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (arm_a9_hps_h2f_axi_master_wr_to_vga_subsystem_pixel_dma_control_slave_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (arm_a9_hps_h2f_axi_master_wr_to_vga_subsystem_pixel_dma_control_slave_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                                                     // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (175),
		.IN_PKT_ADDR_L                 (144),
		.IN_PKT_DATA_H                 (127),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (143),
		.IN_PKT_BYTEEN_L               (128),
		.IN_PKT_BYTE_CNT_H             (190),
		.IN_PKT_BYTE_CNT_L             (182),
		.IN_PKT_TRANS_COMPRESSED_READ  (176),
		.IN_PKT_BURSTWRAP_H            (199),
		.IN_PKT_BURSTWRAP_L            (191),
		.IN_PKT_BURST_SIZE_H           (202),
		.IN_PKT_BURST_SIZE_L           (200),
		.IN_PKT_RESPONSE_STATUS_H      (235),
		.IN_PKT_RESPONSE_STATUS_L      (234),
		.IN_PKT_TRANS_EXCLUSIVE        (181),
		.IN_PKT_BURST_TYPE_H           (204),
		.IN_PKT_BURST_TYPE_L           (203),
		.IN_PKT_ORI_BURST_SIZE_L       (236),
		.IN_PKT_ORI_BURST_SIZE_H       (238),
		.IN_ST_DATA_W                  (239),
		.OUT_PKT_ADDR_H                (49),
		.OUT_PKT_ADDR_L                (18),
		.OUT_PKT_DATA_H                (15),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (17),
		.OUT_PKT_BYTEEN_L              (16),
		.OUT_PKT_BYTE_CNT_H            (64),
		.OUT_PKT_BYTE_CNT_L            (56),
		.OUT_PKT_TRANS_COMPRESSED_READ (50),
		.OUT_PKT_BURST_SIZE_H          (76),
		.OUT_PKT_BURST_SIZE_L          (74),
		.OUT_PKT_RESPONSE_STATUS_H     (109),
		.OUT_PKT_RESPONSE_STATUS_L     (108),
		.OUT_PKT_TRANS_EXCLUSIVE       (55),
		.OUT_PKT_BURST_TYPE_H          (78),
		.OUT_PKT_BURST_TYPE_L          (77),
		.OUT_PKT_ORI_BURST_SIZE_L      (110),
		.OUT_PKT_ORI_BURST_SIZE_H      (112),
		.OUT_ST_DATA_W                 (113),
		.ST_CHANNEL_W                  (6),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (0),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) arm_a9_hps_h2f_axi_master_rd_to_sdram_s1_cmd_width_adapter (
		.clk                  (System_PLL_sys_clk_clk),                                                       //       clk.clk
		.reset                (Arm_A9_HPS_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset),        // clk_reset.reset
		.in_valid             (cmd_demux_001_src0_valid),                                                     //      sink.valid
		.in_channel           (cmd_demux_001_src0_channel),                                                   //          .channel
		.in_startofpacket     (cmd_demux_001_src0_startofpacket),                                             //          .startofpacket
		.in_endofpacket       (cmd_demux_001_src0_endofpacket),                                               //          .endofpacket
		.in_ready             (cmd_demux_001_src0_ready),                                                     //          .ready
		.in_data              (cmd_demux_001_src0_data),                                                      //          .data
		.out_endofpacket      (arm_a9_hps_h2f_axi_master_rd_to_sdram_s1_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (arm_a9_hps_h2f_axi_master_rd_to_sdram_s1_cmd_width_adapter_src_data),          //          .data
		.out_channel          (arm_a9_hps_h2f_axi_master_rd_to_sdram_s1_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (arm_a9_hps_h2f_axi_master_rd_to_sdram_s1_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (arm_a9_hps_h2f_axi_master_rd_to_sdram_s1_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (arm_a9_hps_h2f_axi_master_rd_to_sdram_s1_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                        // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (175),
		.IN_PKT_ADDR_L                 (144),
		.IN_PKT_DATA_H                 (127),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (143),
		.IN_PKT_BYTEEN_L               (128),
		.IN_PKT_BYTE_CNT_H             (190),
		.IN_PKT_BYTE_CNT_L             (182),
		.IN_PKT_TRANS_COMPRESSED_READ  (176),
		.IN_PKT_BURSTWRAP_H            (199),
		.IN_PKT_BURSTWRAP_L            (191),
		.IN_PKT_BURST_SIZE_H           (202),
		.IN_PKT_BURST_SIZE_L           (200),
		.IN_PKT_RESPONSE_STATUS_H      (235),
		.IN_PKT_RESPONSE_STATUS_L      (234),
		.IN_PKT_TRANS_EXCLUSIVE        (181),
		.IN_PKT_BURST_TYPE_H           (204),
		.IN_PKT_BURST_TYPE_L           (203),
		.IN_PKT_ORI_BURST_SIZE_L       (236),
		.IN_PKT_ORI_BURST_SIZE_H       (238),
		.IN_ST_DATA_W                  (239),
		.OUT_PKT_ADDR_H                (67),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (82),
		.OUT_PKT_BYTE_CNT_L            (74),
		.OUT_PKT_TRANS_COMPRESSED_READ (68),
		.OUT_PKT_BURST_SIZE_H          (94),
		.OUT_PKT_BURST_SIZE_L          (92),
		.OUT_PKT_RESPONSE_STATUS_H     (127),
		.OUT_PKT_RESPONSE_STATUS_L     (126),
		.OUT_PKT_TRANS_EXCLUSIVE       (73),
		.OUT_PKT_BURST_TYPE_H          (96),
		.OUT_PKT_BURST_TYPE_L          (95),
		.OUT_PKT_ORI_BURST_SIZE_L      (128),
		.OUT_PKT_ORI_BURST_SIZE_H      (130),
		.OUT_ST_DATA_W                 (131),
		.ST_CHANNEL_W                  (6),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (0),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) arm_a9_hps_h2f_axi_master_rd_to_vga_subsystem_pixel_dma_control_slave_cmd_width_adapter (
		.clk                  (System_PLL_sys_clk_clk),                                                                                    //       clk.clk
		.reset                (Arm_A9_HPS_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset),                                     // clk_reset.reset
		.in_valid             (cmd_demux_001_src1_valid),                                                                                  //      sink.valid
		.in_channel           (cmd_demux_001_src1_channel),                                                                                //          .channel
		.in_startofpacket     (cmd_demux_001_src1_startofpacket),                                                                          //          .startofpacket
		.in_endofpacket       (cmd_demux_001_src1_endofpacket),                                                                            //          .endofpacket
		.in_ready             (cmd_demux_001_src1_ready),                                                                                  //          .ready
		.in_data              (cmd_demux_001_src1_data),                                                                                   //          .data
		.out_endofpacket      (arm_a9_hps_h2f_axi_master_rd_to_vga_subsystem_pixel_dma_control_slave_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (arm_a9_hps_h2f_axi_master_rd_to_vga_subsystem_pixel_dma_control_slave_cmd_width_adapter_src_data),          //          .data
		.out_channel          (arm_a9_hps_h2f_axi_master_rd_to_vga_subsystem_pixel_dma_control_slave_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (arm_a9_hps_h2f_axi_master_rd_to_vga_subsystem_pixel_dma_control_slave_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (arm_a9_hps_h2f_axi_master_rd_to_vga_subsystem_pixel_dma_control_slave_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (arm_a9_hps_h2f_axi_master_rd_to_vga_subsystem_pixel_dma_control_slave_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                                                     // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (67),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (82),
		.IN_PKT_BYTE_CNT_L             (74),
		.IN_PKT_TRANS_COMPRESSED_READ  (68),
		.IN_PKT_BURSTWRAP_H            (91),
		.IN_PKT_BURSTWRAP_L            (83),
		.IN_PKT_BURST_SIZE_H           (94),
		.IN_PKT_BURST_SIZE_L           (92),
		.IN_PKT_RESPONSE_STATUS_H      (127),
		.IN_PKT_RESPONSE_STATUS_L      (126),
		.IN_PKT_TRANS_EXCLUSIVE        (73),
		.IN_PKT_BURST_TYPE_H           (96),
		.IN_PKT_BURST_TYPE_L           (95),
		.IN_PKT_ORI_BURST_SIZE_L       (128),
		.IN_PKT_ORI_BURST_SIZE_H       (130),
		.IN_ST_DATA_W                  (131),
		.OUT_PKT_ADDR_H                (49),
		.OUT_PKT_ADDR_L                (18),
		.OUT_PKT_DATA_H                (15),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (17),
		.OUT_PKT_BYTEEN_L              (16),
		.OUT_PKT_BYTE_CNT_H            (64),
		.OUT_PKT_BYTE_CNT_L            (56),
		.OUT_PKT_TRANS_COMPRESSED_READ (50),
		.OUT_PKT_BURST_SIZE_H          (76),
		.OUT_PKT_BURST_SIZE_L          (74),
		.OUT_PKT_RESPONSE_STATUS_H     (109),
		.OUT_PKT_RESPONSE_STATUS_L     (108),
		.OUT_PKT_TRANS_EXCLUSIVE       (55),
		.OUT_PKT_BURST_TYPE_H          (78),
		.OUT_PKT_BURST_TYPE_L          (77),
		.OUT_PKT_ORI_BURST_SIZE_L      (110),
		.OUT_PKT_ORI_BURST_SIZE_H      (112),
		.OUT_ST_DATA_W                 (113),
		.ST_CHANNEL_W                  (6),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (0),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) jtag_to_fpga_bridge_master_to_sdram_s1_cmd_width_adapter (
		.clk                  (System_PLL_sys_clk_clk),                                                     //       clk.clk
		.reset                (SDRAM_reset_reset_bridge_in_reset_reset),                                    // clk_reset.reset
		.in_valid             (cmd_demux_002_src0_valid),                                                   //      sink.valid
		.in_channel           (cmd_demux_002_src0_channel),                                                 //          .channel
		.in_startofpacket     (cmd_demux_002_src0_startofpacket),                                           //          .startofpacket
		.in_endofpacket       (cmd_demux_002_src0_endofpacket),                                             //          .endofpacket
		.in_ready             (cmd_demux_002_src0_ready),                                                   //          .ready
		.in_data              (cmd_demux_002_src0_data),                                                    //          .data
		.out_endofpacket      (jtag_to_fpga_bridge_master_to_sdram_s1_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (jtag_to_fpga_bridge_master_to_sdram_s1_cmd_width_adapter_src_data),          //          .data
		.out_channel          (jtag_to_fpga_bridge_master_to_sdram_s1_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (jtag_to_fpga_bridge_master_to_sdram_s1_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (jtag_to_fpga_bridge_master_to_sdram_s1_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (jtag_to_fpga_bridge_master_to_sdram_s1_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                      // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (49),
		.IN_PKT_ADDR_L                 (18),
		.IN_PKT_DATA_H                 (15),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (17),
		.IN_PKT_BYTEEN_L               (16),
		.IN_PKT_BYTE_CNT_H             (64),
		.IN_PKT_BYTE_CNT_L             (56),
		.IN_PKT_TRANS_COMPRESSED_READ  (50),
		.IN_PKT_BURSTWRAP_H            (73),
		.IN_PKT_BURSTWRAP_L            (65),
		.IN_PKT_BURST_SIZE_H           (76),
		.IN_PKT_BURST_SIZE_L           (74),
		.IN_PKT_RESPONSE_STATUS_H      (109),
		.IN_PKT_RESPONSE_STATUS_L      (108),
		.IN_PKT_TRANS_EXCLUSIVE        (55),
		.IN_PKT_BURST_TYPE_H           (78),
		.IN_PKT_BURST_TYPE_L           (77),
		.IN_PKT_ORI_BURST_SIZE_L       (110),
		.IN_PKT_ORI_BURST_SIZE_H       (112),
		.IN_ST_DATA_W                  (113),
		.OUT_PKT_ADDR_H                (175),
		.OUT_PKT_ADDR_L                (144),
		.OUT_PKT_DATA_H                (127),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (143),
		.OUT_PKT_BYTEEN_L              (128),
		.OUT_PKT_BYTE_CNT_H            (190),
		.OUT_PKT_BYTE_CNT_L            (182),
		.OUT_PKT_TRANS_COMPRESSED_READ (176),
		.OUT_PKT_BURST_SIZE_H          (202),
		.OUT_PKT_BURST_SIZE_L          (200),
		.OUT_PKT_RESPONSE_STATUS_H     (235),
		.OUT_PKT_RESPONSE_STATUS_L     (234),
		.OUT_PKT_TRANS_EXCLUSIVE       (181),
		.OUT_PKT_BURST_TYPE_H          (204),
		.OUT_PKT_BURST_TYPE_L          (203),
		.OUT_PKT_ORI_BURST_SIZE_L      (236),
		.OUT_PKT_ORI_BURST_SIZE_H      (238),
		.OUT_ST_DATA_W                 (239),
		.ST_CHANNEL_W                  (6),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) sdram_s1_to_arm_a9_hps_h2f_axi_master_wr_rsp_width_adapter (
		.clk                  (System_PLL_sys_clk_clk),                                                       //       clk.clk
		.reset                (SDRAM_reset_reset_bridge_in_reset_reset),                                      // clk_reset.reset
		.in_valid             (rsp_demux_src0_valid),                                                         //      sink.valid
		.in_channel           (rsp_demux_src0_channel),                                                       //          .channel
		.in_startofpacket     (rsp_demux_src0_startofpacket),                                                 //          .startofpacket
		.in_endofpacket       (rsp_demux_src0_endofpacket),                                                   //          .endofpacket
		.in_ready             (rsp_demux_src0_ready),                                                         //          .ready
		.in_data              (rsp_demux_src0_data),                                                          //          .data
		.out_endofpacket      (sdram_s1_to_arm_a9_hps_h2f_axi_master_wr_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (sdram_s1_to_arm_a9_hps_h2f_axi_master_wr_rsp_width_adapter_src_data),          //          .data
		.out_channel          (sdram_s1_to_arm_a9_hps_h2f_axi_master_wr_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (sdram_s1_to_arm_a9_hps_h2f_axi_master_wr_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (sdram_s1_to_arm_a9_hps_h2f_axi_master_wr_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (sdram_s1_to_arm_a9_hps_h2f_axi_master_wr_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                        // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (49),
		.IN_PKT_ADDR_L                 (18),
		.IN_PKT_DATA_H                 (15),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (17),
		.IN_PKT_BYTEEN_L               (16),
		.IN_PKT_BYTE_CNT_H             (64),
		.IN_PKT_BYTE_CNT_L             (56),
		.IN_PKT_TRANS_COMPRESSED_READ  (50),
		.IN_PKT_BURSTWRAP_H            (73),
		.IN_PKT_BURSTWRAP_L            (65),
		.IN_PKT_BURST_SIZE_H           (76),
		.IN_PKT_BURST_SIZE_L           (74),
		.IN_PKT_RESPONSE_STATUS_H      (109),
		.IN_PKT_RESPONSE_STATUS_L      (108),
		.IN_PKT_TRANS_EXCLUSIVE        (55),
		.IN_PKT_BURST_TYPE_H           (78),
		.IN_PKT_BURST_TYPE_L           (77),
		.IN_PKT_ORI_BURST_SIZE_L       (110),
		.IN_PKT_ORI_BURST_SIZE_H       (112),
		.IN_ST_DATA_W                  (113),
		.OUT_PKT_ADDR_H                (175),
		.OUT_PKT_ADDR_L                (144),
		.OUT_PKT_DATA_H                (127),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (143),
		.OUT_PKT_BYTEEN_L              (128),
		.OUT_PKT_BYTE_CNT_H            (190),
		.OUT_PKT_BYTE_CNT_L            (182),
		.OUT_PKT_TRANS_COMPRESSED_READ (176),
		.OUT_PKT_BURST_SIZE_H          (202),
		.OUT_PKT_BURST_SIZE_L          (200),
		.OUT_PKT_RESPONSE_STATUS_H     (235),
		.OUT_PKT_RESPONSE_STATUS_L     (234),
		.OUT_PKT_TRANS_EXCLUSIVE       (181),
		.OUT_PKT_BURST_TYPE_H          (204),
		.OUT_PKT_BURST_TYPE_L          (203),
		.OUT_PKT_ORI_BURST_SIZE_L      (236),
		.OUT_PKT_ORI_BURST_SIZE_H      (238),
		.OUT_ST_DATA_W                 (239),
		.ST_CHANNEL_W                  (6),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) sdram_s1_to_arm_a9_hps_h2f_axi_master_rd_rsp_width_adapter (
		.clk                  (System_PLL_sys_clk_clk),                                                       //       clk.clk
		.reset                (SDRAM_reset_reset_bridge_in_reset_reset),                                      // clk_reset.reset
		.in_valid             (rsp_demux_src1_valid),                                                         //      sink.valid
		.in_channel           (rsp_demux_src1_channel),                                                       //          .channel
		.in_startofpacket     (rsp_demux_src1_startofpacket),                                                 //          .startofpacket
		.in_endofpacket       (rsp_demux_src1_endofpacket),                                                   //          .endofpacket
		.in_ready             (rsp_demux_src1_ready),                                                         //          .ready
		.in_data              (rsp_demux_src1_data),                                                          //          .data
		.out_endofpacket      (sdram_s1_to_arm_a9_hps_h2f_axi_master_rd_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (sdram_s1_to_arm_a9_hps_h2f_axi_master_rd_rsp_width_adapter_src_data),          //          .data
		.out_channel          (sdram_s1_to_arm_a9_hps_h2f_axi_master_rd_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (sdram_s1_to_arm_a9_hps_h2f_axi_master_rd_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (sdram_s1_to_arm_a9_hps_h2f_axi_master_rd_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (sdram_s1_to_arm_a9_hps_h2f_axi_master_rd_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                        // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (49),
		.IN_PKT_ADDR_L                 (18),
		.IN_PKT_DATA_H                 (15),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (17),
		.IN_PKT_BYTEEN_L               (16),
		.IN_PKT_BYTE_CNT_H             (64),
		.IN_PKT_BYTE_CNT_L             (56),
		.IN_PKT_TRANS_COMPRESSED_READ  (50),
		.IN_PKT_BURSTWRAP_H            (73),
		.IN_PKT_BURSTWRAP_L            (65),
		.IN_PKT_BURST_SIZE_H           (76),
		.IN_PKT_BURST_SIZE_L           (74),
		.IN_PKT_RESPONSE_STATUS_H      (109),
		.IN_PKT_RESPONSE_STATUS_L      (108),
		.IN_PKT_TRANS_EXCLUSIVE        (55),
		.IN_PKT_BURST_TYPE_H           (78),
		.IN_PKT_BURST_TYPE_L           (77),
		.IN_PKT_ORI_BURST_SIZE_L       (110),
		.IN_PKT_ORI_BURST_SIZE_H       (112),
		.IN_ST_DATA_W                  (113),
		.OUT_PKT_ADDR_H                (67),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (82),
		.OUT_PKT_BYTE_CNT_L            (74),
		.OUT_PKT_TRANS_COMPRESSED_READ (68),
		.OUT_PKT_BURST_SIZE_H          (94),
		.OUT_PKT_BURST_SIZE_L          (92),
		.OUT_PKT_RESPONSE_STATUS_H     (127),
		.OUT_PKT_RESPONSE_STATUS_L     (126),
		.OUT_PKT_TRANS_EXCLUSIVE       (73),
		.OUT_PKT_BURST_TYPE_H          (96),
		.OUT_PKT_BURST_TYPE_L          (95),
		.OUT_PKT_ORI_BURST_SIZE_L      (128),
		.OUT_PKT_ORI_BURST_SIZE_H      (130),
		.OUT_ST_DATA_W                 (131),
		.ST_CHANNEL_W                  (6),
		.OPTIMIZE_FOR_RSP              (1),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) sdram_s1_to_jtag_to_fpga_bridge_master_rsp_width_adapter (
		.clk                  (System_PLL_sys_clk_clk),                                                     //       clk.clk
		.reset                (SDRAM_reset_reset_bridge_in_reset_reset),                                    // clk_reset.reset
		.in_valid             (rsp_demux_src2_valid),                                                       //      sink.valid
		.in_channel           (rsp_demux_src2_channel),                                                     //          .channel
		.in_startofpacket     (rsp_demux_src2_startofpacket),                                               //          .startofpacket
		.in_endofpacket       (rsp_demux_src2_endofpacket),                                                 //          .endofpacket
		.in_ready             (rsp_demux_src2_ready),                                                       //          .ready
		.in_data              (rsp_demux_src2_data),                                                        //          .data
		.out_endofpacket      (sdram_s1_to_jtag_to_fpga_bridge_master_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (sdram_s1_to_jtag_to_fpga_bridge_master_rsp_width_adapter_src_data),          //          .data
		.out_channel          (sdram_s1_to_jtag_to_fpga_bridge_master_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (sdram_s1_to_jtag_to_fpga_bridge_master_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (sdram_s1_to_jtag_to_fpga_bridge_master_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (sdram_s1_to_jtag_to_fpga_bridge_master_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                      // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (67),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (82),
		.IN_PKT_BYTE_CNT_L             (74),
		.IN_PKT_TRANS_COMPRESSED_READ  (68),
		.IN_PKT_BURSTWRAP_H            (91),
		.IN_PKT_BURSTWRAP_L            (83),
		.IN_PKT_BURST_SIZE_H           (94),
		.IN_PKT_BURST_SIZE_L           (92),
		.IN_PKT_RESPONSE_STATUS_H      (127),
		.IN_PKT_RESPONSE_STATUS_L      (126),
		.IN_PKT_TRANS_EXCLUSIVE        (73),
		.IN_PKT_BURST_TYPE_H           (96),
		.IN_PKT_BURST_TYPE_L           (95),
		.IN_PKT_ORI_BURST_SIZE_L       (128),
		.IN_PKT_ORI_BURST_SIZE_H       (130),
		.IN_ST_DATA_W                  (131),
		.OUT_PKT_ADDR_H                (175),
		.OUT_PKT_ADDR_L                (144),
		.OUT_PKT_DATA_H                (127),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (143),
		.OUT_PKT_BYTEEN_L              (128),
		.OUT_PKT_BYTE_CNT_H            (190),
		.OUT_PKT_BYTE_CNT_L            (182),
		.OUT_PKT_TRANS_COMPRESSED_READ (176),
		.OUT_PKT_BURST_SIZE_H          (202),
		.OUT_PKT_BURST_SIZE_L          (200),
		.OUT_PKT_RESPONSE_STATUS_H     (235),
		.OUT_PKT_RESPONSE_STATUS_L     (234),
		.OUT_PKT_TRANS_EXCLUSIVE       (181),
		.OUT_PKT_BURST_TYPE_H          (204),
		.OUT_PKT_BURST_TYPE_L          (203),
		.OUT_PKT_ORI_BURST_SIZE_L      (236),
		.OUT_PKT_ORI_BURST_SIZE_H      (238),
		.OUT_ST_DATA_W                 (239),
		.ST_CHANNEL_W                  (6),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) vga_subsystem_pixel_dma_control_slave_to_arm_a9_hps_h2f_axi_master_wr_rsp_width_adapter (
		.clk                  (System_PLL_sys_clk_clk),                                                                                    //       clk.clk
		.reset                (SDRAM_reset_reset_bridge_in_reset_reset),                                                                   // clk_reset.reset
		.in_valid             (rsp_demux_001_src0_valid),                                                                                  //      sink.valid
		.in_channel           (rsp_demux_001_src0_channel),                                                                                //          .channel
		.in_startofpacket     (rsp_demux_001_src0_startofpacket),                                                                          //          .startofpacket
		.in_endofpacket       (rsp_demux_001_src0_endofpacket),                                                                            //          .endofpacket
		.in_ready             (rsp_demux_001_src0_ready),                                                                                  //          .ready
		.in_data              (rsp_demux_001_src0_data),                                                                                   //          .data
		.out_endofpacket      (vga_subsystem_pixel_dma_control_slave_to_arm_a9_hps_h2f_axi_master_wr_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (vga_subsystem_pixel_dma_control_slave_to_arm_a9_hps_h2f_axi_master_wr_rsp_width_adapter_src_data),          //          .data
		.out_channel          (vga_subsystem_pixel_dma_control_slave_to_arm_a9_hps_h2f_axi_master_wr_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (vga_subsystem_pixel_dma_control_slave_to_arm_a9_hps_h2f_axi_master_wr_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (vga_subsystem_pixel_dma_control_slave_to_arm_a9_hps_h2f_axi_master_wr_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (vga_subsystem_pixel_dma_control_slave_to_arm_a9_hps_h2f_axi_master_wr_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                                                     // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (67),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (82),
		.IN_PKT_BYTE_CNT_L             (74),
		.IN_PKT_TRANS_COMPRESSED_READ  (68),
		.IN_PKT_BURSTWRAP_H            (91),
		.IN_PKT_BURSTWRAP_L            (83),
		.IN_PKT_BURST_SIZE_H           (94),
		.IN_PKT_BURST_SIZE_L           (92),
		.IN_PKT_RESPONSE_STATUS_H      (127),
		.IN_PKT_RESPONSE_STATUS_L      (126),
		.IN_PKT_TRANS_EXCLUSIVE        (73),
		.IN_PKT_BURST_TYPE_H           (96),
		.IN_PKT_BURST_TYPE_L           (95),
		.IN_PKT_ORI_BURST_SIZE_L       (128),
		.IN_PKT_ORI_BURST_SIZE_H       (130),
		.IN_ST_DATA_W                  (131),
		.OUT_PKT_ADDR_H                (175),
		.OUT_PKT_ADDR_L                (144),
		.OUT_PKT_DATA_H                (127),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (143),
		.OUT_PKT_BYTEEN_L              (128),
		.OUT_PKT_BYTE_CNT_H            (190),
		.OUT_PKT_BYTE_CNT_L            (182),
		.OUT_PKT_TRANS_COMPRESSED_READ (176),
		.OUT_PKT_BURST_SIZE_H          (202),
		.OUT_PKT_BURST_SIZE_L          (200),
		.OUT_PKT_RESPONSE_STATUS_H     (235),
		.OUT_PKT_RESPONSE_STATUS_L     (234),
		.OUT_PKT_TRANS_EXCLUSIVE       (181),
		.OUT_PKT_BURST_TYPE_H          (204),
		.OUT_PKT_BURST_TYPE_L          (203),
		.OUT_PKT_ORI_BURST_SIZE_L      (236),
		.OUT_PKT_ORI_BURST_SIZE_H      (238),
		.OUT_ST_DATA_W                 (239),
		.ST_CHANNEL_W                  (6),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) vga_subsystem_pixel_dma_control_slave_to_arm_a9_hps_h2f_axi_master_rd_rsp_width_adapter (
		.clk                  (System_PLL_sys_clk_clk),                                                                                    //       clk.clk
		.reset                (SDRAM_reset_reset_bridge_in_reset_reset),                                                                   // clk_reset.reset
		.in_valid             (rsp_demux_001_src1_valid),                                                                                  //      sink.valid
		.in_channel           (rsp_demux_001_src1_channel),                                                                                //          .channel
		.in_startofpacket     (rsp_demux_001_src1_startofpacket),                                                                          //          .startofpacket
		.in_endofpacket       (rsp_demux_001_src1_endofpacket),                                                                            //          .endofpacket
		.in_ready             (rsp_demux_001_src1_ready),                                                                                  //          .ready
		.in_data              (rsp_demux_001_src1_data),                                                                                   //          .data
		.out_endofpacket      (vga_subsystem_pixel_dma_control_slave_to_arm_a9_hps_h2f_axi_master_rd_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (vga_subsystem_pixel_dma_control_slave_to_arm_a9_hps_h2f_axi_master_rd_rsp_width_adapter_src_data),          //          .data
		.out_channel          (vga_subsystem_pixel_dma_control_slave_to_arm_a9_hps_h2f_axi_master_rd_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (vga_subsystem_pixel_dma_control_slave_to_arm_a9_hps_h2f_axi_master_rd_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (vga_subsystem_pixel_dma_control_slave_to_arm_a9_hps_h2f_axi_master_rd_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (vga_subsystem_pixel_dma_control_slave_to_arm_a9_hps_h2f_axi_master_rd_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                                                     // (terminated)
	);

endmodule
