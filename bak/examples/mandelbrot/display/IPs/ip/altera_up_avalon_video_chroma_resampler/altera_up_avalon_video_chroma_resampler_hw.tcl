# +----------------------------------------------------------------------------+
# | License Agreement                                                          |
# |                                                                            |
# | Copyright (c) 1991-2013 Altera Corporation, San Jose, California, USA.     |
# | All rights reserved.                                                       |
# |                                                                            |
# | Any megafunction design, and related net list (encrypted or decrypted),    |
# |  support information, device programming or simulation file, and any other |
# |  associated documentation or information provided by Altera or a partner   |
# |  under Altera's Megafunction Partnership Program may be used only to       |
# |  program PLD devices (but not masked PLD devices) from Altera.  Any other  |
# |  use of such megafunction design, net list, support information, device    |
# |  programming or simulation file, or any other related documentation or     |
# |  information is prohibited for any other purpose, including, but not       |
# |  limited to modification, reverse engineering, de-compiling, or use with   |
# |  any other silicon devices, unless such use is explicitly licensed under   |
# |  a separate agreement with Altera or a megafunction partner.  Title to     |
# |  the intellectual property, including patents, copyrights, trademarks,     |
# |  trade secrets, or maskworks, embodied in any such megafunction design,    |
# |  net list, support information, device programming or simulation file, or  |
# |  any other related documentation or information provided by Altera or a    |
# |  megafunction partner, remains with Altera, the megafunction partner, or   |
# |  their respective licensors.  No other licenses, including any licenses    |
# |  needed under any third party's intellectual property, are provided herein.|
# |  Copying or modifying any file, or portion thereof, to which this notice   |
# |  is attached violates this copyright.                                      |
# |                                                                            |
# | THIS FILE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR    |
# | IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,   |
# | FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL    |
# | THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER |
# | LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING    |
# | FROM, OUT OF OR IN CONNECTION WITH THIS FILE OR THE USE OR OTHER DEALINGS  |
# | IN THIS FILE.                                                              |
# |                                                                            |
# | This agreement shall be governed in all respects by the laws of the State  |
# |  of California and by the laws of the United States of America.            |
# |                                                                            |
# +----------------------------------------------------------------------------+

# TCL File Generated by Altera University Program
# DO NOT MODIFY

# +-----------------------------------
# | module altera_up_avalon_video_chroma_resampler
# | 
set_module_property DESCRIPTION "Chroma Resampler for DE-series Boards"
set_module_property NAME altera_up_avalon_video_chroma_resampler
set_module_property VERSION 13.0
set_module_property GROUP "University Program/Audio & Video/Video"
set_module_property AUTHOR "Altera University Program"
set_module_property DISPLAY_NAME "Chroma Resampler"
set_module_property DATASHEET_URL "../doc/Video.pdf"
#set_module_property TOP_LEVEL_HDL_FILE altera_up_avalon_video_chroma_resampler.v
#set_module_property TOP_LEVEL_HDL_MODULE altera_up_avalon_video_chroma_resampler
set_module_property INSTANTIATE_IN_SYSTEM_MODULE true
set_module_property EDITABLE false
set_module_property ANALYZE_HDL false
set_module_property VALIDATION_CALLBACK validate
set_module_property ELABORATION_CALLBACK elaborate
set_module_property GENERATION_CALLBACK generate
# | 
# +-----------------------------------

# +-----------------------------------
# | files
# | 
#add_file altera_up_avalon_video_chroma_resampler.v {SYNTHESIS SIMULATION}
# | 
# +-----------------------------------

# +-----------------------------------
# | parameters
# | 
add_parameter input_type string "YCrCb 422"
set_parameter_property input_type DISPLAY_NAME "Incoming Format"
set_parameter_property input_type UNITS None
set_parameter_property input_type AFFECTS_ELABORATION true
set_parameter_property input_type AFFECTS_GENERATION true
set_parameter_property input_type ALLOWED_RANGES {"YCrCb 444" "YCrCb 422" "Y only"}
set_parameter_property input_type VISIBLE true
set_parameter_property input_type ENABLED true

add_parameter output_type string "YCrCb 444"
set_parameter_property output_type DISPLAY_NAME "Outgoing Format"
set_parameter_property output_type UNITS None
set_parameter_property output_type AFFECTS_ELABORATION true
set_parameter_property output_type AFFECTS_GENERATION true
set_parameter_property output_type ALLOWED_RANGES {"YCrCb 444" "YCrCb 422" "Y only"}
set_parameter_property output_type VISIBLE true
set_parameter_property output_type ENABLED true

add_parameter input_bits positive "8"
set_parameter_property input_bits DISPLAY_NAME "Input Color Bits"
set_parameter_property input_bits GROUP "Input Color Format"
set_parameter_property input_bits UNITS None
set_parameter_property input_bits AFFECTS_ELABORATION true
set_parameter_property input_bits AFFECTS_GENERATION true
set_parameter_property input_bits DERIVED true
set_parameter_property input_bits VISIBLE false
set_parameter_property input_bits ENABLED false

add_parameter input_planes positive "2"
set_parameter_property input_planes DISPLAY_NAME "Input Color Planes"
set_parameter_property input_planes GROUP "Input Color Format"
set_parameter_property input_planes UNITS None
set_parameter_property input_planes AFFECTS_ELABORATION true
set_parameter_property input_planes AFFECTS_GENERATION true
set_parameter_property input_planes DERIVED true
set_parameter_property input_planes VISIBLE false
set_parameter_property input_planes ENABLED false

add_parameter output_bits positive "8"
set_parameter_property output_bits DISPLAY_NAME "Output Color Bits"
set_parameter_property output_bits GROUP "Output Color Format"
set_parameter_property output_bits UNITS None
set_parameter_property output_bits AFFECTS_ELABORATION true
set_parameter_property output_bits AFFECTS_GENERATION true
set_parameter_property output_bits DERIVED true
set_parameter_property output_bits VISIBLE false
set_parameter_property output_bits ENABLED false

add_parameter output_planes positive "3"
set_parameter_property output_planes DISPLAY_NAME "Output Color Planes"
set_parameter_property output_planes GROUP "Output Color Format"
set_parameter_property output_planes UNITS None
set_parameter_property output_planes AFFECTS_ELABORATION true
set_parameter_property output_planes AFFECTS_GENERATION true
set_parameter_property output_planes DERIVED true
set_parameter_property output_planes VISIBLE false
set_parameter_property output_planes ENABLED false
# | 
# +-----------------------------------

# +-----------------------------------
# | connection point clock_reset
# | 
add_interface clock_reset clock end
set_interface_property clock_reset ptfSchematicName ""

add_interface_port clock_reset clk clk Input 1
add_interface_port clock_reset reset reset Input 1
# | 
# +-----------------------------------

# +-----------------------------------
# | connection point avalon_chroma_sink
# | 
add_interface avalon_chroma_sink avalon_streaming end clock_reset
set_interface_property avalon_chroma_sink errorDescriptor ""
set_interface_property avalon_chroma_sink maxChannel 0
set_interface_property avalon_chroma_sink readyLatency 0

add_interface_port avalon_chroma_sink stream_in_startofpacket startofpacket Input 1
add_interface_port avalon_chroma_sink stream_in_endofpacket endofpacket Input 1
add_interface_port avalon_chroma_sink stream_in_valid valid Input 1
add_interface_port avalon_chroma_sink stream_in_ready ready Output 1
# | 
# +-----------------------------------

# +-----------------------------------
# | connection point avalon_chroma_source
# | 
add_interface avalon_chroma_source avalon_streaming start clock_reset
set_interface_property avalon_chroma_source errorDescriptor ""
set_interface_property avalon_chroma_source maxChannel 0
set_interface_property avalon_chroma_source readyLatency 0

add_interface_port avalon_chroma_source stream_out_ready ready Input 1
add_interface_port avalon_chroma_source stream_out_startofpacket startofpacket Output 1
add_interface_port avalon_chroma_source stream_out_endofpacket endofpacket Output 1
add_interface_port avalon_chroma_source stream_out_valid valid Output 1
# | 
# +-----------------------------------

# +-----------------------------------
# | Validation function
# | 
proc validate {} {
	set input_type [ get_parameter_value "input_type" ]
	set output_type [ get_parameter_value "output_type" ]
	set input_bits [ get_parameter_value "input_bits" ]
	set output_bits [ get_parameter_value "output_bits" ]
	
	if { $input_type == "YCrCb 444" } {
		set_parameter_value input_planes 3 
	} elseif { $input_type == "YCrCb 422" } {
		set_parameter_value input_planes 2 
	} elseif { $input_type == "Y only" } {
		set_parameter_value input_planes 1
	}

	if { $output_type == "YCrCb 444" } {
		set_parameter_value output_planes 3 
	} elseif { $output_type == "YCrCb 422" } {
		set_parameter_value output_planes 2 
	} elseif { $output_type == "Y only" } {
		set_parameter_value output_planes 1
	}

	set input_planes [ get_parameter_value "input_planes" ]
	set output_planes [ get_parameter_value "output_planes" ]

	send_message info "Chroma Resampling: $input_bits (bits) x $input_planes (planes) -> $output_bits (bits) x $output_planes (planes)"
}
# | 
# +-----------------------------------

# +-----------------------------------
# | Elaboration function
# | 
proc elaborate {} {
	set input_type [ get_parameter_value "input_type" ]
	set output_type [ get_parameter_value "output_type" ]
	set input_bits [ get_parameter_value "input_bits" ]
	set input_planes [ get_parameter_value "input_planes" ]
	set output_bits [ get_parameter_value "output_bits" ]
	set output_planes [ get_parameter_value "output_planes" ]

	set idw [ expr $input_bits * $input_planes ]
	set odw [ expr $output_bits * $output_planes ]

	if { $input_planes == 3 } {
		set iew 2
	} else {
		set iew 1
	}
	if { $output_planes == 3 } {
		set oew 2
	} else {
		set oew 1
	}
	

	# +-----------------------------------
	# | connection point avalon_chroma_sink
	# | 
	set_interface_property avalon_chroma_sink dataBitsPerSymbol $input_bits
	set_interface_property avalon_chroma_sink symbolsPerBeat $input_planes
	
	add_interface_port avalon_chroma_sink stream_in_data data Input $idw
#	add_interface_port avalon_chroma_sink stream_in_empty empty Input $iew
	# | 
	# +-----------------------------------

	# +-----------------------------------
	# | connection point avalon_chroma_source
	# | 
	set_interface_property avalon_chroma_source dataBitsPerSymbol $output_bits
	set_interface_property avalon_chroma_source symbolsPerBeat $output_planes

	add_interface_port avalon_chroma_source stream_out_data data Output $odw
#	add_interface_port avalon_chroma_source stream_out_empty empty Output $oew
	# | 
	# +-----------------------------------
}
# | 
# +-----------------------------------

# +-----------------------------------
# | Generation function
# | 
proc generate {} {
	send_message info "Starting Generation of Chroma Resampler"

	# get parameter values
	set input_type [ get_parameter_value "input_type" ]
	set output_type [ get_parameter_value "output_type" ]
	set input_bits [ get_parameter_value "input_bits" ]
	set input_planes [ get_parameter_value "input_planes" ]
	set output_bits [ get_parameter_value "output_bits" ]
	set output_planes [ get_parameter_value "output_planes" ]

	set input_dw		[ format "IDW:%d" [ expr (($input_bits * $input_planes) - 1) ] ]
	set output_dw		[ format "ODW:%d" [ expr (($output_bits * $output_planes) - 1) ] ]

	if { $input_planes == 3 } {
		set input_ew "IEW:1"
	} else {
		set input_ew "IEW:0"
	}
	if { $output_planes == 3 } {
		set output_ew "OEW:1"
	} else {
		set output_ew "OEW:0"
	}

	# set section values
	set use_444_to_422 "USE_444_TO_422:0"
	set use_444_to_400 "USE_444_TO_400:0"
	set use_422_to_444 "USE_422_TO_444:0"
	set use_422_to_400 "USE_422_TO_400:0"
	set use_400_to_444 "USE_400_TO_444:0"
	set use_400_to_422 "USE_400_TO_422:0"
	
	if { $input_type == "YCrCb 444" } {
		if { $output_type == "YCrCb 422" } {
			set use_444_to_422 "USE_444_TO_422:1"		
		} elseif { $output_type == "Y only" } {
			set use_444_to_400 "USE_444_TO_400:1"		
		}
		
	} elseif { $input_type == "YCrCb 422" } {
		if { $output_type == "YCrCb 444" } {
			set use_422_to_444 "USE_422_TO_444:1"		
		} elseif { $output_type == "Y only" } {
			set use_422_to_400 "USE_422_TO_400:1"		
		}
		
	} elseif { $input_type == "Y only" } {
		if { $output_type == "YCrCb 444" } {
			set use_400_to_444 "USE_400_TO_444:1"		
		} elseif { $output_type == "YCrCb 422" } {
			set use_400_to_422 "USE_400_TO_422:1"		
		}		
	}

	# set arguments
	set params "$input_dw;$output_dw;$input_ew;$output_ew"
	set sections "$use_444_to_422;$use_444_to_400;$use_422_to_444;$use_422_to_400;$use_400_to_444;$use_400_to_422"

	# get generation settings
	set dest_language	[ get_generation_property HDL_LANGUAGE ]
	set dest_dir 		[ get_generation_property OUTPUT_DIRECTORY ]
	set dest_name		[ get_generation_property OUTPUT_NAME ]
	
	set file_ending "v"
	if { $dest_language == "VHDL" || $dest_language == "vhdl" } {
		set file_ending "vhd"
	}

	add_file "$dest_dir$dest_name.$file_ending" {SYNTHESIS SIMULATION}

	# Generate HDL
	source "up_ip_generator.tcl"
	alt_up_generate "$dest_dir$dest_name.$file_ending" "hdl/altera_up_avalon_video_chroma_resampler.$file_ending" "altera_up_avalon_video_chroma_resampler" $dest_name $params $sections
}
# | 
# +-----------------------------------

