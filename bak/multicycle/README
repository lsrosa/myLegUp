These ruby scripts were written by Ryoya Sobue during Aug-Sept, 2012
They were used to investigate the potential impact on fmax of applying
multi-cycle timing constraints to certain paths in the circuit generated by
LegUp. 

This README was written by Andrew Canis on Oct 15, 2012. This document was
written based on Ryoya's comments in his scripts and by trying one example
myself.

Basic usage
------------

First run LegUp on one of the examples:
    cd examples/sra
    make

Ensure that a scheduling.legup.rpt file was generated.
Now run Ryoya's scripts:
    ruby ../../multicycle/slackAnalyze.rb
    ruby ../../multicycle/modifySdcFile.rb sra.sdc 
    
sra.sdc now has the multi-cycle constraints

If there are Quartus warnings from the .sdc file generated by modifySdcFile.rb then run fix.rb:
    ruby ../../multicycle/fix.rb sra.v sra.sdc 

slackAnalyze.rb:
-----------------

    Usage: ruby slackAnalyze.rb

slackAnalyze.rb reads the LegUp generated file "scheduling.legup.rpt" from the
current working directory and analyzes the slack of all paths.
The slack is the number of cycles, between the output of an operation and its
successor operation.
Generates output files: scheduling.analyze.*.log for each function

For instance, for the following snippet from scheduling.legup.rpt:
    state: LEGUP_F_main_BB_0_1
       %a = alloca i32, align 4 (endState: LEGUP_F_main_BB_0_1)
    state: LEGUP_F_main_BB_0_2
    state: LEGUP_F_main_BB_0_3
    state: LEGUP_F_main_BB_0_4
    state: LEGUP_F_main_BB_0_5
    state: LEGUP_F_main_BB_0_6
    state: LEGUP_F_main_BB_0_7
    state: LEGUP_F_main_BB_0_8
    state: LEGUP_F_main_BB_0_9
    state: LEGUP_F_main_BB_0_10
    state: LEGUP_F_main_BB_6_11
    state: LEGUP_F_main_BB_6_12
    ...
    state: LEGUP_F_main_BB_70_73
           %71 = load i32* %a, align 4 (endState: LEGUP_F_main_BB_70_75)

The slack from %a to %71 is 9. Because %71 is in a different basic block (BB_70) than
%a (BB_0), we assume that number of cycles from %a to %71 is until at least the
end of BB_0 (LEGUP_F_main_BB_0_10), which is 9 cycles after the state where %a
is from (LEGUP_F_main_BB_0_1)

modifySdcFile.rb:
-----------------

    Usage: ruby modifySdcFile.rb [sdc file]

modifySdcFile.rb reads the file "scheduling.analyze.all.log" generated by
slackAnalyze.rb and uses the information to add multi-cycle constraints to the
given sdc file.
False-path constraints are also added to the memory controller and other
critical paths outside of the datapath to remove them from the final timing
report and so we can see the impact of the multi-cycle constraints.
These false-path constraints should eventually be removed when these other
paths are optimized properly by LegUp and the critical path is in the datapath.


fix.rb
-------

    Usage: ruby fix.rb [Verilog file] [sdc file]

fix.rb is run after modifySdcFile.rb to rewrite the sdc file to make sure every
register in the sdc file actually exists in the verilog file. Otherwise you may
get Quartus warnings from the .sdc file
