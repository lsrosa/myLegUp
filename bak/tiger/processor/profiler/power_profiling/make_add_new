#!/bin/bash

NUM_INSTRS=100	# later can introduce loops

# Instruction Classes
ARITH_DSI="addiu,andi,ori,sll,slti,sltiu,sra,srl,xori"		# D = F(S,Imm)

# Generate Random Number ($1 --> upper bound)
function rand() {
	local number=$RANDOM # $RANDOM returns in range 0..2^8
	let "number %= $1"
	echo "$number"
}


# Compile assembly to elf (and sdram.dat) ($1 --> filename.s)
function assemble() {
	NAME=${1%.*}
	OUT_NAME="$NAME"
	
	# Find name so we don't overwrite previously created files
	if [ -f $OUT_NAME.elf ]; then
		IDX=1
		while [ -f $OUT_NAME.$IDX.elf ]; do
			let "IDX += 1"
		done
		OUT_NAME="$NAME.$IDX"
	fi
	
	MIPS_PREFIX=../../../../mips-binutils/bin/mipsel-elf-
	${MIPS_PREFIX}as $NAME.s -mips1 -O0 -mabi=32 -o $OUT_NAME.o -EL
	${MIPS_PREFIX}ld -Ttext 0x800000 -e main $OUT_NAME.o -EL -o $OUT_NAME.elf
	${MIPS_PREFIX}objdump -Dz $OUT_NAME.elf > $OUT_NAME.src
	
	g++ elf2sdram.cpp -O3 -o elf2sdram
	elf2sdram ${OUT_NAME}.elf ${OUT_NAME}.sdram.dat
	#elf2mif ${OUT_NAME}.elf ${OUT_NAME}.mif
	rm $OUT_NAME.o
	#rm $NAME.s
	rm $OUT_NAME.*dump
	#rm $OUT_NAME.elf.src
}


if [ "0" = "1" ]; then
	assemble assembly/li.addi.s
	exit

	INSTR_LIST=${ARITH_DSI//,/ }
	for op in $(echo $INSTR_LIST); do
		sed "s|add \$9, \$10, |${op} \$9, \$10, |g" assembly/add.s > assembly/${op}.s
		assemble assembly/${op}.li.s
	done

	exit
fi
	
FILE=assembly/add.s
echo -e "\t.text\n\t.globl\tmain\n\t.ent\tmain\nmain:" > $FILE

RAND=`rand 1000000`
echo -e "\tli \$9, ${RAND}" >> $FILE
RAND=`rand 1000000`
echo -e "\tli \$10, ${RAND}" >> $FILE
RAND=`rand 1000000`
echo -e "\tli \$11, ${RAND}" >> $FILE
RAND=`rand 1000000`
echo -e "\tli \$12, ${RAND}" >> $FILE
RAND=`rand 1000000`
echo -e "\tli \$13, ${RAND}" >> $FILE
RAND=`rand 1000000`
echo -e "\tli \$14, ${RAND}" >> $FILE
RAND=`rand 1000000`
echo -e "\tli \$15, ${RAND}" >> $FILE
RAND=`rand 1000000`
echo -e "\tli \$16, ${RAND}" >> $FILE
RAND=`rand 1000000`
echo -e "\tli \$17, ${RAND}" >> $FILE
RAND=`rand 1000000`
echo -e "\tli \$18, ${RAND}" >> $FILE

for i in `seq 1 $NUM_INSTRS`; do
	echo -e "\tadd \$9, \$9, \$10" >> $FILE
	echo -e "\tadd \$11, \$11, \$12" >> $FILE
	echo -e "\tadd \$13, \$13, \$14" >> $FILE
	echo -e "\tadd \$15, \$15, \$16" >> $FILE
	echo -e "\tadd \$17, \$17, \$18" >> $FILE
	
	echo -e "\tadd \$10, \$9, \$10" >> $FILE
	echo -e "\tadd \$12, \$11, \$12" >> $FILE
	echo -e "\tadd \$14, \$13, \$14" >> $FILE
	echo -e "\tadd \$16, \$15, \$16" >> $FILE
	echo -e "\tadd \$18, \$17, \$18" >> $FILE
done

echo -e "\tjr \$ra\n\t.end\tmain" >> $FILE

assemble $FILE