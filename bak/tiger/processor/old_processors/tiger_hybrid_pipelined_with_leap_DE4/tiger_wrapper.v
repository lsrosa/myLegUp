// ============================================================================
// Copyright (c) 2010 by Terasic Technologies Inc. 
// ============================================================================
//
// Permission:
//
//   Terasic grants permission to use and modify this code for use
//   in synthesis for all Terasic Development Boards and Altera Development 
//   Kits made by Terasic.  Other use of this code, including the selling 
//   ,duplication, or modification of any portion is strictly prohibited.
//
// Disclaimer:
//
//   This VHDL/Verilog or C/C++ source code is intended as a design reference
//   which illustrates how these types of functions can be implemented.
//   It is the user's responsibility to verify their design for
//   consistency and functionality through the use of formal
//   verification methods.  Terasic provides no warranty regarding the use 
//   or functionality of this code.
//
// ============================================================================
//           
//                     Terasic Technologies Inc
//                     356 Fu-Shin E. Rd Sec. 1. JhuBei City,
//                     HsinChu County, Taiwan
//                     302
//
//                     web: http://www.terasic.com/
//                     email: support@terasic.com
//
// ============================================================================
// Major Functions/Design Description:
//
//   Please refer to DE4_UserManual.pdf in DE4 system CD.
//
// ============================================================================
// Revision History:
// ============================================================================
//   Ver.: |Author:   |Mod. Date:    |Changes Made:
//   V1.0  |Richard   |10/06/30      |
// ============================================================================

//=======================================================
//  This code is generated by Terasic System Builder
//=======================================================
//`define USE_DDR2_DIMM2

module tiger_wrapper(

	//////// CLOCK //////////
	GCLKIN,
	GCLKOUT_FPGA,
	MAX_CONF_D,
	MAX_PLL_D,
	OSC_50_Bank2,
	OSC_50_Bank3,
	OSC_50_Bank4,
	OSC_50_Bank5,
	OSC_50_Bank6,
	OSC_50_Bank7,
	PLL_CLKIN_p,
	
	//////////// RS232 //////////
	UART_RXD,
	UART_TXD,


	//////// LED x 8 //////////
	LED,

	//////// BUTTON x 4 //////////
	BUTTON,
	CPU_RESET_n,
	EXT_IO,

`ifndef USE_DDR2_DIMM2
	//////// DDR2 SODIMM //////////
	M1_DDR2_addr,
	M1_DDR2_ba,
	M1_DDR2_cas_n,
	M1_DDR2_cke,
	M1_DDR2_clk,
	M1_DDR2_clk_n,
	M1_DDR2_cs_n,
	M1_DDR2_dm,
	M1_DDR2_dq,
	M1_DDR2_dqs,
	M1_DDR2_dqsn,
	M1_DDR2_odt,
	M1_DDR2_ras_n,
	M1_DDR2_SA,
	M1_DDR2_SCL,
	M1_DDR2_SDA,
	M1_DDR2_we_n

`else
	//////// DDR2 SODIMM //////////

	M2_DDR2_addr,
	M2_DDR2_ba,
	M2_DDR2_cas_n,
	M2_DDR2_cke,
	M2_DDR2_clk,
	M2_DDR2_clk_n,
	M2_DDR2_cs_n,
	M2_DDR2_dm,
	M2_DDR2_dq,
	M2_DDR2_dqs,
	M2_DDR2_dqsn,
	M2_DDR2_odt,
	M2_DDR2_ras_n,
	M2_DDR2_SA,
	M2_DDR2_SCL,
	M2_DDR2_SDA,
	M2_DDR2_we_n 
`endif	//USE_DDR2_DIMM2
);

//=======================================================
//  PARAMETER declarations
//=======================================================


//=======================================================
//  PORT declarations
//=======================================================

//////////// CLOCK //////////
input		          		GCLKIN;
output		          		GCLKOUT_FPGA;
inout		     [2:0]		MAX_CONF_D;
output		     [2:0]		MAX_PLL_D;
input		          		OSC_50_Bank2;
input		          		OSC_50_Bank3;
input		          		OSC_50_Bank4;
input		          		OSC_50_Bank5;
input		          		OSC_50_Bank6;
input		          		OSC_50_Bank7;
input		          		PLL_CLKIN_p;

//////////// RS232 //////////
input		          		UART_RXD;
output		          		UART_TXD;

//////////// LED x 8 //////////
output		     [7:0]		LED;

//////////// BUTTON x 4 //////////
input		     [3:0]		BUTTON;
input		          		CPU_RESET_n;
inout		          		EXT_IO;

`ifndef USE_DDR2_DIMM2
//////////// DDR2 SODIMM //////////
output		    [15:0]		M1_DDR2_addr;
output		     [2:0]		M1_DDR2_ba;
output		          		M1_DDR2_cas_n;
output		     [1:0]		M1_DDR2_cke;
inout		     [1:0]		M1_DDR2_clk;
inout		     [1:0]		M1_DDR2_clk_n;
output		     [1:0]		M1_DDR2_cs_n;
output		     [7:0]		M1_DDR2_dm;
inout		    [63:0]		M1_DDR2_dq;
inout		     [7:0]		M1_DDR2_dqs;
inout		     [7:0]		M1_DDR2_dqsn;
output		     [1:0]		M1_DDR2_odt;
output		          		M1_DDR2_ras_n;
output		     [1:0]		M1_DDR2_SA;
output		          		M1_DDR2_SCL;
inout		          		M1_DDR2_SDA;
output		          		M1_DDR2_we_n;

`else
//////////// DDR2 SODIMM //////////
output		    [15:0]		M2_DDR2_addr;
output		     [2:0]		M2_DDR2_ba;
output		          		M2_DDR2_cas_n;
output		     [1:0]		M2_DDR2_cke;
inout		     [1:0]		M2_DDR2_clk;
inout		     [1:0]		M2_DDR2_clk_n;
output		     [1:0]		M2_DDR2_cs_n;
output		     [7:0]		M2_DDR2_dm;
inout		    [63:0]		M2_DDR2_dq;
inout		     [7:0]		M2_DDR2_dqs;
inout		     [7:0]		M2_DDR2_dqsn;
output		     [1:0]		M2_DDR2_odt;
output		          		M2_DDR2_ras_n;
output		     [1:0]		M2_DDR2_SA;
output		          		M2_DDR2_SCL;
inout		          		M2_DDR2_SDA;
output		          		M2_DDR2_we_n;

`endif //`ifndef USE_DDR2_DIMM2

//=======================================================
//  REG/WIRE declarations
//=======================================================




//=======================================================
//  Structural coding
//=======================================================

wire reset_n;
assign reset_n = CPU_RESET_n;


	tiger tiger_sopc 
	(
       // 1) global signals:
      .clk											(OSC_50_Bank3),
      .ddr2_aux_full_rate_clk_out					(),
      .ddr2_aux_half_rate_clk_out					(),
      .ddr2_phy_clk_out								(),
      .reset_n										(reset_n),

       // the_ddr2
      .aux_scan_clk_from_the_ddr2					(),
      .aux_scan_clk_reset_n_from_the_ddr2			(),
      .dll_reference_clk_from_the_ddr2				(),
      .dqs_delay_ctrl_export_from_the_ddr2			(),
      .global_reset_n_to_the_ddr2					(),
      .local_init_done_from_the_ddr2				(),
      .local_refresh_ack_from_the_ddr2				(),
      .local_wdata_req_from_the_ddr2				(),

      .mem_addr_from_the_ddr2						(M1_DDR2_addr),
      .mem_ba_from_the_ddr2							(M1_DDR2_ba),
      .mem_cas_n_from_the_ddr2						(M1_DDR2_cas_n),
      .mem_cke_from_the_ddr2						(M1_DDR2_cke),
      .mem_clk_n_to_and_from_the_ddr2				(M1_DDR2_clk_n),
      .mem_clk_to_and_from_the_ddr2					(M1_DDR2_clk),
      .mem_cs_n_from_the_ddr2						(M1_DDR2_cs_n),
      .mem_dm_from_the_ddr2							(M1_DDR2_dm),
      .mem_dq_to_and_from_the_ddr2					(M1_DDR2_dq),
      .mem_dqs_to_and_from_the_ddr2					(M1_DDR2_dqs),
      .mem_dqsn_to_and_from_the_ddr2				(M1_DDR2_dqsn),
      .mem_odt_from_the_ddr2						(M1_DDR2_odt),
      .mem_ras_n_from_the_ddr2						(M1_DDR2_ras_n),
      .mem_we_n_from_the_ddr2						(M1_DDR2_we_n),
      .oct_ctl_rs_value_to_the_ddr2					(),
      .oct_ctl_rt_value_to_the_ddr2					(),
      .reset_phy_clk_n_from_the_ddr2				(),

       // the_uart_0
      .rxd_to_the_uart_0							(UART_RXD),
      .txd_from_the_uart_0							(UART_TXD)
    );


endmodule


/*
module tiger_wrapper (
	input  CLOCK_50,
	output [11:0] DRAM_ADDR,
	output DRAM_BA_0,
	output DRAM_BA_1,
	output DRAM_LDQM,
	output DRAM_UDQM,
	output DRAM_RAS_N,
	output DRAM_CAS_N,
	output DRAM_CKE,
	output DRAM_WE_N,
	output DRAM_CS_N,
	output DRAM_CLK,
	inout  [15:0] DRAM_DQ,

	input  UART_RXD,
	output UART_TXD,

	input  [0:0] KEY,
	output [1:0] LEDG,
	
	input   [2:0] SW,
	output [17:0] LEDR
);
	wire CLOCK_50i;
	
	// 50 MHz pll giving out -3ns phase shift for SDRAM clock
	pll50MHz pll50(.inclk0(CLOCK_50), .c0(CLOCK_50i), .c1(DRAM_CLK));

	tiger tiger_sopc (
		// general
		.clk(CLOCK_50i),
		.reset_n(KEY[0]),
		
		// SDRAM
		.zs_addr_from_the_sdram(DRAM_ADDR),
		.zs_ba_from_the_sdram({DRAM_BA_1, DRAM_BA_0}),
		.zs_cas_n_from_the_sdram(DRAM_CAS_N),
		.zs_cke_from_the_sdram(DRAM_CKE),
		.zs_cs_n_from_the_sdram(DRAM_CS_N),
		.zs_dq_to_and_from_the_sdram(DRAM_DQ),
		.zs_dqm_from_the_sdram({DRAM_UDQM, DRAM_LDQM}),
		.zs_ras_n_from_the_sdram(DRAM_RAS_N),
		.zs_we_n_from_the_sdram(DRAM_WE_N),
		
		// UART
		.rxd_to_the_uart_0(UART_RXD),
		.txd_from_the_uart_0(UART_TXD),
		  
		// Program Execution Status Lights
        .coe_exe_end_from_the_tiger_top_0      (LEDG[0]),
        .coe_exe_start_from_the_tiger_top_0    (LEDG[1]),

		// Lights for Debug purpose
        .coe_debug_lights_from_the_tiger_top_0 (LEDR[17:0]),
        .coe_debug_select_to_the_tiger_top_0   (SW[2:0])
	);
	
endmodule 	
*/