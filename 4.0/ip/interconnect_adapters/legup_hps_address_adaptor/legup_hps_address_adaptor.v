
module legup_hps_address_adaptor #(
parameter UPPER_BITS = 0
)
(
clk,
reset,

// Accelerator to Memory Bridge
avs_from_bridge_readdata,
avs_from_bridge_waitrequest,
avs_from_bridge_address,
avs_from_bridge_byteenable,
avs_from_bridge_read,
avs_from_bridge_write,
avs_from_bridge_writedata,

avm_to_memory_readdata,
avm_to_memory_waitrequest,
avm_to_memory_address,
avm_to_memory_byteenable,
avm_to_memory_read,
avm_to_memory_write,
avm_to_memory_writedata
);


///////////////////////////////////////////////////////////////////////////////
///////////////////////// Local parameter definitions /////////////////////////
///////////////////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////////////////
////////////////////////////// Port declarations //////////////////////////////
///////////////////////////////////////////////////////////////////////////////
input               clk;
input               reset; 

// Accelerator to Memory Bridge
output      [63: 0] avs_from_bridge_readdata;
output              avs_from_bridge_waitrequest;
input       [31: 0] avs_from_bridge_address;
input       [ 7: 0] avs_from_bridge_byteenable;
input               avs_from_bridge_read;
input               avs_from_bridge_write;
input       [63: 0] avs_from_bridge_writedata;

input       [63: 0] avm_to_memory_readdata;
input               avm_to_memory_waitrequest;
output      [31: 0] avm_to_memory_address;
output      [ 7: 0] avm_to_memory_byteenable;
output              avm_to_memory_read;
output              avm_to_memory_write;
output      [63: 0] avm_to_memory_writedata;


///////////////////////////////////////////////////////////////////////////////
////////////////////////// Local signals definitions //////////////////////////
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
///////////////////////////// Output assignments //////////////////////////////
///////////////////////////////////////////////////////////////////////////////
assign avm_to_memory_address            = {UPPER_BITS[1:0], avs_from_bridge_address[29:0]};
//assign avm_to_memory_address            = {2'h0, avs_from_bridge_address[29:0]};
assign avm_to_memory_byteenable         = avs_from_bridge_byteenable;
assign avm_to_memory_read               = avs_from_bridge_read;
assign avm_to_memory_write              = avs_from_bridge_write;
assign avm_to_memory_writedata          = avs_from_bridge_writedata;
assign avs_from_bridge_readdata         = avm_to_memory_readdata;
assign avs_from_bridge_waitrequest      = avm_to_memory_waitrequest;


///////////////////////////////////////////////////////////////////////////////
//////////////////////////// Internal assignments /////////////////////////////
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
//////////////////////////// Finite state machines ////////////////////////////
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////// Submodules //////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

endmodule

