// jtag_to_ava_master_bridge.v

// Generated using ACDS version 11.1 173 at 2012.06.18.12:26:11

`timescale 1 ps / 1 ps
module jtag_to_ava_master_bridge (
		input  wire        clk_clk,              //          clk.clk
		input  wire        clk_reset_reset,      //    clk_reset.reset
		output wire [31:0] master_address,       //       master.address
		input  wire [31:0] master_readdata,      //             .readdata
		output wire        master_read,          //             .read
		output wire        master_write,         //             .write
		output wire [31:0] master_writedata,     //             .writedata
		input  wire        master_waitrequest,   //             .waitrequest
		input  wire        master_readdatavalid, //             .readdatavalid
		output wire [3:0]  master_byteenable,    //             .byteenable
		output wire        master_reset_reset    // master_reset.reset
	);

	jtag_to_ava_master_bridge_jtag_to_ava_master_bridge #(
		.USE_PLI     (0),
		.PLI_PORT    (50000),
		.FIFO_DEPTHS (2)
	) jtag_to_ava_master_bridge_inst (
		.clk_clk              (clk_clk),              //          clk.clk
		.clk_reset_reset      (clk_reset_reset),      //    clk_reset.reset
		.master_address       (master_address),       //       master.address
		.master_readdata      (master_readdata),      //             .readdata
		.master_read          (master_read),          //             .read
		.master_write         (master_write),         //             .write
		.master_writedata     (master_writedata),     //             .writedata
		.master_waitrequest   (master_waitrequest),   //             .waitrequest
		.master_readdatavalid (master_readdatavalid), //             .readdatavalid
		.master_byteenable    (master_byteenable),    //             .byteenable
		.master_reset_reset   (master_reset_reset)    // master_reset.reset
	);
	
//+++++++++++++++++++++++++++++
// Force Slave Interface
//+++++++++++++++++++++++++++++

// synthesis translate off
	`include "./tiger_defines.v"
	parameter SIMULATE_WITHOUT_HOST_PC = 1'b1;

	parameter offset_tiger_leap_slave_handler = 32'h02000000;
	parameter N2 = 8;
	parameter ACTUAL_FUNC_NUM = 64;
	// Hash parameters
	parameter tab = 512'h000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a291e1a1309;
	parameter V1 = 32'h62d6701e;
	parameter A1 = 8'd10;
	parameter A2 = 8'd26;
	parameter B1 = 8'd13;
	parameter B2 = 8'h7;

	// test bench parameters - to be written to profiler's registers	
	parameter CNT_INC_OPTION = 32'b00010;
	parameter DO_HIER_OPTION = 32'b1;
	parameter STARTING_PC    = `STARTINGPC;

	integer i, log;
	initial begin
		force master_read       = 1'b0;
		force master_write      = 1'b0;
		force master_address    = 32'b0;
		force master_writedata  = 32'b0;

		for (i=0;i<100;i=i+1) @ (posedge clk_clk);
		
		@ (posedge clk_clk) begin		// Reset Tiger
			$display ("************************\n*** Resetting Tiger at %x\n************************", $time);
			force master_address   = {2'b11, {(N2-2){1'b0}}, 2'b0} + offset_tiger_leap_slave_handler;
			force master_writedata = 32'h1;
			force master_write      = 1'b1;
		end
	`ifdef PROFILER_ON
		//++++++++++  initialize profiler  ++++++++++
		$display ("************************\n*** Forcing JTAG Master Behavior \n************************");
		@ (posedge clk_clk) begin		// write V1
			force master_address    = { {(N2){1'b0}}, 2'b0} + offset_tiger_leap_slave_handler;
			force master_writedata  = V1;
		end
		@ (posedge clk_clk) begin		// write A1,A2,B1,B2
			force master_address   = {{(N2-1){1'b0}}, 1'b1, 2'b0} + offset_tiger_leap_slave_handler;
			force master_writedata = {A1,A2,B1,B2};
		end
		for (i=-1 ; i< ACTUAL_FUNC_NUM/4; i=i+1) begin	// write tab
			@ (posedge clk_clk) begin
				force master_address   = {2'b01, {(N2-2){1'b0}}, 2'b0} + i*4 + offset_tiger_leap_slave_handler;
				force master_writedata = tab[32*(i+1)-1 -: 32];
			end
		end
		@ (posedge clk_clk) begin		// Setup Counter Increment Option
			force master_address   = {1'b1, {(N2-1){1'b0}}, 2'b0} + offset_tiger_leap_slave_handler;
			force master_writedata = CNT_INC_OPTION;
		end
		@ (posedge clk_clk) begin		// Setup Hierarchical Profiling Option
			force master_address   = {1'b1, {(N2-2){1'b0}}, 1'b1, 2'b0} + offset_tiger_leap_slave_handler;
			force master_writedata = DO_HIER_OPTION;
		end
		@ (posedge clk_clk) begin		// Tell profiler the starting pc
			force master_address   = {1'b1, {(N2-3){1'b0}}, 2'b10, 2'b0} + offset_tiger_leap_slave_handler;
			force master_writedata = STARTING_PC;
		end
	`endif
		@ (posedge clk_clk) begin		// Reset Tiger
			$display ("************************\n*** Releasing reset of Tiger at %x\n************************", $time);
			force master_address   = {2'b11, {(N2-2){1'b0}}, 2'b0} + offset_tiger_leap_slave_handler;
			force master_writedata = 32'h0;
		end
		@ (posedge clk_clk) force master_write = 1'b0;
	
	`ifdef PROFILER_ON
		//++++++++++  monitor execution status  ++++++++++
		@ (posedge clk_clk) begin
			force master_read = 1'b1;
			force master_address = offset_tiger_leap_slave_handler;
		end

		@ (posedge clk_clk); // readdata is valid at this clock cycle
		while ( master_readdata == 32'hffff_fffe)
			@ (posedge clk_clk)	force master_address = offset_tiger_leap_slave_handler;
		$display ("************************\n*** Profiling Started.\n************************");

		while ( master_readdata == 32'hffff_ffff)
			@ (posedge clk_clk)	force master_address = offset_tiger_leap_slave_handler;
		$display ("************************\n*** Profiling Finished.\n************************");

		//++++++++++  retrieve counter values  ++++++++++
		$display ("************************\n*** Retrieving Result.\n************************");
		log = $fopen ("profiling_result.log", "w");
		$fwrite (log, "############################\n####  Profiling Result  ####\n############################\n");

		@ (posedge clk_clk) begin
			if (master_readdatavalid)
				force master_read = 1'b0;
		end

		for (i=0;i<10;i=i+1) @ (posedge clk_clk);

		for (i=0 ; i< ACTUAL_FUNC_NUM; ) begin
			force master_read = 1'b1;
			force master_address = i*4 + offset_tiger_leap_slave_handler;
			@ (posedge clk_clk) begin
				if ( master_readdatavalid) begin
					$fwrite (log, "FuncNum-%2h  Data-%8d\n", i, master_readdata);
					i=i+1;
				end
			end
		end
		$fclose(log);

		@ (posedge clk_clk) force master_read = 1'b0;
		$stop();
	`endif
	end
// synthesis translate on

endmodule
