# +----------------------------------------------------------------------------+
# | License Agreement                                                          |
# |                                                                            |
# | Copyright (c) 1991-2013 Altera Corporation, San Jose, California, USA.     |
# | All rights reserved.                                                       |
# |                                                                            |
# | Any megafunction design, and related net list (encrypted or decrypted),    |
# |  support information, device programming or simulation file, and any other |
# |  associated documentation or information provided by Altera or a partner   |
# |  under Altera's Megafunction Partnership Program may be used only to       |
# |  program PLD devices (but not masked PLD devices) from Altera.  Any other  |
# |  use of such megafunction design, net list, support information, device    |
# |  programming or simulation file, or any other related documentation or     |
# |  information is prohibited for any other purpose, including, but not       |
# |  limited to modification, reverse engineering, de-compiling, or use with   |
# |  any other silicon devices, unless such use is explicitly licensed under   |
# |  a separate agreement with Altera or a megafunction partner.  Title to     |
# |  the intellectual property, including patents, copyrights, trademarks,     |
# |  trade secrets, or maskworks, embodied in any such megafunction design,    |
# |  net list, support information, device programming or simulation file, or  |
# |  any other related documentation or information provided by Altera or a    |
# |  megafunction partner, remains with Altera, the megafunction partner, or   |
# |  their respective licensors.  No other licenses, including any licenses    |
# |  needed under any third party's intellectual property, are provided herein.|
# |  Copying or modifying any file, or portion thereof, to which this notice   |
# |  is attached violates this copyright.                                      |
# |                                                                            |
# | THIS FILE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR    |
# | IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,   |
# | FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL    |
# | THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER |
# | LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING    |
# | FROM, OUT OF OR IN CONNECTION WITH THIS FILE OR THE USE OR OTHER DEALINGS  |
# | IN THIS FILE.                                                              |
# |                                                                            |
# | This agreement shall be governed in all respects by the laws of the State  |
# |  of California and by the laws of the United States of America.            |
# |                                                                            |
# +----------------------------------------------------------------------------+

# TCL File Generated by Altera University Program
# DO NOT MODIFY

# +-----------------------------------
# | module altera_up_avalon_video_dma_controller
# | 
set_module_property DESCRIPTION "DMA controller for video processing on DE-Series Boards"
set_module_property NAME altera_up_avalon_video_dma_controller
set_module_property VERSION 13.0
set_module_property GROUP "University Program/Audio & Video/Video"
set_module_property AUTHOR "Altera University Program"
set_module_property DISPLAY_NAME "DMA Controller"
set_module_property DATASHEET_URL "../doc/Video.pdf"
#set_module_property TOP_LEVEL_HDL_FILE altera_up_avalon_video_dma_controller.v
#set_module_property TOP_LEVEL_HDL_MODULE altera_up_avalon_video_dma_controller
set_module_property INSTANTIATE_IN_SYSTEM_MODULE true
set_module_property EDITABLE false
set_module_property ANALYZE_HDL false
set_module_property ELABORATION_CALLBACK elaborate
set_module_property GENERATION_CALLBACK generate
set_module_property HIDE_FROM_SOPC true
# | 
# +-----------------------------------

# +-----------------------------------
# | files
# | 
#add_file altera_up_avalon_video_dma_controller.v {SYNTHESIS SIMULATION}
add_file "hdl/altera_up_video_dma_control_slave.v" {SYNTHESIS SIMULATION}
add_file "hdl/altera_up_video_dma_to_memory.v" {SYNTHESIS SIMULATION}
add_file "hdl/altera_up_video_dma_to_stream.v" {SYNTHESIS SIMULATION}
# | 
# +-----------------------------------

# +-----------------------------------
# | parameters
# | 
add_parameter mode string "From Stream to Memory" 
set_parameter_property mode DISPLAY_NAME "DMA Direction"
set_parameter_property mode GROUP "Mode"
set_parameter_property mode UNITS None
set_parameter_property mode AFFECTS_ELABORATION true
set_parameter_property mode AFFECTS_GENERATION true
set_parameter_property mode ALLOWED_RANGES {"From Stream to Memory" "From Memory to Stream"}
set_parameter_property mode VISIBLE true
set_parameter_property mode ENABLED true

#add_parameter interlacing string "None" 
#set_parameter_property interlacing DISPLAY_NAME "De-interlacing Mode"
#set_parameter_property interlacing UNITS None
#set_parameter_property interlacing AFFECTS_ELABORATION true
#set_parameter_property interlacing AFFECTS_GENERATION true
#set_parameter_property interlacing ALLOWED_RANGES {"None" "Frame Interleaved"}
#set_parameter_property interlacing VISIBLE false
#set_parameter_property interlacing ENABLED true

add_parameter addr_mode string "Consecutive" 
set_parameter_property addr_mode DISPLAY_NAME "Addressing Mode"
set_parameter_property addr_mode GROUP "Addressing Parameters"
set_parameter_property addr_mode UNITS None
set_parameter_property addr_mode AFFECTS_ELABORATION true
set_parameter_property addr_mode AFFECTS_GENERATION true
set_parameter_property addr_mode ALLOWED_RANGES {"Consecutive" "X-Y"}
set_parameter_property addr_mode VISIBLE true
set_parameter_property addr_mode ENABLED true

add_parameter start_address integer 0 
set_parameter_property start_address DISPLAY_NAME "Default Buffer Starting Address"
set_parameter_property start_address DISPLAY_HINT hexadecimal
set_parameter_property start_address GROUP "Addressing Parameters"
set_parameter_property start_address UNITS None
set_parameter_property start_address AFFECTS_ELABORATION true
set_parameter_property start_address AFFECTS_GENERATION true
set_parameter_property start_address VISIBLE true
set_parameter_property start_address ENABLED true

add_parameter back_start_address integer 0 
set_parameter_property back_start_address DISPLAY_NAME "Default Back Buffer Start Address"
set_parameter_property back_start_address DISPLAY_HINT hexadecimal
set_parameter_property back_start_address GROUP "Addressing Parameters"
set_parameter_property back_start_address UNITS None
set_parameter_property back_start_address AFFECTS_ELABORATION true
set_parameter_property back_start_address AFFECTS_GENERATION true
set_parameter_property back_start_address VISIBLE true
set_parameter_property back_start_address ENABLED true

add_parameter width positive "320"
set_parameter_property width DISPLAY_NAME "Width (# of pixels)"
set_parameter_property width GROUP "Frame Resolution"
set_parameter_property width UNITS None
set_parameter_property width AFFECTS_ELABORATION true
set_parameter_property width AFFECTS_GENERATION true
set_parameter_property width VISIBLE true
set_parameter_property width ENABLED true

add_parameter height positive "240"
set_parameter_property height DISPLAY_NAME "Height (# of lines)"
set_parameter_property height GROUP "Frame Resolution"
set_parameter_property height UNITS None
set_parameter_property height AFFECTS_ELABORATION true
set_parameter_property height AFFECTS_GENERATION true
set_parameter_property height VISIBLE true
set_parameter_property height ENABLED true

add_parameter color_bits positive "8"
set_parameter_property color_bits DISPLAY_NAME "Color Bits"
set_parameter_property color_bits GROUP "Pixel Format"
set_parameter_property color_bits UNITS None
set_parameter_property color_bits AFFECTS_ELABORATION true
set_parameter_property color_bits AFFECTS_GENERATION true
set_parameter_property color_bits ALLOWED_RANGES {1:16}
set_parameter_property color_bits VISIBLE true
set_parameter_property color_bits ENABLED true

add_parameter color_planes positive "3"
set_parameter_property color_planes DISPLAY_NAME "Color Planes"
set_parameter_property color_planes GROUP "Pixel Format"
set_parameter_property color_planes UNITS None
set_parameter_property color_planes AFFECTS_ELABORATION true
set_parameter_property color_planes AFFECTS_GENERATION true
set_parameter_property color_planes ALLOWED_RANGES {1 2 3 4}
set_parameter_property color_planes VISIBLE true
set_parameter_property color_planes ENABLED true

add_parameter dma_enabled boolean true
set_parameter_property dma_enabled DISPLAY_NAME "Enabled DMA transfer on reset"
set_parameter_property dma_enabled GROUP "Control"
set_parameter_property dma_enabled UNITS None
set_parameter_property dma_enabled AFFECTS_ELABORATION true
set_parameter_property dma_enabled AFFECTS_GENERATION true
set_parameter_property dma_enabled VISIBLE true
set_parameter_property dma_enabled ENABLED true
# | 
# +-----------------------------------

# +-----------------------------------
# | connection point clock_reset
# | 
add_interface clock_reset clock end
set_interface_property clock_reset ptfSchematicName ""

add_interface_port clock_reset clk clk Input 1
add_interface_port clock_reset reset reset Input 1
# | 
# +-----------------------------------

# +-----------------------------------
# | Elaboration function
# | 
proc elaborate {} {
	set mode				[ get_parameter_value "mode"]
	set addr_mode			[ get_parameter_value "addr_mode"]
	set start_address		[ get_parameter_value "start_address"]
	set back_start_address	[ get_parameter_value "back_start_address"]
	set width				[ get_parameter_value "width" ]
	set height				[ get_parameter_value "height" ]
	set color_bits			[ get_parameter_value "color_bits" ]
	set color_planes		[ get_parameter_value "color_planes" ]

	set dw [ expr $color_bits * $color_planes ]
	if { ($color_planes == 4) || ($color_planes == 3) } {
		set ew 2
	} else {
		set ew 1
	}

	if { $dw <= 8 } {
		set mdw 8
	} elseif { $dw <= 16 } {
		set mdw 16
	} elseif { $dw <= 32 } {
		set mdw 32
	} else {
		set mdw 64
	}

	if { $mode == "From Stream to Memory" } {
		# +-----------------------------------
		# | connection point avalon_dma_sink
		# | 
		add_interface avalon_dma_sink avalon_streaming end clock_reset
		set_interface_property avalon_dma_sink dataBitsPerSymbol $color_bits
		set_interface_property avalon_dma_sink errorDescriptor ""
		set_interface_property avalon_dma_sink maxChannel 0
		set_interface_property avalon_dma_sink readyLatency 0
		set_interface_property avalon_dma_sink symbolsPerBeat $color_planes

		add_interface_port avalon_dma_sink stream_data data Input $dw
		add_interface_port avalon_dma_sink stream_startofpacket startofpacket Input 1
		add_interface_port avalon_dma_sink stream_endofpacket endofpacket Input 1
#		add_interface_port avalon_dma_sink stream_empty empty Input $ew
		add_interface_port avalon_dma_sink stream_valid valid Input 1
		add_interface_port avalon_dma_sink stream_ready ready Output 1
		# | 
		# +-----------------------------------
		
		# +-----------------------------------
		# | connection point avalon_dma_control_slave
		# | 
		add_interface avalon_dma_control_slave avalon end clock_reset
		set_interface_property avalon_dma_control_slave addressAlignment DYNAMIC
		set_interface_property avalon_dma_control_slave bridgesToMaster ""
		set_interface_property avalon_dma_control_slave burstOnBurstBoundariesOnly false
		#set_interface_property avalon_dma_control_slave explicitAddressSpan 16
		set_interface_property avalon_dma_control_slave holdTime 0
		set_interface_property avalon_dma_control_slave isBigEndian  false
		set_interface_property avalon_dma_control_slave isFlash false
		set_interface_property avalon_dma_control_slave isMemoryDevice false
		set_interface_property avalon_dma_control_slave isNonVolatileStorage false
		set_interface_property avalon_dma_control_slave linewrapBursts false
		set_interface_property avalon_dma_control_slave maximumPendingReadTransactions 0
		set_interface_property avalon_dma_control_slave minimumUninterruptedRunLength 1
		set_interface_property avalon_dma_control_slave printableDevice false
		set_interface_property avalon_dma_control_slave readLatency 1
		set_interface_property avalon_dma_control_slave readWaitTime 0
		set_interface_property avalon_dma_control_slave setupTime 0
		set_interface_property avalon_dma_control_slave timingUnits cycles
		set_interface_property avalon_dma_control_slave writeWaitTime 0

		add_interface_port avalon_dma_control_slave slave_address address Input 2
		add_interface_port avalon_dma_control_slave slave_byteenable byteenable Input 4
		add_interface_port avalon_dma_control_slave slave_read read Input 1
		add_interface_port avalon_dma_control_slave slave_write write Input 1
		add_interface_port avalon_dma_control_slave slave_writedata writedata Input 32
		add_interface_port avalon_dma_control_slave slave_readdata readdata Output 32
		# |
		# +-----------------------------------

		# +-----------------------------------
		# | connection point avalon_dma_master
		# | 
		add_interface avalon_dma_master avalon start clock_reset
		set_interface_property avalon_dma_master burstOnBurstBoundariesOnly false
		set_interface_property avalon_dma_master doStreamReads false
		set_interface_property avalon_dma_master doStreamWrites false
		set_interface_property avalon_dma_master linewrapBursts false

		add_interface_port avalon_dma_master master_address address Output 32
		add_interface_port avalon_dma_master master_waitrequest waitrequest Input 1
		add_interface_port avalon_dma_master master_write write Output 1
		add_interface_port avalon_dma_master master_writedata writedata Output $mdw
		# | 
		# +-----------------------------------
	} else {
		# +-----------------------------------
		# | connection point avalon_dma_master
		# | 
		add_interface avalon_dma_master avalon start clock_reset
		set_interface_property avalon_dma_master burstOnBurstBoundariesOnly false
		set_interface_property avalon_dma_master doStreamReads false
		set_interface_property avalon_dma_master doStreamWrites false
		set_interface_property avalon_dma_master linewrapBursts false

		add_interface_port avalon_dma_master master_address address Output 32
		add_interface_port avalon_dma_master master_waitrequest waitrequest Input 1
		add_interface_port avalon_dma_master master_arbiterlock lock Output 1
		add_interface_port avalon_dma_master master_read read Output 1
		add_interface_port avalon_dma_master master_readdata readdata Input $mdw
		add_interface_port avalon_dma_master master_readdatavalid readdatavalid Input 1
		# | 
		# +-----------------------------------

		# +-----------------------------------
		# | connection point avalon_dma_control_slave
		# | 
		add_interface avalon_dma_control_slave avalon end clock_reset
		set_interface_property avalon_dma_control_slave addressAlignment DYNAMIC
		set_interface_property avalon_dma_control_slave bridgesToMaster ""
		set_interface_property avalon_dma_control_slave burstOnBurstBoundariesOnly false
		#set_interface_property avalon_dma_control_slave explicitAddressSpan 16
		set_interface_property avalon_dma_control_slave holdTime 0
		set_interface_property avalon_dma_control_slave isBigEndian  false
		set_interface_property avalon_dma_control_slave isFlash false
		set_interface_property avalon_dma_control_slave isMemoryDevice false
		set_interface_property avalon_dma_control_slave isNonVolatileStorage false
		set_interface_property avalon_dma_control_slave linewrapBursts false
		set_interface_property avalon_dma_control_slave maximumPendingReadTransactions 0
		set_interface_property avalon_dma_control_slave minimumUninterruptedRunLength 1
		set_interface_property avalon_dma_control_slave printableDevice false
		set_interface_property avalon_dma_control_slave readLatency 1
		set_interface_property avalon_dma_control_slave readWaitTime 0
		set_interface_property avalon_dma_control_slave setupTime 0
		set_interface_property avalon_dma_control_slave timingUnits cycles
		set_interface_property avalon_dma_control_slave writeWaitTime 0

		add_interface_port avalon_dma_control_slave slave_address address Input 2
		add_interface_port avalon_dma_control_slave slave_byteenable byteenable Input 4
		add_interface_port avalon_dma_control_slave slave_read read Input 1
		add_interface_port avalon_dma_control_slave slave_write write Input 1
		add_interface_port avalon_dma_control_slave slave_writedata writedata Input 32
		add_interface_port avalon_dma_control_slave slave_readdata readdata Output 32
		# |
		# +-----------------------------------

		# +-----------------------------------
		# | connection point avalon_pixel_source
		# | 
		add_interface avalon_pixel_source avalon_streaming start clock_reset
		set_interface_property avalon_pixel_source dataBitsPerSymbol $color_bits
		set_interface_property avalon_pixel_source errorDescriptor ""
		set_interface_property avalon_pixel_source maxChannel 0
		set_interface_property avalon_pixel_source readyLatency 0
		set_interface_property avalon_pixel_source symbolsPerBeat $color_planes

		add_interface_port avalon_pixel_source stream_ready ready Input 1
		add_interface_port avalon_pixel_source stream_data data Output $dw
		add_interface_port avalon_pixel_source stream_startofpacket startofpacket Output 1
		add_interface_port avalon_pixel_source stream_endofpacket endofpacket Output 1
#		add_interface_port avalon_pixel_source stream_empty empty Output 2
		add_interface_port avalon_pixel_source stream_valid valid Output 1
		# | 
		# +-----------------------------------
	}
}
# | 
# +-----------------------------------

# +-----------------------------------
# | Generation function
# | 
proc generate {} {
	send_message info "Starting Generation of Video DMA Controller"
	
	# get parameter values
	set mode 				[ get_parameter_value "mode" ]
	set addr_mode			[ get_parameter_value "addr_mode" ]
	set start_address		[ get_parameter_value "start_address" ]
	set back_start_address	[ get_parameter_value "back_start_address" ]
	set width				[ get_parameter_value "width" ]
	set height				[ get_parameter_value "height" ]
	set color_bits			[ get_parameter_value "color_bits" ]
	set color_planes		[ get_parameter_value "color_planes" ]
	set dma_enabled		[ get_parameter_value "dma_enabled" ]
	
	set dw			[ format "DW:%d" [ expr (($color_bits * $color_planes) - 1) ] ]
	if { ($color_planes == 4) || ($color_planes == 3) } {
		set ew 		"EW:1"
	} else {
		set ew		"EW:0"
	}
	set width_p		"WIDTH:$width"
	set height_p	"HEIGHT:$height"

	set aw			[ format "AW:%.0f" [ expr ceil ((log ($width * $height) / (log (2))) - 1.0) ] ]
	set ww			[ format "WW:%.0f" [ expr ceil ((log ($width) / (log (2))) - 1.0) ] ]
	set hw			[ format "HW:%.0f" [ expr ceil ((log ($height) / (log (2))) - 1.0) ] ]

	if { ($color_bits * $color_planes) <= 8 } {
		set mdw		"MDW:7"
	} elseif { ($color_bits * $color_planes) <= 16 } {
		set mdw		"MDW:15"
	} elseif { ($color_bits * $color_planes) <= 32 } {
		set mdw		"MDW:31"
	} else {
		set mdw		"MDW:63"
	}

	set start_addr "DEFAULT_BUFFER_ADDRESS:32'd$start_address"
	set back_addr "DEFAULT_BACK_BUF_ADDRESS:32'd$back_start_address"

	if { $addr_mode == "Consecutive" } {
		set addressing_bits [ format "ADDRESSING_BITS:16'd%.0f" [ expr ceil (log ($width * $height) / (log (2))) ] ]
	} else {
		set addressing_bits [ format "ADDRESSING_BITS:16'd%.0f" [ expr (ceil (log ($height) / (log (2))) * 256) + ceil (log ($width) / (log (2))) ] ]
	}
	set color_bits_p 	[ format "COLOR_BITS:4'd%d" 	[ expr $color_bits - 1 ] ]
	set color_planes_p	[ format "COLOR_PLANES:2'd%d" 	[ expr $color_planes - 1 ] ]

	set dma_enabled_p	"DEFAULT_DMA_ENABLED:1'b0"
	if { $dma_enabled } {
		set dma_enabled_p	"DEFAULT_DMA_ENABLED:1'b1"
	}
	
	# set section values
	set use_to_memory "USE_TO_MEMORY:0"
	if { $mode == "From Stream to Memory" } {
		set use_to_memory "USE_TO_MEMORY:1"
	}

	set use_con_addr_mode "USE_CONSECUTIVE_ADDRESSING:0"
	if { $addr_mode == "Consecutive" } {
		set use_con_addr_mode "USE_CONSECUTIVE_ADDRESSING:1"
	}
	
	set use_8bit_master "USE_8BIT_MASTER:0"
	set use_16bit_master "USE_16BIT_MASTER:0"
	set use_32bit_master "USE_32BIT_MASTER:0"
	set use_64bit_master "USE_64BIT_MASTER:0"
	if { ($color_bits * $color_planes) <= 8 } {
		set use_8bit_master "USE_8BIT_MASTER:1"
	} elseif { ($color_bits * $color_planes) <= 16 } {
		set use_16bit_master "USE_16BIT_MASTER:1"
	} elseif { ($color_bits * $color_planes) <= 32 } {
		set use_32bit_master "USE_32BIT_MASTER:1"
	} else {
		set use_64bit_master "USE_64BIT_MASTER:1"
	}

	# set arguments
	set params "$dw;$ew;$width_p;$height_p;$aw;$ww;$hw;$mdw;$start_addr;$back_addr;$addressing_bits;$color_bits_p;$color_planes_p;$dma_enabled_p"
	set sections "$use_to_memory;$use_con_addr_mode;$use_8bit_master;$use_16bit_master;$use_32bit_master;$use_64bit_master"

	# get generation settings
	set dest_language	[ get_generation_property HDL_LANGUAGE ]
	set dest_dir 		[ get_generation_property OUTPUT_DIRECTORY ]
	set dest_name		[ get_generation_property OUTPUT_NAME ]
	
	set file_ending "v"
	if { $dest_language == "VHDL" || $dest_language == "vhdl" } {
		set file_ending "vhd"
	}

	add_file "$dest_dir$dest_name.$file_ending" {SYNTHESIS SIMULATION}
	# add_file "$dest_dir/altera_up_video_dma_control_slave.$file_ending" SYNTHESIS
	# add_file "$dest_dir/altera_up_video_dma_to_memory.$file_ending" SYNTHESIS
	# add_file "$dest_dir/altera_up_video_dma_to_stream.$file_ending" SYNTHESIS

	# Generate HDL
	source "up_ip_generator.tcl"
	alt_up_generate "$dest_dir$dest_name.$file_ending" "hdl/altera_up_avalon_video_dma_controller.$file_ending" "altera_up_avalon_video_dma_controller" $dest_name $params $sections
	# file copy -force "hdl/altera_up_video_dma_control_slave.$file_ending" $dest_dir
	# file copy -force "hdl/altera_up_video_dma_to_memory.$file_ending" $dest_dir
	# file copy -force "hdl/altera_up_video_dma_to_stream.$file_ending" $dest_dir
}
# | 
# +-----------------------------------

