//----------------------------------------------------------------------------//
// Generated by LegUp High-Level Synthesis Tool Version 4.0 (http://legup.org)
// Compiled: Mon Jun  4 15:32:40 2018
// University of Toronto
// For research and academic purposes only. Commercial use is prohibited.
// Please send bugs to: legup@eecg.toronto.edu
// Date: Fri Aug  3 15:40:02 2018
//----------------------------------------------------------------------------//

`define MEMORY_CONTROLLER_ADDR_SIZE 32
`define MEMORY_CONTROLLER_DATA_SIZE 64
// Number of RAM elements: 1
`define MEMORY_CONTROLLER_TAG_SIZE 9
// @array = internal unnamed_addr global [100 x i32] zeroinitializer, align 4
`define TAG_g_array `MEMORY_CONTROLLER_TAG_SIZE'd2
`define TAG_g_array_a {`TAG_g_array, 23'd0}

// Turn off warning 'ignoring unsupported system task'
// altera message_off 10175

`timescale 1 ns / 1 ns
module top
	(
		clk,
		reset,
		start,
		finish,
		waitrequest,
		return_val
	);
input clk;
input reset;
input start;
output wire finish;
input waitrequest;
output wire [31:0] return_val;
wire memory_controller_waitrequest;
wire memory_controller_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
wire memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
wire [1:0] memory_controller_size_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;

wire memory_controller_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
wire memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
wire [1:0] memory_controller_size_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;

/* synthesis translate_off */
assign memory_controller_waitrequest = waitrequest;
/* synthesis translate_on */

memory_controller memory_controller_inst (
	.clk( clk ),
	.memory_controller_enable_a( memory_controller_enable_a ),
	.memory_controller_enable_b( memory_controller_enable_b ),
	.memory_controller_address_a( memory_controller_address_a ),
	.memory_controller_address_b( memory_controller_address_b ),
	.memory_controller_write_enable_a( memory_controller_write_enable_a ),
	.memory_controller_write_enable_b( memory_controller_write_enable_b ),
	.memory_controller_in_a( memory_controller_in_a ),
	.memory_controller_in_b( memory_controller_in_b ),
	.memory_controller_size_a( memory_controller_size_a ),
	.memory_controller_size_b( memory_controller_size_b ),
	.memory_controller_waitrequest( memory_controller_waitrequest ),
	.memory_controller_out_reg_a( memory_controller_out_a ),
	.memory_controller_out_reg_b( memory_controller_out_b )
);

main main_inst(
	.clk( clk ),
	.clk2x( clk2x ),
	.clk1x_follower( clk1x_follower ),
	.reset( reset ),
	.start( start ),
	.finish( finish ),
	.return_val( return_val ),
	.memory_controller_waitrequest(memory_controller_waitrequest),
	.memory_controller_enable_a(memory_controller_enable_a),
	.memory_controller_address_a(memory_controller_address_a),
	.memory_controller_write_enable_a(memory_controller_write_enable_a),
	.memory_controller_in_a(memory_controller_in_a),
	.memory_controller_size_a(memory_controller_size_a),
	.memory_controller_out_a(memory_controller_out_a),
	.memory_controller_enable_b(memory_controller_enable_b),
	.memory_controller_address_b(memory_controller_address_b),
	.memory_controller_write_enable_b(memory_controller_write_enable_b),
	.memory_controller_in_b(memory_controller_in_b),
	.memory_controller_size_b(memory_controller_size_b),
	.memory_controller_out_b(memory_controller_out_b)
);

endmodule

`timescale 1 ns / 1 ns
module memory_controller
(
	clk,
	memory_controller_address_a,
	memory_controller_address_b,
	memory_controller_enable_a,
	memory_controller_enable_b,
	memory_controller_write_enable_a,
	memory_controller_write_enable_b,
	memory_controller_in_a,
	memory_controller_in_b,
	memory_controller_size_a,
	memory_controller_size_b,
	memory_controller_waitrequest,
	memory_controller_out_reg_a,
	memory_controller_out_reg_b
);

parameter latency = 2;

parameter ram_latency = latency-1;

integer j;

input clk;
input memory_controller_waitrequest;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
input memory_controller_enable_a;
input memory_controller_write_enable_a;
input [64-1:0] memory_controller_in_a;
input [1:0] memory_controller_size_a;
output reg [64-1:0] memory_controller_out_reg_a;
reg [64-1:0] memory_controller_out_prev_a;
reg [64-1:0] memory_controller_out_a;

reg memory_controller_enable_reg_a;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
input memory_controller_enable_b;
input memory_controller_write_enable_b;
input [64-1:0] memory_controller_in_b;
input [1:0] memory_controller_size_b;
output reg [64-1:0] memory_controller_out_reg_b;
reg [64-1:0] memory_controller_out_prev_b;
reg [64-1:0] memory_controller_out_b;

reg memory_controller_enable_reg_b;

reg [6:0] array_address_a;
reg [6:0] array_address_b;
reg array_write_enable_a;
reg array_write_enable_b;
reg [31:0] array_in_a;
reg [31:0] array_in_b;
wire [31:0] array_out_a;
wire [31:0] array_out_b;

// @array = internal unnamed_addr global [100 x i32] zeroinitializer, align 4
ram_dual_port array (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( array_address_a ),
	.address_b( array_address_b ),
	.wren_a( array_write_enable_a ),
	.wren_b( array_write_enable_b ),
	.data_a( array_in_a ),
	.data_b( array_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( array_out_a ),
	.q_b( array_out_b)
);
defparam array.width_a = 32;
defparam array.width_b = 32;
defparam array.widthad_a = 7;
defparam array.widthad_b = 7;
defparam array.width_be_a = 1;
defparam array.width_be_b = 1;
defparam array.numwords_a = 100;
defparam array.numwords_b = 100;
defparam array.latency = ram_latency;
defparam array.init_file = "array.mif";
wire [`MEMORY_CONTROLLER_TAG_SIZE-1:0] tag_a;
assign tag_a = memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:`MEMORY_CONTROLLER_ADDR_SIZE-`MEMORY_CONTROLLER_TAG_SIZE];
reg [2:0] prevAddr_a;
reg [1:0] prevSize_a;
reg [2:0] prevSize_a_and;

always @(posedge clk)
if (!memory_controller_waitrequest)
begin
	prevAddr_a <= memory_controller_address_a[2:0];
	prevSize_a <= memory_controller_size_a;
end
wire [`MEMORY_CONTROLLER_TAG_SIZE-1:0] tag_b;
assign tag_b = memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:`MEMORY_CONTROLLER_ADDR_SIZE-`MEMORY_CONTROLLER_TAG_SIZE];
reg [2:0] prevAddr_b;
reg [1:0] prevSize_b;
reg [2:0] prevSize_b_and;

always @(posedge clk)
if (!memory_controller_waitrequest)
begin
	prevAddr_b <= memory_controller_address_b[2:0];
	prevSize_b <= memory_controller_size_b;
end

reg [2:0] select_not_struct_a;

wire select_array_a;
assign select_array_a = (tag_a == `TAG_g_array);
reg [ram_latency:0] select_array_reg_a;
wire [31:0] memory_controller_array_out_a;
assign memory_controller_array_out_a = {32{ select_array_reg_a[ram_latency]}} & array_out_a;

always @(*)
begin
	array_address_a = memory_controller_address_a [7-1+2:2] & {7{select_array_a}};
	array_write_enable_a = memory_controller_write_enable_a & select_array_a;
	array_in_a [32-1:0] = memory_controller_in_a[32-1:0];

end
always @(*)
begin
	select_not_struct_a [2:0] = 3'b0 | {2{select_array_reg_a[ram_latency]}};
	if (prevAddr_a[2:0] & select_not_struct_a[2:0] != 0 && memory_controller_enable_a)
	begin
		$display("Error: memory address not aligned to ram word size!");
		$finish;
	end

	prevSize_a_and[0] = prevSize_a[1] | prevSize_a[0];
	prevSize_a_and[1] = prevSize_a[1];
	prevSize_a_and[2] = prevSize_a[1] & prevSize_a[0];
	if ((prevAddr_a & prevSize_a_and) != 0 && memory_controller_enable_a)
	begin
		$display("Error: memory address not aligned to ram word size!");
		$finish;
	end
	memory_controller_out_prev_a = memory_controller_out_reg_a & { 64{!memory_controller_enable_reg_a}};
	memory_controller_out_a = 1'b0 | memory_controller_out_prev_a | memory_controller_array_out_a;
end

always @(posedge clk)
if (!memory_controller_waitrequest)
begin
memory_controller_out_reg_a <= memory_controller_out_a;
memory_controller_enable_reg_a <= memory_controller_enable_a;
end

always @(posedge clk)
if (!memory_controller_waitrequest)
for (j = 0; j < ram_latency; j=j+1)
begin
select_array_reg_a[j+1] <= select_array_reg_a[j];
end
always @(*)
begin
select_array_reg_a[0] <= select_array_a;
end

reg [2:0] select_not_struct_b;

wire select_array_b;
assign select_array_b = (tag_b == `TAG_g_array);
reg [ram_latency:0] select_array_reg_b;
wire [31:0] memory_controller_array_out_b;
assign memory_controller_array_out_b = {32{ select_array_reg_b[ram_latency]}} & array_out_b;

always @(*)
begin
	array_address_b = memory_controller_address_b [7-1+2:2] & {7{select_array_b}};
	array_write_enable_b = memory_controller_write_enable_b & select_array_b;
	array_in_b [32-1:0] = memory_controller_in_b[32-1:0];

end
always @(*)
begin
	select_not_struct_b [2:0] = 3'b0 | {2{select_array_reg_b[ram_latency]}};
	if (prevAddr_b[2:0] & select_not_struct_b[2:0] != 0 && memory_controller_enable_b)
	begin
		$display("Error: memory address not aligned to ram word size!");
		$finish;
	end

	prevSize_b_and[0] = prevSize_b[1] | prevSize_b[0];
	prevSize_b_and[1] = prevSize_b[1];
	prevSize_b_and[2] = prevSize_b[1] & prevSize_b[0];
	if ((prevAddr_b & prevSize_b_and) != 0 && memory_controller_enable_b)
	begin
		$display("Error: memory address not aligned to ram word size!");
		$finish;
	end
	memory_controller_out_prev_b = memory_controller_out_reg_b & { 64{!memory_controller_enable_reg_b}};
	memory_controller_out_b = 1'b0 | memory_controller_out_prev_b | memory_controller_array_out_b;
end

always @(posedge clk)
if (!memory_controller_waitrequest)
begin
memory_controller_out_reg_b <= memory_controller_out_b;
memory_controller_enable_reg_b <= memory_controller_enable_b;
end

always @(posedge clk)
if (!memory_controller_waitrequest)
for (j = 0; j < ram_latency; j=j+1)
begin
select_array_reg_b[j+1] <= select_array_reg_b[j];
end
always @(*)
begin
select_array_reg_b[0] <= select_array_b;
end

endmodule 

`timescale 1 ns / 1 ns
module main
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	memory_controller_waitrequest,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b,
	return_val
);

parameter [4:0] LEGUP_0 = 5'd0;
parameter [4:0] LEGUP_F_main_BB_preheader2_1 = 5'd1;
parameter [4:0] LEGUP_F_main_BB_preheader2_2 = 5'd2;
parameter [4:0] LEGUP_F_main_BB_preheader2_3 = 5'd3;
parameter [4:0] LEGUP_F_main_BB_preheader2_4 = 5'd4;
parameter [4:0] LEGUP_F_main_BB_preheader2_5 = 5'd5;
parameter [4:0] LEGUP_F_main_BB_preheader2_6 = 5'd6;
parameter [4:0] LEGUP_F_main_BB_preheader2_7 = 5'd7;
parameter [4:0] LEGUP_F_main_BB_preheader2_8 = 5'd8;
parameter [4:0] LEGUP_loop_pipeline_wait_loop6_1_9 = 5'd9;
parameter [4:0] LEGUP_F_main_BB_lrphipreheader_10 = 5'd10;
parameter [4:0] LEGUP_F_main_BB_lrphipreheader_11 = 5'd11;
parameter [4:0] LEGUP_F_main_BB_lrphipreheader_12 = 5'd12;
parameter [4:0] LEGUP_F_main_BB_lrphipreheader_13 = 5'd13;
parameter [4:0] LEGUP_F_main_BB_lrphipreheader_14 = 5'd14;
parameter [4:0] LEGUP_F_main_BB_lrphipreheader_15 = 5'd15;
parameter [4:0] LEGUP_F_main_BB_lrphipreheader_16 = 5'd16;
parameter [4:0] LEGUP_F_main_BB_lrphipreheader_17 = 5'd17;
parameter [4:0] LEGUP_F_main_BB_lrphipreheader_18 = 5'd18;
parameter [4:0] LEGUP_F_main_BB_lrphipreheader_19 = 5'd19;
parameter [4:0] LEGUP_F_main_BB_lrphipreheader_20 = 5'd20;
parameter [4:0] LEGUP_F_main_BB_lrphipreheader_21 = 5'd21;
parameter [4:0] LEGUP_F_main_BB_lrphipreheader_22 = 5'd22;
parameter [4:0] LEGUP_F_main_BB__54_23 = 5'd23;
parameter [4:0] LEGUP_F_main_BB__54_24 = 5'd24;
parameter [4:0] LEGUP_F_main_BB__54_25 = 5'd25;
parameter [4:0] LEGUP_F_main_BB__54_26 = 5'd26;
parameter [4:0] LEGUP_F_main_BB__54_27 = 5'd27;
parameter [4:0] LEGUP_F_main_BB__54_28 = 5'd28;
parameter [4:0] LEGUP_F_main_BB__60_29 = 5'd29;
parameter [4:0] LEGUP_F_main_BB__62_30 = 5'd30;
parameter [4:0] LEGUP_F_main_BB__64_31 = 5'd31;
parameter [8:0] tag_offset = 9'd0;
parameter [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tag_addr_offset = {tag_offset, 23'd0};

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
input  memory_controller_waitrequest;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
output reg [31:0] return_val;
reg [4:0] cur_state;
reg [4:0] next_state;
reg [31:0] main_preheader2_1;
reg [31:0] main_preheader2_1_reg;
reg [31:0] main_preheader2_2;
reg [31:0] main_preheader2_2_reg;
reg [31:0] main_preheader2_3;
reg [31:0] main_preheader2_3_reg;
reg [31:0] main_preheader2_4;
reg [31:0] main_preheader2_4_reg;
reg [31:0] main_preheader2_5;
reg [31:0] main_preheader2_5_reg;
reg [31:0] main_preheader2_6;
reg [31:0] main_preheader2_6_reg;
reg [31:0] main_preheader2_7;
reg [31:0] main_preheader2_7_reg;
reg [31:0] main_preheader2_8;
reg [31:0] main_preheader2_8_reg;
reg [31:0] main_preheader2_9;
reg [31:0] main_preheader2_9_reg;
reg [31:0] main_preheader2_10;
reg [31:0] main_preheader2_10_reg;
reg [31:0] main_preheader2_11;
reg [31:0] main_preheader2_11_reg;
reg [31:0] main_preheader2_12;
reg [31:0] main_preheader2_12_reg;
reg [31:0] main_13_i010;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_13_scevgep6;
reg [31:0] main_13_14;
reg [31:0] main_13_15;
reg [31:0] main_13_16;
reg [31:0] main_lrphipreheader_17;
reg [31:0] main_lrphipreheader_17_reg;
reg [31:0] main_lrphipreheader_18;
reg [31:0] main_lrphipreheader_18_reg;
reg [31:0] main_lrphipreheader_19;
reg [31:0] main_lrphipreheader_20;
reg [31:0] main_lrphipreheader_20_reg;
reg [31:0] main_lrphipreheader_21;
reg [31:0] main_lrphipreheader_21_reg;
reg [31:0] main_lrphipreheader_22;
reg [31:0] main_lrphipreheader_22_reg;
reg [31:0] main_lrphipreheader_23;
reg [31:0] main_lrphipreheader_24;
reg [31:0] main_lrphipreheader_24_reg;
reg [31:0] main_lrphipreheader_25;
reg [31:0] main_lrphipreheader_25_reg;
reg [31:0] main_lrphipreheader_26;
reg [31:0] main_lrphipreheader_26_reg;
reg [31:0] main_lrphipreheader_27;
reg [31:0] main_lrphipreheader_27_reg;
reg [31:0] main_lrphipreheader_28;
reg [31:0] main_lrphipreheader_29;
reg [31:0] main_lrphipreheader_30;
reg [31:0] main_lrphipreheader_30_reg;
reg [31:0] main_lrphipreheader_31;
reg [31:0] main_lrphipreheader_31_reg;
reg [31:0] main_lrphipreheader_32;
reg [31:0] main_lrphipreheader_32_reg;
reg [31:0] main_lrphipreheader_33;
reg [31:0] main_lrphipreheader_33_reg;
reg [31:0] main_lrphipreheader_34;
reg [31:0] main_lrphipreheader_35;
reg [31:0] main_lrphipreheader_35_reg;
reg [31:0] main_lrphipreheader_36;
reg [31:0] main_lrphipreheader_36_reg;
reg [31:0] main_lrphipreheader_37;
reg [31:0] main_lrphipreheader_37_reg;
reg [31:0] main_lrphipreheader_38;
reg [31:0] main_lrphipreheader_38_reg;
reg [31:0] main_lrphipreheader_39;
reg [31:0] main_lrphipreheader_39_reg;
reg [31:0] main_lrphipreheader_40;
reg [31:0] main_lrphipreheader_40_reg;
reg [31:0] main_lrphipreheader_41;
reg [31:0] main_lrphipreheader_41_reg;
reg [31:0] main_lrphipreheader_42;
reg [31:0] main_lrphipreheader_43;
reg [31:0] main_lrphipreheader_43_reg;
reg [31:0] main_lrphipreheader_44;
reg [31:0] main_lrphipreheader_44_reg;
reg [31:0] main_lrphipreheader_45;
reg [31:0] main_lrphipreheader_45_reg;
reg [31:0] main_lrphipreheader_46;
reg [31:0] main_lrphipreheader_46_reg;
reg [31:0] main_lrphipreheader_47;
reg [31:0] main_lrphipreheader_47_reg;
reg [31:0] main_lrphipreheader_48;
reg [31:0] main_lrphipreheader_48_reg;
reg [31:0] main_lrphipreheader_49;
reg [31:0] main_lrphipreheader_49_reg;
reg [31:0] main_lrphipreheader_50;
reg [31:0] main_lrphipreheader_51;
reg [31:0] main_lrphipreheader_51_reg;
reg  main_lrphipreheader_53;
reg [31:0] main_54_indvar;
reg [31:0] main_54_indvar_reg;
reg [31:0] main_54_55;
reg [31:0] main_54_55_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_54_scevgep;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_54_scevgep_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_54_scevgep2;
reg [31:0] main_54_56;
reg [31:0] main_54_56_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_54_scevgep3;
reg [31:0] main_54_57;
reg [31:0] main_54_58;
reg [31:0] main_54_58_reg;
reg [31:0] main_54_59;
reg [31:0] main_54_indvarnext;
reg [31:0] main_54_indvarnext_reg;
reg  main_54_exitcond1;
reg  main_54_exitcond1_reg;
reg  loop6_1_pipeline_start;
reg  loop6_1_started;
reg  loop6_1_ii_state;
reg [31:0] loop6_1_i_stage0;
reg  loop6_1_epilogue;
reg  loop6_1_valid_bit_0;
reg  loop6_1_valid_bit_1;
reg  loop6_1_valid_bit_2;
reg  loop6_1_valid_bit_3;
reg  loop6_1_valid_bit_4;
reg [31:0] main_13_i010_reg_stage0;
reg [31:0] main_13_i010_reg_stage1;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_13_scevgep6_reg_stage0;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_13_scevgep6_reg_stage1;
reg [31:0] main_13_14_reg_stage1;
reg  loop6_1_pipeline_exit_cond;
reg  loop6_1_pipeline_finish;
reg  lpm_mult_main_13_15_en;
reg [31:0] main_13_15_stage0_reg;
reg  lpm_mult_main_54_59_en;
reg [31:0] main_54_59_stage0_reg;


/* Unsynthesizable Statements */
always @(posedge clk)
	if (!memory_controller_waitrequest) begin
	/* main: %.lr.ph.i.preheader*/
	/*   %52 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([12 x i8]* @.str6, i32 0, i32 0), i32 %51) #2*/
	if ((cur_state == LEGUP_F_main_BB_lrphipreheader_22)) begin
		$write("Result: %d\n", $signed(main_lrphipreheader_51));
		// to fix quartus warning
		if (reset == 1'b0 && ^(main_lrphipreheader_51) === 1'bX) finish <= 0;
	end
	/* main: %60*/
	/*   %61 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([14 x i8]* @.str7, i32 0, i32 0)) #2*/
	if ((cur_state == LEGUP_F_main_BB__60_29)) begin
		$write("RESULT: PASS\n");
	end
	/* main: %62*/
	/*   %63 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([14 x i8]* @.str8, i32 0, i32 0)) #2*/
	if ((cur_state == LEGUP_F_main_BB__62_30)) begin
		$write("RESULT: FAIL\n");
	end
end
always @(posedge clk) begin
if (reset == 1'b1)
	cur_state <= LEGUP_0;
else if (memory_controller_waitrequest == 1'd1)
	cur_state <= cur_state;
else
	cur_state <= next_state;
end

always @(*)
begin
next_state = cur_state;
case(cur_state)  // synthesis parallel_case  
LEGUP_0:
	if ((start == 1'd1))
		next_state = LEGUP_loop_pipeline_wait_loop6_1_9;
LEGUP_F_main_BB__54_23:
		next_state = LEGUP_F_main_BB__54_24;
LEGUP_F_main_BB__54_24:
		next_state = LEGUP_F_main_BB__54_25;
LEGUP_F_main_BB__54_25:
		next_state = LEGUP_F_main_BB__54_26;
LEGUP_F_main_BB__54_26:
		next_state = LEGUP_F_main_BB__54_27;
LEGUP_F_main_BB__54_27:
		next_state = LEGUP_F_main_BB__54_28;
LEGUP_F_main_BB__54_28:
	if ((main_54_exitcond1_reg == 1'd1))
		next_state = LEGUP_F_main_BB_lrphipreheader_10;
	else if ((main_54_exitcond1_reg == 1'd0))
		next_state = LEGUP_F_main_BB__54_23;
LEGUP_F_main_BB__60_29:
		next_state = LEGUP_F_main_BB__64_31;
LEGUP_F_main_BB__62_30:
		next_state = LEGUP_F_main_BB__64_31;
LEGUP_F_main_BB__64_31:
		next_state = LEGUP_0;
LEGUP_F_main_BB_lrphipreheader_10:
		next_state = LEGUP_F_main_BB_lrphipreheader_11;
LEGUP_F_main_BB_lrphipreheader_11:
		next_state = LEGUP_F_main_BB_lrphipreheader_12;
LEGUP_F_main_BB_lrphipreheader_12:
		next_state = LEGUP_F_main_BB_lrphipreheader_13;
LEGUP_F_main_BB_lrphipreheader_13:
		next_state = LEGUP_F_main_BB_lrphipreheader_14;
LEGUP_F_main_BB_lrphipreheader_14:
		next_state = LEGUP_F_main_BB_lrphipreheader_15;
LEGUP_F_main_BB_lrphipreheader_15:
		next_state = LEGUP_F_main_BB_lrphipreheader_16;
LEGUP_F_main_BB_lrphipreheader_16:
		next_state = LEGUP_F_main_BB_lrphipreheader_17;
LEGUP_F_main_BB_lrphipreheader_17:
		next_state = LEGUP_F_main_BB_lrphipreheader_18;
LEGUP_F_main_BB_lrphipreheader_18:
		next_state = LEGUP_F_main_BB_lrphipreheader_19;
LEGUP_F_main_BB_lrphipreheader_19:
		next_state = LEGUP_F_main_BB_lrphipreheader_20;
LEGUP_F_main_BB_lrphipreheader_20:
		next_state = LEGUP_F_main_BB_lrphipreheader_21;
LEGUP_F_main_BB_lrphipreheader_21:
		next_state = LEGUP_F_main_BB_lrphipreheader_22;
LEGUP_F_main_BB_lrphipreheader_22:
	if ((main_lrphipreheader_53 == 1'd1))
		next_state = LEGUP_F_main_BB__60_29;
	else if ((main_lrphipreheader_53 == 1'd0))
		next_state = LEGUP_F_main_BB__62_30;
LEGUP_F_main_BB_preheader2_1:
		next_state = LEGUP_F_main_BB_preheader2_2;
LEGUP_F_main_BB_preheader2_2:
		next_state = LEGUP_F_main_BB_preheader2_3;
LEGUP_F_main_BB_preheader2_3:
		next_state = LEGUP_F_main_BB_preheader2_4;
LEGUP_F_main_BB_preheader2_4:
		next_state = LEGUP_F_main_BB_preheader2_5;
LEGUP_F_main_BB_preheader2_5:
		next_state = LEGUP_F_main_BB_preheader2_6;
LEGUP_F_main_BB_preheader2_6:
		next_state = LEGUP_F_main_BB_preheader2_7;
LEGUP_F_main_BB_preheader2_7:
		next_state = LEGUP_F_main_BB_preheader2_8;
LEGUP_F_main_BB_preheader2_8:
		next_state = LEGUP_F_main_BB__54_23;
LEGUP_loop_pipeline_wait_loop6_1_9:
	if ((loop6_1_pipeline_finish == 1'd1))
		next_state = LEGUP_F_main_BB_preheader2_1;
	else if ((loop6_1_pipeline_finish == 1'd1))
		next_state = LEGUP_F_main_BB_preheader2_1;
default:
	next_state = cur_state;
endcase

end
always @(*) begin
	/* main: %.preheader2*/
	/*   %1 = load i32* getelementptr inbounds ([100 x i32]* @array, i32 0, i32 0), align 4, !tbaa !2*/
		main_preheader2_1 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %.preheader2*/
	/*   %1 = load i32* getelementptr inbounds ([100 x i32]* @array, i32 0, i32 0), align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_main_BB_preheader2_3)) begin
		main_preheader2_1_reg <= main_preheader2_1;
		if (start == 1'b0 && ^(main_preheader2_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader2_1_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader2*/
	/*   %2 = load i32* getelementptr inbounds ([100 x i32]* @array, i32 0, i32 1), align 4, !tbaa !2*/
		main_preheader2_2 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %.preheader2*/
	/*   %2 = load i32* getelementptr inbounds ([100 x i32]* @array, i32 0, i32 1), align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_main_BB_preheader2_3)) begin
		main_preheader2_2_reg <= main_preheader2_2;
		if (start == 1'b0 && ^(main_preheader2_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader2_2_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader2*/
	/*   %3 = load i32* getelementptr inbounds ([100 x i32]* @array, i32 0, i32 2), align 4, !tbaa !2*/
		main_preheader2_3 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %.preheader2*/
	/*   %3 = load i32* getelementptr inbounds ([100 x i32]* @array, i32 0, i32 2), align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_main_BB_preheader2_4)) begin
		main_preheader2_3_reg <= main_preheader2_3;
		if (start == 1'b0 && ^(main_preheader2_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader2_3_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader2*/
	/*   %4 = load i32* getelementptr inbounds ([100 x i32]* @array, i32 0, i32 2), align 4, !tbaa !2*/
		main_preheader2_4 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %.preheader2*/
	/*   %4 = load i32* getelementptr inbounds ([100 x i32]* @array, i32 0, i32 2), align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_main_BB_preheader2_4)) begin
		main_preheader2_4_reg <= main_preheader2_4;
		if (start == 1'b0 && ^(main_preheader2_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader2_4_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader2*/
	/*   %5 = load i32* getelementptr inbounds ([100 x i32]* @array, i32 0, i32 3), align 4, !tbaa !2*/
		main_preheader2_5 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %.preheader2*/
	/*   %5 = load i32* getelementptr inbounds ([100 x i32]* @array, i32 0, i32 3), align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_main_BB_preheader2_5)) begin
		main_preheader2_5_reg <= main_preheader2_5;
		if (start == 1'b0 && ^(main_preheader2_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader2_5_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader2*/
	/*   %6 = load i32* getelementptr inbounds ([100 x i32]* @array, i32 0, i32 4), align 4, !tbaa !2*/
		main_preheader2_6 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %.preheader2*/
	/*   %6 = load i32* getelementptr inbounds ([100 x i32]* @array, i32 0, i32 4), align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_main_BB_preheader2_5)) begin
		main_preheader2_6_reg <= main_preheader2_6;
		if (start == 1'b0 && ^(main_preheader2_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader2_6_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader2*/
	/*   %7 = load i32* getelementptr inbounds ([100 x i32]* @array, i32 0, i32 2), align 4, !tbaa !2*/
		main_preheader2_7 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %.preheader2*/
	/*   %7 = load i32* getelementptr inbounds ([100 x i32]* @array, i32 0, i32 2), align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_main_BB_preheader2_6)) begin
		main_preheader2_7_reg <= main_preheader2_7;
		if (start == 1'b0 && ^(main_preheader2_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader2_7_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader2*/
	/*   %8 = load i32* getelementptr inbounds ([100 x i32]* @array, i32 0, i32 3), align 4, !tbaa !2*/
		main_preheader2_8 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %.preheader2*/
	/*   %8 = load i32* getelementptr inbounds ([100 x i32]* @array, i32 0, i32 3), align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_main_BB_preheader2_6)) begin
		main_preheader2_8_reg <= main_preheader2_8;
		if (start == 1'b0 && ^(main_preheader2_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader2_8_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader2*/
	/*   %9 = load i32* getelementptr inbounds ([100 x i32]* @array, i32 0, i32 4), align 4, !tbaa !2*/
		main_preheader2_9 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %.preheader2*/
	/*   %9 = load i32* getelementptr inbounds ([100 x i32]* @array, i32 0, i32 4), align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_main_BB_preheader2_7)) begin
		main_preheader2_9_reg <= main_preheader2_9;
		if (start == 1'b0 && ^(main_preheader2_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader2_9_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader2*/
	/*   %10 = load i32* getelementptr inbounds ([100 x i32]* @array, i32 0, i32 4), align 4, !tbaa !2*/
		main_preheader2_10 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %.preheader2*/
	/*   %10 = load i32* getelementptr inbounds ([100 x i32]* @array, i32 0, i32 4), align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_main_BB_preheader2_7)) begin
		main_preheader2_10_reg <= main_preheader2_10;
		if (start == 1'b0 && ^(main_preheader2_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader2_10_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader2*/
	/*   %11 = load i32* getelementptr inbounds ([100 x i32]* @array, i32 0, i32 5), align 4, !tbaa !2*/
		main_preheader2_11 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %.preheader2*/
	/*   %11 = load i32* getelementptr inbounds ([100 x i32]* @array, i32 0, i32 5), align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_main_BB_preheader2_8)) begin
		main_preheader2_11_reg <= main_preheader2_11;
		if (start == 1'b0 && ^(main_preheader2_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader2_11_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader2*/
	/*   %12 = load i32* getelementptr inbounds ([100 x i32]* @array, i32 0, i32 6), align 4, !tbaa !2*/
		main_preheader2_12 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %.preheader2*/
	/*   %12 = load i32* getelementptr inbounds ([100 x i32]* @array, i32 0, i32 6), align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_main_BB_preheader2_8)) begin
		main_preheader2_12_reg <= main_preheader2_12;
		if (start == 1'b0 && ^(main_preheader2_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader2_12_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %13*/
	/*   %i.010 = add i32 %indvar4, 1, !legup.pipeline.start_time !7, !legup.pipeline.avail_time !7, !legup.pipeline.stage !7
	start_time: 0 avail_time: 0 stage: 0 II: 2 start_ii_state = 0 % 2 = 0 avail_ii_state = 0 % 2 = 0*/
		main_13_i010 = (loop6_1_i_stage0 + 32'd1);
end
always @(*) begin
	/* main: %13*/
	/*   %scevgep6 = getelementptr [100 x i32]* @array, i32 0, i32 %i.010, !legup.pipeline.start_time !7, !legup.pipeline.avail_time !7, !legup.pipeline.stage !7
	start_time: 0 avail_time: 0 stage: 0 II: 2 start_ii_state = 0 % 2 = 0 avail_ii_state = 0 % 2 = 0*/
		main_13_scevgep6 = (`TAG_g_array_a + (4 * main_13_i010));
end
always @(*) begin
	/* main: %13*/
	/*   %14 = add i32 %indvar4, 4, !legup.pipeline.start_time !6, !legup.pipeline.avail_time !6, !legup.pipeline.stage !7
	start_time: 1 avail_time: 1 stage: 0 II: 2 start_ii_state = 1 % 2 = 1 avail_ii_state = 1 % 2 = 1*/
		main_13_14 = (loop6_1_i_stage0 + 32'd4);
end
always @(*) begin
	main_13_15 = main_13_15_stage0_reg;
end
always @(*) begin
	/* main: %13*/
	/*   %16 = add nsw i32 %15, -19, !legup.pipeline.start_time !9, !legup.pipeline.avail_time !9, !legup.pipeline.stage !6
	start_time: 3 avail_time: 3 stage: 1 II: 2 start_ii_state = 3 % 2 = 1 avail_ii_state = 3 % 2 = 1*/
		main_13_16 = (main_13_15 + -32'd19);
end
always @(*) begin
	/* main: %.lr.ph.i.preheader*/
	/*   %17 = add nsw i32 %2, %1*/
		main_lrphipreheader_17 = (main_preheader2_2_reg + main_preheader2_1_reg);
end
always @(posedge clk) begin
	/* main: %.lr.ph.i.preheader*/
	/*   %17 = add nsw i32 %2, %1*/
	if ((cur_state == LEGUP_F_main_BB_lrphipreheader_10)) begin
		main_lrphipreheader_17_reg <= main_lrphipreheader_17;
		if (start == 1'b0 && ^(main_lrphipreheader_17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphipreheader_17_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i.preheader*/
	/*   %18 = add nsw i32 %3, %17*/
		main_lrphipreheader_18 = (main_preheader2_3_reg + main_lrphipreheader_17_reg);
end
always @(posedge clk) begin
	/* main: %.lr.ph.i.preheader*/
	/*   %18 = add nsw i32 %3, %17*/
	if ((cur_state == LEGUP_F_main_BB_lrphipreheader_11)) begin
		main_lrphipreheader_18_reg <= main_lrphipreheader_18;
		if (start == 1'b0 && ^(main_lrphipreheader_18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphipreheader_18_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i.preheader*/
	/*   %19 = add nsw i32 %4, %18*/
		main_lrphipreheader_19 = (main_preheader2_4_reg + main_lrphipreheader_18_reg);
end
always @(*) begin
	/* main: %.lr.ph.i.preheader*/
	/*   %20 = add nsw i32 %5, %19*/
		main_lrphipreheader_20 = (main_preheader2_5_reg + main_lrphipreheader_19);
end
always @(posedge clk) begin
	/* main: %.lr.ph.i.preheader*/
	/*   %20 = add nsw i32 %5, %19*/
	if ((cur_state == LEGUP_F_main_BB_lrphipreheader_13)) begin
		main_lrphipreheader_20_reg <= main_lrphipreheader_20;
		if (start == 1'b0 && ^(main_lrphipreheader_20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphipreheader_20_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i.preheader*/
	/*   %21 = add nsw i32 %6, %20*/
		main_lrphipreheader_21 = (main_preheader2_6_reg + main_lrphipreheader_20_reg);
end
always @(posedge clk) begin
	/* main: %.lr.ph.i.preheader*/
	/*   %21 = add nsw i32 %6, %20*/
	if ((cur_state == LEGUP_F_main_BB_lrphipreheader_14)) begin
		main_lrphipreheader_21_reg <= main_lrphipreheader_21;
		if (start == 1'b0 && ^(main_lrphipreheader_21) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphipreheader_21_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i.preheader*/
	/*   %22 = add nsw i32 %7, %21*/
		main_lrphipreheader_22 = (main_preheader2_7_reg + main_lrphipreheader_21_reg);
end
always @(posedge clk) begin
	/* main: %.lr.ph.i.preheader*/
	/*   %22 = add nsw i32 %7, %21*/
	if ((cur_state == LEGUP_F_main_BB_lrphipreheader_16)) begin
		main_lrphipreheader_22_reg <= main_lrphipreheader_22;
		if (start == 1'b0 && ^(main_lrphipreheader_22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphipreheader_22_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i.preheader*/
	/*   %23 = add nsw i32 %8, %22*/
		main_lrphipreheader_23 = (main_preheader2_8_reg + main_lrphipreheader_22_reg);
end
always @(*) begin
	/* main: %.lr.ph.i.preheader*/
	/*   %24 = add nsw i32 %9, %23*/
		main_lrphipreheader_24 = (main_preheader2_9_reg + main_lrphipreheader_23);
end
always @(posedge clk) begin
	/* main: %.lr.ph.i.preheader*/
	/*   %24 = add nsw i32 %9, %23*/
	if ((cur_state == LEGUP_F_main_BB_lrphipreheader_17)) begin
		main_lrphipreheader_24_reg <= main_lrphipreheader_24;
		if (start == 1'b0 && ^(main_lrphipreheader_24) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphipreheader_24_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i.preheader*/
	/*   %25 = add nsw i32 %10, %24*/
		main_lrphipreheader_25 = (main_preheader2_10_reg + main_lrphipreheader_24_reg);
end
always @(posedge clk) begin
	/* main: %.lr.ph.i.preheader*/
	/*   %25 = add nsw i32 %10, %24*/
	if ((cur_state == LEGUP_F_main_BB_lrphipreheader_18)) begin
		main_lrphipreheader_25_reg <= main_lrphipreheader_25;
		if (start == 1'b0 && ^(main_lrphipreheader_25) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphipreheader_25_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i.preheader*/
	/*   %26 = add nsw i32 %11, %25*/
		main_lrphipreheader_26 = (main_preheader2_11_reg + main_lrphipreheader_25_reg);
end
always @(posedge clk) begin
	/* main: %.lr.ph.i.preheader*/
	/*   %26 = add nsw i32 %11, %25*/
	if ((cur_state == LEGUP_F_main_BB_lrphipreheader_20)) begin
		main_lrphipreheader_26_reg <= main_lrphipreheader_26;
		if (start == 1'b0 && ^(main_lrphipreheader_26) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphipreheader_26_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i.preheader*/
	/*   %27 = add nsw i32 %12, %26*/
		main_lrphipreheader_27 = (main_preheader2_12_reg + main_lrphipreheader_26_reg);
end
always @(posedge clk) begin
	/* main: %.lr.ph.i.preheader*/
	/*   %27 = add nsw i32 %12, %26*/
	if ((cur_state == LEGUP_F_main_BB_lrphipreheader_21)) begin
		main_lrphipreheader_27_reg <= main_lrphipreheader_27;
		if (start == 1'b0 && ^(main_lrphipreheader_27) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphipreheader_27_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i.preheader*/
	/*   %28 = load i32* getelementptr inbounds ([100 x i32]* @array, i32 0, i32 0), align 4, !tbaa !2*/
		main_lrphipreheader_28 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* main: %.lr.ph.i.preheader*/
	/*   %29 = load i32* getelementptr inbounds ([100 x i32]* @array, i32 0, i32 1), align 4, !tbaa !2*/
		main_lrphipreheader_29 = memory_controller_out_b[31:0];
end
always @(*) begin
	/* main: %.lr.ph.i.preheader*/
	/*   %30 = add nsw i32 %29, %28*/
		main_lrphipreheader_30 = (main_lrphipreheader_29 + main_lrphipreheader_28);
end
always @(posedge clk) begin
	/* main: %.lr.ph.i.preheader*/
	/*   %30 = add nsw i32 %29, %28*/
	if ((cur_state == LEGUP_F_main_BB_lrphipreheader_12)) begin
		main_lrphipreheader_30_reg <= main_lrphipreheader_30;
		if (start == 1'b0 && ^(main_lrphipreheader_30) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphipreheader_30_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i.preheader*/
	/*   %31 = load i32* getelementptr inbounds ([100 x i32]* @array, i32 0, i32 2), align 4, !tbaa !2*/
		main_lrphipreheader_31 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %.lr.ph.i.preheader*/
	/*   %31 = load i32* getelementptr inbounds ([100 x i32]* @array, i32 0, i32 2), align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_main_BB_lrphipreheader_13)) begin
		main_lrphipreheader_31_reg <= main_lrphipreheader_31;
		if (start == 1'b0 && ^(main_lrphipreheader_31) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphipreheader_31_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i.preheader*/
	/*   %32 = add nsw i32 %31, %30*/
		main_lrphipreheader_32 = (main_lrphipreheader_31_reg + main_lrphipreheader_30_reg);
end
always @(posedge clk) begin
	/* main: %.lr.ph.i.preheader*/
	/*   %32 = add nsw i32 %31, %30*/
	if ((cur_state == LEGUP_F_main_BB_lrphipreheader_14)) begin
		main_lrphipreheader_32_reg <= main_lrphipreheader_32;
		if (start == 1'b0 && ^(main_lrphipreheader_32) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphipreheader_32_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i.preheader*/
	/*   %33 = load i32* getelementptr inbounds ([100 x i32]* @array, i32 0, i32 3), align 4, !tbaa !2*/
		main_lrphipreheader_33 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %.lr.ph.i.preheader*/
	/*   %33 = load i32* getelementptr inbounds ([100 x i32]* @array, i32 0, i32 3), align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_main_BB_lrphipreheader_13)) begin
		main_lrphipreheader_33_reg <= main_lrphipreheader_33;
		if (start == 1'b0 && ^(main_lrphipreheader_33) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphipreheader_33_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i.preheader*/
	/*   %34 = add nsw i32 %33, %32*/
		main_lrphipreheader_34 = (main_lrphipreheader_33_reg + main_lrphipreheader_32_reg);
end
always @(*) begin
	/* main: %.lr.ph.i.preheader*/
	/*   %35 = load i32* getelementptr inbounds ([100 x i32]* @array, i32 0, i32 4), align 4, !tbaa !2*/
		main_lrphipreheader_35 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %.lr.ph.i.preheader*/
	/*   %35 = load i32* getelementptr inbounds ([100 x i32]* @array, i32 0, i32 4), align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_main_BB_lrphipreheader_14)) begin
		main_lrphipreheader_35_reg <= main_lrphipreheader_35;
		if (start == 1'b0 && ^(main_lrphipreheader_35) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphipreheader_35_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i.preheader*/
	/*   %36 = add nsw i32 %35, %34*/
		main_lrphipreheader_36 = (main_lrphipreheader_35_reg + main_lrphipreheader_34);
end
always @(posedge clk) begin
	/* main: %.lr.ph.i.preheader*/
	/*   %36 = add nsw i32 %35, %34*/
	if ((cur_state == LEGUP_F_main_BB_lrphipreheader_15)) begin
		main_lrphipreheader_36_reg <= main_lrphipreheader_36;
		if (start == 1'b0 && ^(main_lrphipreheader_36) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphipreheader_36_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i.preheader*/
	/*   %37 = load i32* getelementptr inbounds ([100 x i32]* @array, i32 0, i32 5), align 4, !tbaa !2*/
		main_lrphipreheader_37 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %.lr.ph.i.preheader*/
	/*   %37 = load i32* getelementptr inbounds ([100 x i32]* @array, i32 0, i32 5), align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_main_BB_lrphipreheader_14)) begin
		main_lrphipreheader_37_reg <= main_lrphipreheader_37;
		if (start == 1'b0 && ^(main_lrphipreheader_37) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphipreheader_37_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i.preheader*/
	/*   %38 = add nsw i32 %37, %36*/
		main_lrphipreheader_38 = (main_lrphipreheader_37_reg + main_lrphipreheader_36_reg);
end
always @(posedge clk) begin
	/* main: %.lr.ph.i.preheader*/
	/*   %38 = add nsw i32 %37, %36*/
	if ((cur_state == LEGUP_F_main_BB_lrphipreheader_16)) begin
		main_lrphipreheader_38_reg <= main_lrphipreheader_38;
		if (start == 1'b0 && ^(main_lrphipreheader_38) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphipreheader_38_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i.preheader*/
	/*   %39 = load i32* getelementptr inbounds ([100 x i32]* @array, i32 0, i32 6), align 4, !tbaa !2*/
		main_lrphipreheader_39 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %.lr.ph.i.preheader*/
	/*   %39 = load i32* getelementptr inbounds ([100 x i32]* @array, i32 0, i32 6), align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_main_BB_lrphipreheader_15)) begin
		main_lrphipreheader_39_reg <= main_lrphipreheader_39;
		if (start == 1'b0 && ^(main_lrphipreheader_39) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphipreheader_39_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i.preheader*/
	/*   %40 = add nsw i32 %39, %38*/
		main_lrphipreheader_40 = (main_lrphipreheader_39_reg + main_lrphipreheader_38_reg);
end
always @(posedge clk) begin
	/* main: %.lr.ph.i.preheader*/
	/*   %40 = add nsw i32 %39, %38*/
	if ((cur_state == LEGUP_F_main_BB_lrphipreheader_18)) begin
		main_lrphipreheader_40_reg <= main_lrphipreheader_40;
		if (start == 1'b0 && ^(main_lrphipreheader_40) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphipreheader_40_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i.preheader*/
	/*   %41 = load i32* getelementptr inbounds ([100 x i32]* @array, i32 0, i32 7), align 4, !tbaa !2*/
		main_lrphipreheader_41 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %.lr.ph.i.preheader*/
	/*   %41 = load i32* getelementptr inbounds ([100 x i32]* @array, i32 0, i32 7), align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_main_BB_lrphipreheader_15)) begin
		main_lrphipreheader_41_reg <= main_lrphipreheader_41;
		if (start == 1'b0 && ^(main_lrphipreheader_41) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphipreheader_41_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i.preheader*/
	/*   %42 = add nsw i32 %41, %40*/
		main_lrphipreheader_42 = (main_lrphipreheader_41_reg + main_lrphipreheader_40_reg);
end
always @(*) begin
	/* main: %.lr.ph.i.preheader*/
	/*   %43 = load i32* getelementptr inbounds ([100 x i32]* @array, i32 0, i32 8), align 4, !tbaa !2*/
		main_lrphipreheader_43 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %.lr.ph.i.preheader*/
	/*   %43 = load i32* getelementptr inbounds ([100 x i32]* @array, i32 0, i32 8), align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_main_BB_lrphipreheader_16)) begin
		main_lrphipreheader_43_reg <= main_lrphipreheader_43;
		if (start == 1'b0 && ^(main_lrphipreheader_43) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphipreheader_43_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i.preheader*/
	/*   %44 = add nsw i32 %43, %42*/
		main_lrphipreheader_44 = (main_lrphipreheader_43_reg + main_lrphipreheader_42);
end
always @(posedge clk) begin
	/* main: %.lr.ph.i.preheader*/
	/*   %44 = add nsw i32 %43, %42*/
	if ((cur_state == LEGUP_F_main_BB_lrphipreheader_19)) begin
		main_lrphipreheader_44_reg <= main_lrphipreheader_44;
		if (start == 1'b0 && ^(main_lrphipreheader_44) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphipreheader_44_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i.preheader*/
	/*   %45 = load i32* getelementptr inbounds ([100 x i32]* @array, i32 0, i32 9), align 4, !tbaa !2*/
		main_lrphipreheader_45 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %.lr.ph.i.preheader*/
	/*   %45 = load i32* getelementptr inbounds ([100 x i32]* @array, i32 0, i32 9), align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_main_BB_lrphipreheader_16)) begin
		main_lrphipreheader_45_reg <= main_lrphipreheader_45;
		if (start == 1'b0 && ^(main_lrphipreheader_45) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphipreheader_45_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i.preheader*/
	/*   %46 = add nsw i32 %45, %44*/
		main_lrphipreheader_46 = (main_lrphipreheader_45_reg + main_lrphipreheader_44_reg);
end
always @(posedge clk) begin
	/* main: %.lr.ph.i.preheader*/
	/*   %46 = add nsw i32 %45, %44*/
	if ((cur_state == LEGUP_F_main_BB_lrphipreheader_20)) begin
		main_lrphipreheader_46_reg <= main_lrphipreheader_46;
		if (start == 1'b0 && ^(main_lrphipreheader_46) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphipreheader_46_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i.preheader*/
	/*   %47 = load i32* getelementptr inbounds ([100 x i32]* @array, i32 0, i32 10), align 4, !tbaa !2*/
		main_lrphipreheader_47 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %.lr.ph.i.preheader*/
	/*   %47 = load i32* getelementptr inbounds ([100 x i32]* @array, i32 0, i32 10), align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_main_BB_lrphipreheader_17)) begin
		main_lrphipreheader_47_reg <= main_lrphipreheader_47;
		if (start == 1'b0 && ^(main_lrphipreheader_47) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphipreheader_47_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i.preheader*/
	/*   %48 = add nsw i32 %47, %46*/
		main_lrphipreheader_48 = (main_lrphipreheader_47_reg + main_lrphipreheader_46_reg);
end
always @(posedge clk) begin
	/* main: %.lr.ph.i.preheader*/
	/*   %48 = add nsw i32 %47, %46*/
	if ((cur_state == LEGUP_F_main_BB_lrphipreheader_21)) begin
		main_lrphipreheader_48_reg <= main_lrphipreheader_48;
		if (start == 1'b0 && ^(main_lrphipreheader_48) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphipreheader_48_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i.preheader*/
	/*   %49 = load i32* getelementptr inbounds ([100 x i32]* @array, i32 0, i32 11), align 4, !tbaa !2*/
		main_lrphipreheader_49 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %.lr.ph.i.preheader*/
	/*   %49 = load i32* getelementptr inbounds ([100 x i32]* @array, i32 0, i32 11), align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_main_BB_lrphipreheader_17)) begin
		main_lrphipreheader_49_reg <= main_lrphipreheader_49;
		if (start == 1'b0 && ^(main_lrphipreheader_49) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphipreheader_49_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i.preheader*/
	/*   %50 = add nsw i32 %49, %48*/
		main_lrphipreheader_50 = (main_lrphipreheader_49_reg + main_lrphipreheader_48_reg);
end
always @(*) begin
	/* main: %.lr.ph.i.preheader*/
	/*   %51 = add nsw i32 %50, %27*/
		main_lrphipreheader_51 = (main_lrphipreheader_50 + main_lrphipreheader_27_reg);
end
always @(posedge clk) begin
	/* main: %.lr.ph.i.preheader*/
	/*   %51 = add nsw i32 %50, %27*/
	if ((cur_state == LEGUP_F_main_BB_lrphipreheader_22)) begin
		main_lrphipreheader_51_reg <= main_lrphipreheader_51;
		if (start == 1'b0 && ^(main_lrphipreheader_51) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphipreheader_51_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i.preheader*/
	/*   %53 = icmp eq i32 %51, 39*/
		main_lrphipreheader_53 = (main_lrphipreheader_51 == 32'd39);
end
always @(*) begin
	/* main: %54*/
	/*   %indvar = phi i32 [ %indvar.next, %54 ], [ 0, %.preheader2 ]*/
	if (((cur_state == LEGUP_F_main_BB_preheader2_8) & (memory_controller_waitrequest == 1'd0))) begin
		main_54_indvar = 32'd0;
	end
	/* main: %54*/
	/*   %indvar = phi i32 [ %indvar.next, %54 ], [ 0, %.preheader2 ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB__54_28) & (memory_controller_waitrequest == 1'd0)) & (main_54_exitcond1_reg == 1'd0))) */ begin
		main_54_indvar = main_54_indvarnext_reg;
	end
end
always @(posedge clk) begin
	/* main: %54*/
	/*   %indvar = phi i32 [ %indvar.next, %54 ], [ 0, %.preheader2 ]*/
	if (((cur_state == LEGUP_F_main_BB_preheader2_8) & (memory_controller_waitrequest == 1'd0))) begin
		main_54_indvar_reg <= main_54_indvar;
		if (start == 1'b0 && ^(main_54_indvar) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_54_indvar_reg"); $finish; end
	end
	/* main: %54*/
	/*   %indvar = phi i32 [ %indvar.next, %54 ], [ 0, %.preheader2 ]*/
	if ((((cur_state == LEGUP_F_main_BB__54_28) & (memory_controller_waitrequest == 1'd0)) & (main_54_exitcond1_reg == 1'd0))) begin
		main_54_indvar_reg <= main_54_indvar;
		if (start == 1'b0 && ^(main_54_indvar) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_54_indvar_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %54*/
	/*   %55 = add i32 %indvar, 1*/
		main_54_55 = (main_54_indvar_reg + 32'd1);
end
always @(posedge clk) begin
	/* main: %54*/
	/*   %55 = add i32 %indvar, 1*/
	if ((cur_state == LEGUP_F_main_BB__54_23)) begin
		main_54_55_reg <= main_54_55;
		if (start == 1'b0 && ^(main_54_55) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_54_55_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %54*/
	/*   %scevgep = getelementptr [100 x i32]* @array, i32 0, i32 %55*/
		main_54_scevgep = (`TAG_g_array_a + (4 * main_54_55_reg));
end
always @(posedge clk) begin
	/* main: %54*/
	/*   %scevgep = getelementptr [100 x i32]* @array, i32 0, i32 %55*/
	if ((cur_state == LEGUP_F_main_BB__54_24)) begin
		main_54_scevgep_reg <= main_54_scevgep;
		if (start == 1'b0 && ^(main_54_scevgep) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_54_scevgep_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %54*/
	/*   %scevgep2 = getelementptr [100 x i32]* @array, i32 0, i32 %indvar*/
		main_54_scevgep2 = (`TAG_g_array_a + (4 * main_54_indvar_reg));
end
always @(*) begin
	/* main: %54*/
	/*   %56 = add i32 %indvar, 2*/
		main_54_56 = (main_54_indvar_reg + 32'd2);
end
always @(posedge clk) begin
	/* main: %54*/
	/*   %56 = add i32 %indvar, 2*/
	if ((cur_state == LEGUP_F_main_BB__54_23)) begin
		main_54_56_reg <= main_54_56;
		if (start == 1'b0 && ^(main_54_56) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_54_56_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %54*/
	/*   %scevgep3 = getelementptr [100 x i32]* @array, i32 0, i32 %56*/
		main_54_scevgep3 = (`TAG_g_array_a + (4 * main_54_56_reg));
end
always @(*) begin
	/* main: %54*/
	/*   %57 = load i32* %scevgep3, align 4, !tbaa !2*/
		main_54_57 = memory_controller_out_b[31:0];
end
always @(*) begin
	/* main: %54*/
	/*   %58 = load i32* %scevgep2, align 4, !tbaa !2*/
		main_54_58 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %54*/
	/*   %58 = load i32* %scevgep2, align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_main_BB__54_25)) begin
		main_54_58_reg <= main_54_58;
		if (start == 1'b0 && ^(main_54_58) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_54_58_reg"); $finish; end
	end
end
always @(*) begin
	main_54_59 = main_54_59_stage0_reg;
end
always @(*) begin
	/* main: %54*/
	/*   %indvar.next = add i32 %indvar, 1*/
		main_54_indvarnext = (main_54_indvar_reg + 32'd1);
end
always @(posedge clk) begin
	/* main: %54*/
	/*   %indvar.next = add i32 %indvar, 1*/
	if ((cur_state == LEGUP_F_main_BB__54_24)) begin
		main_54_indvarnext_reg <= main_54_indvarnext;
		if (start == 1'b0 && ^(main_54_indvarnext) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_54_indvarnext_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %54*/
	/*   %exitcond1 = icmp eq i32 %indvar.next, 98*/
		main_54_exitcond1 = (main_54_indvarnext == 32'd98);
end
always @(posedge clk) begin
	/* main: %54*/
	/*   %exitcond1 = icmp eq i32 %indvar.next, 98*/
	if ((cur_state == LEGUP_F_main_BB__54_24)) begin
		main_54_exitcond1_reg <= main_54_exitcond1;
		if (start == 1'b0 && ^(main_54_exitcond1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_54_exitcond1_reg"); $finish; end
	end
end
always @(*) begin
	loop6_1_pipeline_start = 1'd0;
	if (reset) begin
		loop6_1_pipeline_start = 1'd0;
	end
	if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd1))) begin
		loop6_1_pipeline_start = 1'd1;
	end
end
always @(posedge clk) begin
	if (reset) begin
		loop6_1_started <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop6_1_started"); $finish; end
	end
	if (((memory_controller_waitrequest == 1'd0) & (loop6_1_pipeline_start & ~(loop6_1_started)))) begin
		loop6_1_started <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop6_1_started"); $finish; end
	end
	if (((memory_controller_waitrequest == 1'd0) & (loop6_1_epilogue & (~(loop6_1_valid_bit_3) & loop6_1_valid_bit_4)))) begin
		loop6_1_started <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop6_1_started"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset) begin
		loop6_1_ii_state <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop6_1_ii_state"); $finish; end
	end
	if (((memory_controller_waitrequest == 1'd0) & (loop6_1_pipeline_start & ~(loop6_1_started)))) begin
		loop6_1_ii_state <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop6_1_ii_state"); $finish; end
	end
	if (((memory_controller_waitrequest == 1'd0) & (loop6_1_ii_state == 1'd0))) begin
		loop6_1_ii_state <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop6_1_ii_state"); $finish; end
	end
	if (((memory_controller_waitrequest == 1'd0) & (loop6_1_ii_state == 1'd1))) begin
		loop6_1_ii_state <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop6_1_ii_state"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset) begin
		loop6_1_i_stage0 <= 0;
		if (start == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop6_1_i_stage0"); $finish; end
	end
	if (((memory_controller_waitrequest == 1'd0) & (loop6_1_pipeline_start & ~(loop6_1_started)))) begin
		loop6_1_i_stage0 <= 0;
		if (start == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop6_1_i_stage0"); $finish; end
	end
	if (((memory_controller_waitrequest == 1'd0) & (((memory_controller_waitrequest == 1'd0) & (loop6_1_ii_state == 1'd1)) & loop6_1_valid_bit_1))) begin
		loop6_1_i_stage0 <= (loop6_1_i_stage0 + 1'd1);
		if (start == 1'b0 && ^((loop6_1_i_stage0 + 1'd1)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop6_1_i_stage0"); $finish; end
	end
	if (reset) begin
		loop6_1_i_stage0 <= 0;
		if (start == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop6_1_i_stage0"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset) begin
		loop6_1_epilogue <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop6_1_epilogue"); $finish; end
	end
	if (((memory_controller_waitrequest == 1'd0) & (loop6_1_started & ((loop6_1_ii_state == 1'd0) & loop6_1_pipeline_exit_cond)))) begin
		loop6_1_epilogue <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop6_1_epilogue"); $finish; end
	end
	if (((memory_controller_waitrequest == 1'd0) & (loop6_1_epilogue & (~(loop6_1_valid_bit_3) & loop6_1_valid_bit_4)))) begin
		loop6_1_epilogue <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop6_1_epilogue"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop6_1_valid_bit_0 <= (((memory_controller_waitrequest == 1'd0) & (loop6_1_pipeline_start & ~(loop6_1_started))) | ((loop6_1_started & ~(loop6_1_epilogue)) & ~(((memory_controller_waitrequest == 1'd0) & (loop6_1_started & ((loop6_1_ii_state == 1'd0) & loop6_1_pipeline_exit_cond))))));
		if (start == 1'b0 && ^((((memory_controller_waitrequest == 1'd0) & (loop6_1_pipeline_start & ~(loop6_1_started))) | ((loop6_1_started & ~(loop6_1_epilogue)) & ~(((memory_controller_waitrequest == 1'd0) & (loop6_1_started & ((loop6_1_ii_state == 1'd0) & loop6_1_pipeline_exit_cond))))))) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop6_1_valid_bit_0"); $finish; end
	end
	if (reset) begin
		loop6_1_valid_bit_0 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop6_1_valid_bit_0"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop6_1_valid_bit_1 <= loop6_1_valid_bit_0;
		if (start == 1'b0 && ^(loop6_1_valid_bit_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop6_1_valid_bit_1"); $finish; end
	end
	if (reset) begin
		loop6_1_valid_bit_1 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop6_1_valid_bit_1"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop6_1_valid_bit_2 <= loop6_1_valid_bit_1;
		if (start == 1'b0 && ^(loop6_1_valid_bit_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop6_1_valid_bit_2"); $finish; end
	end
	if (reset) begin
		loop6_1_valid_bit_2 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop6_1_valid_bit_2"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop6_1_valid_bit_3 <= loop6_1_valid_bit_2;
		if (start == 1'b0 && ^(loop6_1_valid_bit_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop6_1_valid_bit_3"); $finish; end
	end
	if (reset) begin
		loop6_1_valid_bit_3 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop6_1_valid_bit_3"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop6_1_valid_bit_4 <= loop6_1_valid_bit_3;
		if (start == 1'b0 && ^(loop6_1_valid_bit_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop6_1_valid_bit_4"); $finish; end
	end
	if (reset) begin
		loop6_1_valid_bit_4 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop6_1_valid_bit_4"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop6_1_ii_state == 1'd0) & loop6_1_valid_bit_0))) begin
		main_13_i010_reg_stage0 <= main_13_i010;
		if (start == 1'b0 && ^(main_13_i010) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_13_i010_reg_stage0"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop6_1_ii_state == 1'd1) & loop6_1_valid_bit_1))) begin
		main_13_i010_reg_stage1 <= main_13_i010_reg_stage0;
		if (start == 1'b0 && ^(main_13_i010_reg_stage0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_13_i010_reg_stage1"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop6_1_ii_state == 1'd0) & loop6_1_valid_bit_0))) begin
		main_13_scevgep6_reg_stage0 <= main_13_scevgep6;
		if (start == 1'b0 && ^(main_13_scevgep6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_13_scevgep6_reg_stage0"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop6_1_ii_state == 1'd1) & loop6_1_valid_bit_1))) begin
		main_13_scevgep6_reg_stage1 <= main_13_scevgep6_reg_stage0;
		if (start == 1'b0 && ^(main_13_scevgep6_reg_stage0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_13_scevgep6_reg_stage1"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop6_1_ii_state == 1'd1) & loop6_1_valid_bit_1))) begin
		main_13_14_reg_stage1 <= main_13_14;
		if (start == 1'b0 && ^(main_13_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_13_14_reg_stage1"); $finish; end
	end
end
always @(*) begin
	loop6_1_pipeline_exit_cond = (loop6_1_i_stage0 == 98);
end
always @(*) begin
	loop6_1_pipeline_finish = ((memory_controller_waitrequest == 1'd0) & (loop6_1_epilogue & (~(loop6_1_valid_bit_3) & loop6_1_valid_bit_4)));
end
always @(*) begin
	lpm_mult_main_13_15_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
	/* main: %13*/
	/*   %15 = mul nsw i32 %14, %i.010, !legup.pipeline.start_time !8, !legup.pipeline.avail_time !9, !legup.pipeline.stage !6
	start_time: 2 avail_time: 3 stage: 1 II: 2 start_ii_state = 2 % 2 = 0 avail_ii_state = 3 % 2 = 1*/
	if ((lpm_mult_main_13_15_en == 1'd1)) begin
		main_13_15_stage0_reg <= (main_13_14_reg_stage1 * main_13_i010_reg_stage1);
	end
end
always @(*) begin
	lpm_mult_main_54_59_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
	/* main: %54*/
	/*   %59 = mul nsw i32 %58, %57*/
	if ((lpm_mult_main_54_59_en == 1'd1)) begin
		main_54_59_stage0_reg <= (main_54_58_reg * main_54_57);
	end
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		finish <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
	/* main: %64*/
	/*   ret i32 %51*/
	if ((cur_state == LEGUP_F_main_BB__64_31)) begin
		finish <= (memory_controller_waitrequest == 1'd0);
		if (start == 1'b0 && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
end
always @(*) begin
	memory_controller_enable_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_enable_a = 1'd0;
	end
	/* main: %.preheader2*/
	/*   %1 = load i32* getelementptr inbounds ([100 x i32]* @array, i32 0, i32 0), align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_main_BB_preheader2_1)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.preheader2*/
	/*   %3 = load i32* getelementptr inbounds ([100 x i32]* @array, i32 0, i32 2), align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_main_BB_preheader2_2)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.preheader2*/
	/*   %5 = load i32* getelementptr inbounds ([100 x i32]* @array, i32 0, i32 3), align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_main_BB_preheader2_3)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.preheader2*/
	/*   %7 = load i32* getelementptr inbounds ([100 x i32]* @array, i32 0, i32 2), align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_main_BB_preheader2_4)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.preheader2*/
	/*   %9 = load i32* getelementptr inbounds ([100 x i32]* @array, i32 0, i32 4), align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_main_BB_preheader2_5)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.preheader2*/
	/*   %11 = load i32* getelementptr inbounds ([100 x i32]* @array, i32 0, i32 5), align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_main_BB_preheader2_6)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %13*/
	/*   store i32 %16, i32* %scevgep6, align 4, !tbaa !2, !legup.pipeline.start_time !9, !legup.pipeline.avail_time !10, !legup.pipeline.stage !6
	start_time: 3 avail_time: 4 stage: 1 II: 2 start_ii_state = 3 % 2 = 1 avail_ii_state = 4 % 2 = 0*/
	if (((loop6_1_ii_state == 1'd1) & loop6_1_valid_bit_3)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.lr.ph.i.preheader*/
	/*   %28 = load i32* getelementptr inbounds ([100 x i32]* @array, i32 0, i32 0), align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_main_BB_lrphipreheader_10)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.lr.ph.i.preheader*/
	/*   %31 = load i32* getelementptr inbounds ([100 x i32]* @array, i32 0, i32 2), align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_main_BB_lrphipreheader_11)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.lr.ph.i.preheader*/
	/*   %35 = load i32* getelementptr inbounds ([100 x i32]* @array, i32 0, i32 4), align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_main_BB_lrphipreheader_12)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.lr.ph.i.preheader*/
	/*   %39 = load i32* getelementptr inbounds ([100 x i32]* @array, i32 0, i32 6), align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_main_BB_lrphipreheader_13)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.lr.ph.i.preheader*/
	/*   %43 = load i32* getelementptr inbounds ([100 x i32]* @array, i32 0, i32 8), align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_main_BB_lrphipreheader_14)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.lr.ph.i.preheader*/
	/*   %47 = load i32* getelementptr inbounds ([100 x i32]* @array, i32 0, i32 10), align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_main_BB_lrphipreheader_15)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %54*/
	/*   store i32 %59, i32* %scevgep, align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_main_BB__54_27)) begin
		memory_controller_enable_a = 1'd1;
	end
end
always @(*) begin
	memory_controller_address_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_address_a = 1'd0;
	end
	/* main: %.preheader2*/
	/*   %1 = load i32* getelementptr inbounds ([100 x i32]* @array, i32 0, i32 0), align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_main_BB_preheader2_1)) begin
		memory_controller_address_a = `TAG_g_array_a;
	end
	/* main: %.preheader2*/
	/*   %3 = load i32* getelementptr inbounds ([100 x i32]* @array, i32 0, i32 2), align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_main_BB_preheader2_2)) begin
		memory_controller_address_a = (`TAG_g_array_a + (4 * 32'd2));
	end
	/* main: %.preheader2*/
	/*   %5 = load i32* getelementptr inbounds ([100 x i32]* @array, i32 0, i32 3), align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_main_BB_preheader2_3)) begin
		memory_controller_address_a = (`TAG_g_array_a + (4 * 32'd3));
	end
	/* main: %.preheader2*/
	/*   %7 = load i32* getelementptr inbounds ([100 x i32]* @array, i32 0, i32 2), align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_main_BB_preheader2_4)) begin
		memory_controller_address_a = (`TAG_g_array_a + (4 * 32'd2));
	end
	/* main: %.preheader2*/
	/*   %9 = load i32* getelementptr inbounds ([100 x i32]* @array, i32 0, i32 4), align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_main_BB_preheader2_5)) begin
		memory_controller_address_a = (`TAG_g_array_a + (4 * 32'd4));
	end
	/* main: %.preheader2*/
	/*   %11 = load i32* getelementptr inbounds ([100 x i32]* @array, i32 0, i32 5), align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_main_BB_preheader2_6)) begin
		memory_controller_address_a = (`TAG_g_array_a + (4 * 32'd5));
	end
	/* main: %13*/
	/*   store i32 %16, i32* %scevgep6, align 4, !tbaa !2, !legup.pipeline.start_time !9, !legup.pipeline.avail_time !10, !legup.pipeline.stage !6
	start_time: 3 avail_time: 4 stage: 1 II: 2 start_ii_state = 3 % 2 = 1 avail_ii_state = 4 % 2 = 0*/
	if (((loop6_1_ii_state == 1'd1) & loop6_1_valid_bit_3)) begin
		memory_controller_address_a = main_13_scevgep6_reg_stage1;
	end
	/* main: %.lr.ph.i.preheader*/
	/*   %28 = load i32* getelementptr inbounds ([100 x i32]* @array, i32 0, i32 0), align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_main_BB_lrphipreheader_10)) begin
		memory_controller_address_a = `TAG_g_array_a;
	end
	/* main: %.lr.ph.i.preheader*/
	/*   %31 = load i32* getelementptr inbounds ([100 x i32]* @array, i32 0, i32 2), align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_main_BB_lrphipreheader_11)) begin
		memory_controller_address_a = (`TAG_g_array_a + (4 * 32'd2));
	end
	/* main: %.lr.ph.i.preheader*/
	/*   %35 = load i32* getelementptr inbounds ([100 x i32]* @array, i32 0, i32 4), align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_main_BB_lrphipreheader_12)) begin
		memory_controller_address_a = (`TAG_g_array_a + (4 * 32'd4));
	end
	/* main: %.lr.ph.i.preheader*/
	/*   %39 = load i32* getelementptr inbounds ([100 x i32]* @array, i32 0, i32 6), align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_main_BB_lrphipreheader_13)) begin
		memory_controller_address_a = (`TAG_g_array_a + (4 * 32'd6));
	end
	/* main: %.lr.ph.i.preheader*/
	/*   %43 = load i32* getelementptr inbounds ([100 x i32]* @array, i32 0, i32 8), align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_main_BB_lrphipreheader_14)) begin
		memory_controller_address_a = (`TAG_g_array_a + (4 * 32'd8));
	end
	/* main: %.lr.ph.i.preheader*/
	/*   %47 = load i32* getelementptr inbounds ([100 x i32]* @array, i32 0, i32 10), align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_main_BB_lrphipreheader_15)) begin
		memory_controller_address_a = (`TAG_g_array_a + (4 * 32'd10));
	end
	/* main: %54*/
	/*   store i32 %59, i32* %scevgep, align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_main_BB__54_27)) begin
		memory_controller_address_a = main_54_scevgep_reg;
	end
end
always @(*) begin
	memory_controller_write_enable_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %.preheader2*/
	/*   %1 = load i32* getelementptr inbounds ([100 x i32]* @array, i32 0, i32 0), align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_main_BB_preheader2_1)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %.preheader2*/
	/*   %3 = load i32* getelementptr inbounds ([100 x i32]* @array, i32 0, i32 2), align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_main_BB_preheader2_2)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %.preheader2*/
	/*   %5 = load i32* getelementptr inbounds ([100 x i32]* @array, i32 0, i32 3), align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_main_BB_preheader2_3)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %.preheader2*/
	/*   %7 = load i32* getelementptr inbounds ([100 x i32]* @array, i32 0, i32 2), align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_main_BB_preheader2_4)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %.preheader2*/
	/*   %9 = load i32* getelementptr inbounds ([100 x i32]* @array, i32 0, i32 4), align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_main_BB_preheader2_5)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %.preheader2*/
	/*   %11 = load i32* getelementptr inbounds ([100 x i32]* @array, i32 0, i32 5), align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_main_BB_preheader2_6)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %13*/
	/*   store i32 %16, i32* %scevgep6, align 4, !tbaa !2, !legup.pipeline.start_time !9, !legup.pipeline.avail_time !10, !legup.pipeline.stage !6
	start_time: 3 avail_time: 4 stage: 1 II: 2 start_ii_state = 3 % 2 = 1 avail_ii_state = 4 % 2 = 0*/
	if (((loop6_1_ii_state == 1'd1) & loop6_1_valid_bit_3)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %.lr.ph.i.preheader*/
	/*   %28 = load i32* getelementptr inbounds ([100 x i32]* @array, i32 0, i32 0), align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_main_BB_lrphipreheader_10)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %.lr.ph.i.preheader*/
	/*   %31 = load i32* getelementptr inbounds ([100 x i32]* @array, i32 0, i32 2), align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_main_BB_lrphipreheader_11)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %.lr.ph.i.preheader*/
	/*   %35 = load i32* getelementptr inbounds ([100 x i32]* @array, i32 0, i32 4), align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_main_BB_lrphipreheader_12)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %.lr.ph.i.preheader*/
	/*   %39 = load i32* getelementptr inbounds ([100 x i32]* @array, i32 0, i32 6), align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_main_BB_lrphipreheader_13)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %.lr.ph.i.preheader*/
	/*   %43 = load i32* getelementptr inbounds ([100 x i32]* @array, i32 0, i32 8), align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_main_BB_lrphipreheader_14)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %.lr.ph.i.preheader*/
	/*   %47 = load i32* getelementptr inbounds ([100 x i32]* @array, i32 0, i32 10), align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_main_BB_lrphipreheader_15)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %54*/
	/*   store i32 %59, i32* %scevgep, align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_main_BB__54_27)) begin
		memory_controller_write_enable_a = 1'd1;
	end
end
always @(*) begin
	memory_controller_in_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_in_a = 1'd0;
	end
	/* main: %13*/
	/*   store i32 %16, i32* %scevgep6, align 4, !tbaa !2, !legup.pipeline.start_time !9, !legup.pipeline.avail_time !10, !legup.pipeline.stage !6
	start_time: 3 avail_time: 4 stage: 1 II: 2 start_ii_state = 3 % 2 = 1 avail_ii_state = 4 % 2 = 0*/
	if (((loop6_1_ii_state == 1'd1) & loop6_1_valid_bit_3)) begin
		memory_controller_in_a = main_13_16;
	end
	/* main: %54*/
	/*   store i32 %59, i32* %scevgep, align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_main_BB__54_27)) begin
		memory_controller_in_a = main_54_59;
	end
end
always @(*) begin
	memory_controller_size_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_size_a = 1'd0;
	end
	/* main: %.preheader2*/
	/*   %1 = load i32* getelementptr inbounds ([100 x i32]* @array, i32 0, i32 0), align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_main_BB_preheader2_1)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %.preheader2*/
	/*   %3 = load i32* getelementptr inbounds ([100 x i32]* @array, i32 0, i32 2), align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_main_BB_preheader2_2)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %.preheader2*/
	/*   %5 = load i32* getelementptr inbounds ([100 x i32]* @array, i32 0, i32 3), align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_main_BB_preheader2_3)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %.preheader2*/
	/*   %7 = load i32* getelementptr inbounds ([100 x i32]* @array, i32 0, i32 2), align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_main_BB_preheader2_4)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %.preheader2*/
	/*   %9 = load i32* getelementptr inbounds ([100 x i32]* @array, i32 0, i32 4), align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_main_BB_preheader2_5)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %.preheader2*/
	/*   %11 = load i32* getelementptr inbounds ([100 x i32]* @array, i32 0, i32 5), align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_main_BB_preheader2_6)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %13*/
	/*   store i32 %16, i32* %scevgep6, align 4, !tbaa !2, !legup.pipeline.start_time !9, !legup.pipeline.avail_time !10, !legup.pipeline.stage !6
	start_time: 3 avail_time: 4 stage: 1 II: 2 start_ii_state = 3 % 2 = 1 avail_ii_state = 4 % 2 = 0*/
	if (((loop6_1_ii_state == 1'd1) & loop6_1_valid_bit_3)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %.lr.ph.i.preheader*/
	/*   %28 = load i32* getelementptr inbounds ([100 x i32]* @array, i32 0, i32 0), align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_main_BB_lrphipreheader_10)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %.lr.ph.i.preheader*/
	/*   %31 = load i32* getelementptr inbounds ([100 x i32]* @array, i32 0, i32 2), align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_main_BB_lrphipreheader_11)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %.lr.ph.i.preheader*/
	/*   %35 = load i32* getelementptr inbounds ([100 x i32]* @array, i32 0, i32 4), align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_main_BB_lrphipreheader_12)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %.lr.ph.i.preheader*/
	/*   %39 = load i32* getelementptr inbounds ([100 x i32]* @array, i32 0, i32 6), align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_main_BB_lrphipreheader_13)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %.lr.ph.i.preheader*/
	/*   %43 = load i32* getelementptr inbounds ([100 x i32]* @array, i32 0, i32 8), align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_main_BB_lrphipreheader_14)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %.lr.ph.i.preheader*/
	/*   %47 = load i32* getelementptr inbounds ([100 x i32]* @array, i32 0, i32 10), align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_main_BB_lrphipreheader_15)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %54*/
	/*   store i32 %59, i32* %scevgep, align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_main_BB__54_27)) begin
		memory_controller_size_a = 2'd2;
	end
end
always @(*) begin
	memory_controller_enable_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_enable_b = 1'd0;
	end
	/* main: %.preheader2*/
	/*   %2 = load i32* getelementptr inbounds ([100 x i32]* @array, i32 0, i32 1), align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_main_BB_preheader2_1)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %.preheader2*/
	/*   %4 = load i32* getelementptr inbounds ([100 x i32]* @array, i32 0, i32 2), align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_main_BB_preheader2_2)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %.preheader2*/
	/*   %6 = load i32* getelementptr inbounds ([100 x i32]* @array, i32 0, i32 4), align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_main_BB_preheader2_3)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %.preheader2*/
	/*   %8 = load i32* getelementptr inbounds ([100 x i32]* @array, i32 0, i32 3), align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_main_BB_preheader2_4)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %.preheader2*/
	/*   %10 = load i32* getelementptr inbounds ([100 x i32]* @array, i32 0, i32 4), align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_main_BB_preheader2_5)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %.preheader2*/
	/*   %12 = load i32* getelementptr inbounds ([100 x i32]* @array, i32 0, i32 6), align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_main_BB_preheader2_6)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %.lr.ph.i.preheader*/
	/*   %29 = load i32* getelementptr inbounds ([100 x i32]* @array, i32 0, i32 1), align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_main_BB_lrphipreheader_10)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %.lr.ph.i.preheader*/
	/*   %33 = load i32* getelementptr inbounds ([100 x i32]* @array, i32 0, i32 3), align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_main_BB_lrphipreheader_11)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %.lr.ph.i.preheader*/
	/*   %37 = load i32* getelementptr inbounds ([100 x i32]* @array, i32 0, i32 5), align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_main_BB_lrphipreheader_12)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %.lr.ph.i.preheader*/
	/*   %41 = load i32* getelementptr inbounds ([100 x i32]* @array, i32 0, i32 7), align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_main_BB_lrphipreheader_13)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %.lr.ph.i.preheader*/
	/*   %45 = load i32* getelementptr inbounds ([100 x i32]* @array, i32 0, i32 9), align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_main_BB_lrphipreheader_14)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %.lr.ph.i.preheader*/
	/*   %49 = load i32* getelementptr inbounds ([100 x i32]* @array, i32 0, i32 11), align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_main_BB_lrphipreheader_15)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %54*/
	/*   %58 = load i32* %scevgep2, align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_main_BB__54_23)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %54*/
	/*   %57 = load i32* %scevgep3, align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_main_BB__54_24)) begin
		memory_controller_enable_b = 1'd1;
	end
end
always @(*) begin
	memory_controller_address_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_address_b = 1'd0;
	end
	/* main: %.preheader2*/
	/*   %2 = load i32* getelementptr inbounds ([100 x i32]* @array, i32 0, i32 1), align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_main_BB_preheader2_1)) begin
		memory_controller_address_b = (`TAG_g_array_a + (4 * 32'd1));
	end
	/* main: %.preheader2*/
	/*   %4 = load i32* getelementptr inbounds ([100 x i32]* @array, i32 0, i32 2), align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_main_BB_preheader2_2)) begin
		memory_controller_address_b = (`TAG_g_array_a + (4 * 32'd2));
	end
	/* main: %.preheader2*/
	/*   %6 = load i32* getelementptr inbounds ([100 x i32]* @array, i32 0, i32 4), align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_main_BB_preheader2_3)) begin
		memory_controller_address_b = (`TAG_g_array_a + (4 * 32'd4));
	end
	/* main: %.preheader2*/
	/*   %8 = load i32* getelementptr inbounds ([100 x i32]* @array, i32 0, i32 3), align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_main_BB_preheader2_4)) begin
		memory_controller_address_b = (`TAG_g_array_a + (4 * 32'd3));
	end
	/* main: %.preheader2*/
	/*   %10 = load i32* getelementptr inbounds ([100 x i32]* @array, i32 0, i32 4), align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_main_BB_preheader2_5)) begin
		memory_controller_address_b = (`TAG_g_array_a + (4 * 32'd4));
	end
	/* main: %.preheader2*/
	/*   %12 = load i32* getelementptr inbounds ([100 x i32]* @array, i32 0, i32 6), align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_main_BB_preheader2_6)) begin
		memory_controller_address_b = (`TAG_g_array_a + (4 * 32'd6));
	end
	/* main: %.lr.ph.i.preheader*/
	/*   %29 = load i32* getelementptr inbounds ([100 x i32]* @array, i32 0, i32 1), align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_main_BB_lrphipreheader_10)) begin
		memory_controller_address_b = (`TAG_g_array_a + (4 * 32'd1));
	end
	/* main: %.lr.ph.i.preheader*/
	/*   %33 = load i32* getelementptr inbounds ([100 x i32]* @array, i32 0, i32 3), align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_main_BB_lrphipreheader_11)) begin
		memory_controller_address_b = (`TAG_g_array_a + (4 * 32'd3));
	end
	/* main: %.lr.ph.i.preheader*/
	/*   %37 = load i32* getelementptr inbounds ([100 x i32]* @array, i32 0, i32 5), align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_main_BB_lrphipreheader_12)) begin
		memory_controller_address_b = (`TAG_g_array_a + (4 * 32'd5));
	end
	/* main: %.lr.ph.i.preheader*/
	/*   %41 = load i32* getelementptr inbounds ([100 x i32]* @array, i32 0, i32 7), align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_main_BB_lrphipreheader_13)) begin
		memory_controller_address_b = (`TAG_g_array_a + (4 * 32'd7));
	end
	/* main: %.lr.ph.i.preheader*/
	/*   %45 = load i32* getelementptr inbounds ([100 x i32]* @array, i32 0, i32 9), align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_main_BB_lrphipreheader_14)) begin
		memory_controller_address_b = (`TAG_g_array_a + (4 * 32'd9));
	end
	/* main: %.lr.ph.i.preheader*/
	/*   %49 = load i32* getelementptr inbounds ([100 x i32]* @array, i32 0, i32 11), align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_main_BB_lrphipreheader_15)) begin
		memory_controller_address_b = (`TAG_g_array_a + (4 * 32'd11));
	end
	/* main: %54*/
	/*   %58 = load i32* %scevgep2, align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_main_BB__54_23)) begin
		memory_controller_address_b = main_54_scevgep2;
	end
	/* main: %54*/
	/*   %57 = load i32* %scevgep3, align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_main_BB__54_24)) begin
		memory_controller_address_b = main_54_scevgep3;
	end
end
always @(*) begin
	memory_controller_write_enable_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %.preheader2*/
	/*   %2 = load i32* getelementptr inbounds ([100 x i32]* @array, i32 0, i32 1), align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_main_BB_preheader2_1)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %.preheader2*/
	/*   %4 = load i32* getelementptr inbounds ([100 x i32]* @array, i32 0, i32 2), align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_main_BB_preheader2_2)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %.preheader2*/
	/*   %6 = load i32* getelementptr inbounds ([100 x i32]* @array, i32 0, i32 4), align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_main_BB_preheader2_3)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %.preheader2*/
	/*   %8 = load i32* getelementptr inbounds ([100 x i32]* @array, i32 0, i32 3), align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_main_BB_preheader2_4)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %.preheader2*/
	/*   %10 = load i32* getelementptr inbounds ([100 x i32]* @array, i32 0, i32 4), align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_main_BB_preheader2_5)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %.preheader2*/
	/*   %12 = load i32* getelementptr inbounds ([100 x i32]* @array, i32 0, i32 6), align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_main_BB_preheader2_6)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %.lr.ph.i.preheader*/
	/*   %29 = load i32* getelementptr inbounds ([100 x i32]* @array, i32 0, i32 1), align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_main_BB_lrphipreheader_10)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %.lr.ph.i.preheader*/
	/*   %33 = load i32* getelementptr inbounds ([100 x i32]* @array, i32 0, i32 3), align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_main_BB_lrphipreheader_11)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %.lr.ph.i.preheader*/
	/*   %37 = load i32* getelementptr inbounds ([100 x i32]* @array, i32 0, i32 5), align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_main_BB_lrphipreheader_12)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %.lr.ph.i.preheader*/
	/*   %41 = load i32* getelementptr inbounds ([100 x i32]* @array, i32 0, i32 7), align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_main_BB_lrphipreheader_13)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %.lr.ph.i.preheader*/
	/*   %45 = load i32* getelementptr inbounds ([100 x i32]* @array, i32 0, i32 9), align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_main_BB_lrphipreheader_14)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %.lr.ph.i.preheader*/
	/*   %49 = load i32* getelementptr inbounds ([100 x i32]* @array, i32 0, i32 11), align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_main_BB_lrphipreheader_15)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %54*/
	/*   %58 = load i32* %scevgep2, align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_main_BB__54_23)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %54*/
	/*   %57 = load i32* %scevgep3, align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_main_BB__54_24)) begin
		memory_controller_write_enable_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_in_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_in_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_size_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_size_b = 1'd0;
	end
	/* main: %.preheader2*/
	/*   %2 = load i32* getelementptr inbounds ([100 x i32]* @array, i32 0, i32 1), align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_main_BB_preheader2_1)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %.preheader2*/
	/*   %4 = load i32* getelementptr inbounds ([100 x i32]* @array, i32 0, i32 2), align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_main_BB_preheader2_2)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %.preheader2*/
	/*   %6 = load i32* getelementptr inbounds ([100 x i32]* @array, i32 0, i32 4), align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_main_BB_preheader2_3)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %.preheader2*/
	/*   %8 = load i32* getelementptr inbounds ([100 x i32]* @array, i32 0, i32 3), align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_main_BB_preheader2_4)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %.preheader2*/
	/*   %10 = load i32* getelementptr inbounds ([100 x i32]* @array, i32 0, i32 4), align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_main_BB_preheader2_5)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %.preheader2*/
	/*   %12 = load i32* getelementptr inbounds ([100 x i32]* @array, i32 0, i32 6), align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_main_BB_preheader2_6)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %.lr.ph.i.preheader*/
	/*   %29 = load i32* getelementptr inbounds ([100 x i32]* @array, i32 0, i32 1), align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_main_BB_lrphipreheader_10)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %.lr.ph.i.preheader*/
	/*   %33 = load i32* getelementptr inbounds ([100 x i32]* @array, i32 0, i32 3), align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_main_BB_lrphipreheader_11)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %.lr.ph.i.preheader*/
	/*   %37 = load i32* getelementptr inbounds ([100 x i32]* @array, i32 0, i32 5), align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_main_BB_lrphipreheader_12)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %.lr.ph.i.preheader*/
	/*   %41 = load i32* getelementptr inbounds ([100 x i32]* @array, i32 0, i32 7), align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_main_BB_lrphipreheader_13)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %.lr.ph.i.preheader*/
	/*   %45 = load i32* getelementptr inbounds ([100 x i32]* @array, i32 0, i32 9), align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_main_BB_lrphipreheader_14)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %.lr.ph.i.preheader*/
	/*   %49 = load i32* getelementptr inbounds ([100 x i32]* @array, i32 0, i32 11), align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_main_BB_lrphipreheader_15)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %54*/
	/*   %58 = load i32* %scevgep2, align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_main_BB__54_23)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %54*/
	/*   %57 = load i32* %scevgep3, align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_main_BB__54_24)) begin
		memory_controller_size_b = 2'd2;
	end
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		return_val <= 0;
		if (start == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
	end
	/* main: %64*/
	/*   ret i32 %51*/
	if ((cur_state == LEGUP_F_main_BB__64_31)) begin
		return_val <= main_lrphipreheader_51_reg;
		if (start == 1'b0 && ^(main_lrphipreheader_51_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
	end
end

endmodule 
module ram_dual_port
(
	clk,
	clken,
	address_a,
	address_b,
	wren_a,
	wren_b,
	data_a,
	data_b,
	byteena_a,
	byteena_b,
	q_a,
	q_b
);

parameter  width_a = 1'd0;
parameter  width_b = 1'd0;
parameter  widthad_a = 1'd0;
parameter  widthad_b = 1'd0;
parameter  numwords_a = 1'd0;
parameter  numwords_b = 1'd0;
parameter  init_file = "UNUSED.mif";
parameter  width_be_a = 1'd0;
parameter  width_be_b = 1'd0;
parameter  latency = 1;

input  clk;
input  clken;
input [(widthad_a-1):0] address_a;
input [(widthad_b-1):0] address_b;
output wire [(width_a-1):0] q_a;
output wire [(width_b-1):0] q_b;
reg [(width_a-1):0] q_a_wire;
reg [(width_b-1):0] q_b_wire;
input  wren_a;
input  wren_b;
input [(width_a-1):0] data_a;
input [(width_b-1):0] data_b;
// byte enable is unsupported by inferred RAMs
input [width_be_a-1:0] byteena_a;
input [width_be_b-1:0] byteena_b;

(* ramstyle = "no_rw_check", ram_init_file = init_file *) reg [width_a-1:0] ram[numwords_a-1:0];

/* synthesis translate_off */
integer i;
ALTERA_MF_MEMORY_INITIALIZATION mem ();
reg [8*256:1] ram_ver_file;
initial begin
	if (init_file == "UNUSED.mif")
    begin
		for (i = 0; i < numwords_a; i = i + 1)
			ram[i] = 0;
    end
	else
    begin
        // modelsim can't read .mif files directly. So use Altera function to
        // convert them to .ver files
        mem.convert_to_ver_file(init_file, width_a, ram_ver_file);
        $readmemh(ram_ver_file, ram);
    end
end
/* synthesis translate_on */

always @ (posedge clk)
if (clken)
begin // Port A
if (wren_a)
begin
    ram[address_a] <= data_a;
    q_a_wire <= {width_a{1'bX}};
end
else
    q_a_wire <= ram[address_a];
end
always @ (posedge clk)
if (clken)
begin // Port b
if (wren_b)
begin
    ram[address_b] <= data_b;
    q_b_wire <= {width_b{1'bX}};
end
else
    q_b_wire <= ram[address_b];
end



integer j;
reg [(width_a-1):0] q_a_reg[latency:1], q_b_reg[latency:1];

always @(*)
begin
   q_a_reg[1] <= q_a_wire;
   q_b_reg[1] <= q_b_wire;
end

always @(posedge clk)
if (clken)
begin
   for (j = 1; j < latency; j=j+1)
   begin
       q_a_reg[j+1] <= q_a_reg[j];
       q_b_reg[j+1] <= q_b_reg[j];
   end
end

assign q_a = (clken) ? q_a_reg[latency] : 0;
assign q_b = (clken) ? q_b_reg[latency] : 0;


endmodule
module rom_dual_port
(
	clk,
	clken,
	address_a,
	address_b,
	q_a,
	q_b
);

parameter  width_a = 1'd0;
parameter  width_b = 1'd0;
parameter  widthad_a = 1'd0;
parameter  widthad_b = 1'd0;
parameter  numwords_a = 1'd0;
parameter  numwords_b = 1'd0;
parameter  init_file = "UNUSED.mif";
parameter  latency = 1;

input  clk;
input  clken;
input [(widthad_a-1):0] address_a;
input [(widthad_b-1):0] address_b;
output wire [(width_a-1):0] q_a;
output wire [(width_b-1):0] q_b;
reg [(width_a-1):0] q_a_wire;
reg [(width_b-1):0] q_b_wire;

(* ramstyle = "no_rw_check", ram_init_file = init_file *) reg [width_a-1:0] ram[numwords_a-1:0];

/* synthesis translate_off */
integer i;
ALTERA_MF_MEMORY_INITIALIZATION mem ();
reg [8*256:1] ram_ver_file;
initial begin
	if (init_file == "UNUSED.mif")
    begin
		for (i = 0; i < numwords_a; i = i + 1)
			ram[i] = 0;
    end
	else
    begin
        // modelsim can't read .mif files directly. So use Altera function to
        // convert them to .ver files
        mem.convert_to_ver_file(init_file, width_a, ram_ver_file);
        $readmemh(ram_ver_file, ram);
    end
end
/* synthesis translate_on */

always @ (posedge clk)
if (clken)
begin
    q_a_wire <= ram[address_a];
    q_b_wire <= ram[address_b];
end



integer j;
reg [(width_a-1):0] q_a_reg[latency:1], q_b_reg[latency:1];

always @(*)
begin
   q_a_reg[1] <= q_a_wire;
   q_b_reg[1] <= q_b_wire;
end

always @(posedge clk)
if (clken)
begin
   for (j = 1; j < latency; j=j+1)
   begin
       q_a_reg[j+1] <= q_a_reg[j];
       q_b_reg[j+1] <= q_b_reg[j];
   end
end

assign q_a = (clken) ? q_a_reg[latency] : 0;
assign q_b = (clken) ? q_b_reg[latency] : 0;


endmodule
// Adding code from verilog file: /home/leandro/myLegUp/4.0/examples/../boards/CycloneII/DE2/top.v


module de2 (
	    CLOCK_50,
	    KEY,
	    SW,
	    HEX0,
	    HEX1,
	    HEX2,
	    HEX3,
	    HEX4,
	    HEX5,
	    HEX6,
	    HEX7,
	    LEDG,
		UART_RXD,
		UART_TXD

	    );

   input CLOCK_50;
   input [3:0] KEY;
   input [17:0] SW;
   output [6:0] HEX0, HEX1,  HEX2,  HEX3,  HEX4,  HEX5,  HEX6,  HEX7;
   reg [6:0] 	hex0, hex1, hex2, hex3, hex4, hex5, hex6, hex7;
   

   output [7:0] LEDG;
    input UART_RXD;
    output UART_TXD;    
	wire clk = CLOCK_50;
	wire go = ~KEY[1];



   wire 	reset = ~KEY[0];
   wire 	start;
   wire [31:0] 	return_val;
   reg  [31:0] 	return_val_reg;
   wire 	finish;
   wire [3:0]	state;

   hex_digits h7( .x(hex7), .hex_LEDs(HEX7));
   hex_digits h6( .x(hex6), .hex_LEDs(HEX6));
   hex_digits h5( .x(hex5), .hex_LEDs(HEX5));
   hex_digits h4( .x(hex4), .hex_LEDs(HEX4));
   hex_digits h3( .x(hex3), .hex_LEDs(HEX3));
   hex_digits h2( .x(hex2), .hex_LEDs(HEX2));
   hex_digits h1( .x(hex1), .hex_LEDs(HEX1));
   hex_digits h0( .x(hex0), .hex_LEDs(HEX0));
   
	always @ (*) begin
		hex7 <= return_val_reg[31:28];
		hex6 <= return_val_reg[27:24];
		hex5 <= return_val_reg[23:20];
		hex4 <= return_val_reg[19:16];
		hex3 <= return_val_reg[15:12];
		hex2 <= return_val_reg[11:8];
		hex1 <= return_val_reg[7:4];
		hex0 <= return_val_reg[3:0];
	end
assign UART_TXD = 1'b0;

    parameter s_WAIT = 3'b001, s_START = 3'b010, s_EXE = 3'b011,
                s_DONE = 3'b100;

    // state registers
    reg [3:0] y_Q, Y_D;

    assign LEDG[3:0] = y_Q;

    // next state
    always @(*)
    begin
        case (y_Q)
            s_WAIT: if (go) Y_D = s_START; else Y_D = y_Q;

            s_START: Y_D = s_EXE;

            s_EXE: if (!finish) Y_D = s_EXE; else Y_D = s_DONE;

            s_DONE: Y_D = s_DONE;

            default: Y_D = 3'bxxx;
        endcase
    end

    // current state
    always @(posedge clk)
    begin
        if (reset) // synchronous clear
            y_Q <= s_WAIT;
        else
            y_Q <= Y_D;
    end

    always @(posedge clk)
        if (y_Q == s_EXE && finish)
            return_val_reg <= return_val;
        else if (y_Q == s_DONE)
            return_val_reg <= return_val_reg;
        else
            return_val_reg <= 0;


    assign start = (y_Q == s_START);

   
   top top_inst (
      .clk (clk),
      .reset (reset),
      .finish (finish),
      .return_val (return_val),
        .start (start)

    );

endmodule

// Adding code from verilog file: /home/leandro/myLegUp/4.0/examples/../boards/StratixIV/DE4/top.v


module de4 ( 
    	     OSC_50_BANK2, 
             BUTTON, 
             LED, 
    	     SEG0_D, 
    	     SEG1_D 
	     ); 
   input OSC_50_BANK2; 
   input [1:0] BUTTON; 
   output [6:0] SEG0_D; 
   output [6:0] SEG1_D; 
   output [7:0] LED; 
   
   de2 de2_inst ( 
		  .CLOCK_50 (OSC_50_BANK2), 
		  .LEDG (LED), 
		  .KEY (BUTTON), 
		  .SW (), 
		  .HEX0 (SEG0_D), 
		  .HEX1 (SEG1_D), 
		  .HEX2 (), 
		  .HEX3 (), 
		  .HEX4 (), 
		  .HEX5 (), 
		  .HEX6 (), 
		  .HEX7 () 
		  ); 
   
endmodule
// Adding code from verilog file: /home/leandro/myLegUp/4.0/examples/../boards/Virtex6/ML605/top.v


module ML605 (
       USER_CLOCK,
	    KEY,
	    SW,	    
       LED,
       LEDG,
		UART_RXD,
		UART_TXD

	    );

   input USER_CLOCK;
   input [4:0] KEY;
   input [7:0] SW;
   output [7:0] LED;
   output [7:0] LEDG;
   wire CLOCK_50;

    input UART_RXD;
    output UART_TXD;    
	wire clk = CLOCK_50;
	wire go = ~KEY[1];



   wire 	reset = ~KEY[0];
   wire 	start;
   wire [31:0] 	return_val;
   reg  [31:0] 	return_val_reg;
   wire 	finish;
   wire [3:0]	state;
   
   reg [6:0]   hex0, hex1, hex2, hex3, hex4, hex5, hex6, hex7;

   assign CLOCK_50 = USER_CLOCK;
   assign LED = 0;
   
	always @ (*) begin
		hex7 <= return_val_reg[31:28];
		hex6 <= return_val_reg[27:24];
		hex5 <= return_val_reg[23:20];
		hex4 <= return_val_reg[19:16];
		hex3 <= return_val_reg[15:12];
		hex2 <= return_val_reg[11:8];
		hex1 <= return_val_reg[7:4];
		hex0 <= return_val_reg[3:0];
	end
assign UART_TXD = 1'b0;

    parameter s_WAIT = 3'b001, s_START = 3'b010, s_EXE = 3'b011,
                s_DONE = 3'b100;

    // state registers
    reg [3:0] y_Q, Y_D;

    assign LEDG[3:0] = y_Q;

    // next state
    always @(*)
    begin
        case (y_Q)
            s_WAIT: if (go) Y_D = s_START; else Y_D = y_Q;

            s_START: Y_D = s_EXE;

            s_EXE: if (!finish) Y_D = s_EXE; else Y_D = s_DONE;

            s_DONE: Y_D = s_DONE;

            default: Y_D = 3'bxxx;
        endcase
    end

    // current state
    always @(posedge clk)
    begin
        if (reset) // synchronous clear
            y_Q <= s_WAIT;
        else
            y_Q <= Y_D;
    end

    always @(posedge clk)
        if (y_Q == s_EXE && finish)
            return_val_reg <= return_val;
        else if (y_Q == s_DONE)
            return_val_reg <= return_val_reg;
        else
            return_val_reg <= 0;


    assign start = (y_Q == s_START);

   
   top top_inst (
      .clk (clk),
      .reset (reset),
      .finish (finish),
      .return_val (return_val),
        .start (start)

    );

   

endmodule

module circuit_start_control (
    go,
    control_key
);
    input control_key;
    output go;
    assign go = control_key;
endmodule
module hex_digits(x, hex_LEDs);
    input [3:0] x;
    output [6:0] hex_LEDs;
    
    assign hex_LEDs[0] = (~x[3] & ~x[2] & ~x[1] & x[0]) |
                            (~x[3] & x[2] & ~x[1] & ~x[0]) |
                            (x[3] & x[2] & ~x[1] & x[0]) |
                            (x[3] & ~x[2] & x[1] & x[0]);
    assign hex_LEDs[1] = (~x[3] & x[2] & ~x[1] & x[0]) |
                            (x[3] & x[1] & x[0]) |
                            (x[3] & x[2] & ~x[0]) |
                            (x[2] & x[1] & ~x[0]);
    assign hex_LEDs[2] = (x[3] & x[2] & ~x[0]) |
                            (x[3] & x[2] & x[1]) |
                            (~x[3] & ~x[2] & x[1] & ~x[0]);
    assign hex_LEDs[3] = (~x[3] & ~x[2] & ~x[1] & x[0]) | 
                            (~x[3] & x[2] & ~x[1] & ~x[0]) | 
                            (x[2] & x[1] & x[0]) | 
                            (x[3] & ~x[2] & x[1] & ~x[0]);
    assign hex_LEDs[4] = (~x[3] & x[0]) |
                            (~x[3] & x[2] & ~x[1]) |
                            (~x[2] & ~x[1] & x[0]);
    assign hex_LEDs[5] = (~x[3] & ~x[2] & x[0]) | 
                            (~x[3] & ~x[2] & x[1]) | 
                            (~x[3] & x[1] & x[0]) | 
                            (x[3] & x[2] & ~x[1] & x[0]);
    assign hex_LEDs[6] = (~x[3] & ~x[2] & ~x[1]) | 
                            (x[3] & x[2] & ~x[1] & ~x[0]) | 
                            (~x[3] & x[2] & x[1] & x[0]);
    
endmodule
`timescale 1 ns / 1 ns
module main_tb
(
);

reg  clk;
reg  reset;
reg  start;
reg  waitrequest;
wire [31:0] return_val;
wire  finish;


top top_inst (
	.clk (clk),
	.reset (reset),
	.start (start),
	.waitrequest (waitrequest),
	.finish (finish),
	.return_val (return_val)
);




initial 
    clk = 0;
always @(clk)
    clk <= #10 ~clk;

initial begin
//$monitor("At t=%t clk=%b %b %b %b %d", $time, clk, reset, start, finish, return_val);
@(negedge clk);
reset <= 1;
@(negedge clk);
reset <= 0;
start <= 1;
@(negedge clk);
start <= 0;
end

always@(finish) begin
    if (finish == 1) begin
        $display("At t=%t clk=%b finish=%b return_val=%d", $time, clk, finish, return_val);
        $display("Cycles: %d", ($time-50)/20);
        $finish;
    end
end

initial begin
waitrequest <= 1;
@(negedge clk);
@(negedge clk);
waitrequest <= 0;
end


endmodule 
