//----------------------------------------------------------------------------//
// Generated by LegUp High-Level Synthesis Tool Version 4.0 (http://legup.org)
// Compiled: Mon Jun  4 15:32:40 2018
// University of Toronto
// For research and academic purposes only. Commercial use is prohibited.
// Please send bugs to: legup@eecg.toronto.edu
// Date: Mon Aug  6 19:20:17 2018
//----------------------------------------------------------------------------//

`define MEMORY_CONTROLLER_ADDR_SIZE 32
`define MEMORY_CONTROLLER_DATA_SIZE 64
// Number of RAM elements: 1
`define MEMORY_CONTROLLER_TAG_SIZE 9
// @a = internal unnamed_addr global [100 x i32] zeroinitializer, align 4
`define TAG_g_a `MEMORY_CONTROLLER_TAG_SIZE'd2
`define TAG_g_a_a {`TAG_g_a, 23'd0}

// Turn off warning 'ignoring unsupported system task'
// altera message_off 10175

`timescale 1 ns / 1 ns
module top
	(
		clk,
		reset,
		start,
		finish,
		waitrequest,
		return_val
	);
input clk;
input reset;
input start;
output wire finish;
input waitrequest;
output wire [31:0] return_val;
wire memory_controller_waitrequest;
wire memory_controller_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
wire memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
wire [1:0] memory_controller_size_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;

wire memory_controller_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
wire memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
wire [1:0] memory_controller_size_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;

/* synthesis translate_off */
assign memory_controller_waitrequest = waitrequest;
/* synthesis translate_on */

memory_controller memory_controller_inst (
	.clk( clk ),
	.memory_controller_enable_a( memory_controller_enable_a ),
	.memory_controller_enable_b( memory_controller_enable_b ),
	.memory_controller_address_a( memory_controller_address_a ),
	.memory_controller_address_b( memory_controller_address_b ),
	.memory_controller_write_enable_a( memory_controller_write_enable_a ),
	.memory_controller_write_enable_b( memory_controller_write_enable_b ),
	.memory_controller_in_a( memory_controller_in_a ),
	.memory_controller_in_b( memory_controller_in_b ),
	.memory_controller_size_a( memory_controller_size_a ),
	.memory_controller_size_b( memory_controller_size_b ),
	.memory_controller_waitrequest( memory_controller_waitrequest ),
	.memory_controller_out_reg_a( memory_controller_out_a ),
	.memory_controller_out_reg_b( memory_controller_out_b )
);

main main_inst(
	.clk( clk ),
	.clk2x( clk2x ),
	.clk1x_follower( clk1x_follower ),
	.reset( reset ),
	.start( start ),
	.finish( finish ),
	.return_val( return_val ),
	.memory_controller_waitrequest(memory_controller_waitrequest),
	.memory_controller_enable_a(memory_controller_enable_a),
	.memory_controller_address_a(memory_controller_address_a),
	.memory_controller_write_enable_a(memory_controller_write_enable_a),
	.memory_controller_in_a(memory_controller_in_a),
	.memory_controller_size_a(memory_controller_size_a),
	.memory_controller_out_a(memory_controller_out_a),
	.memory_controller_enable_b(memory_controller_enable_b),
	.memory_controller_address_b(memory_controller_address_b),
	.memory_controller_write_enable_b(memory_controller_write_enable_b),
	.memory_controller_in_b(memory_controller_in_b),
	.memory_controller_size_b(memory_controller_size_b),
	.memory_controller_out_b(memory_controller_out_b)
);

endmodule

`timescale 1 ns / 1 ns
module memory_controller
(
	clk,
	memory_controller_address_a,
	memory_controller_address_b,
	memory_controller_enable_a,
	memory_controller_enable_b,
	memory_controller_write_enable_a,
	memory_controller_write_enable_b,
	memory_controller_in_a,
	memory_controller_in_b,
	memory_controller_size_a,
	memory_controller_size_b,
	memory_controller_waitrequest,
	memory_controller_out_reg_a,
	memory_controller_out_reg_b
);

parameter latency = 2;

parameter ram_latency = latency-1;

integer j;

input clk;
input memory_controller_waitrequest;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
input memory_controller_enable_a;
input memory_controller_write_enable_a;
input [64-1:0] memory_controller_in_a;
input [1:0] memory_controller_size_a;
output reg [64-1:0] memory_controller_out_reg_a;
reg [64-1:0] memory_controller_out_prev_a;
reg [64-1:0] memory_controller_out_a;

reg memory_controller_enable_reg_a;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
input memory_controller_enable_b;
input memory_controller_write_enable_b;
input [64-1:0] memory_controller_in_b;
input [1:0] memory_controller_size_b;
output reg [64-1:0] memory_controller_out_reg_b;
reg [64-1:0] memory_controller_out_prev_b;
reg [64-1:0] memory_controller_out_b;

reg memory_controller_enable_reg_b;

reg [6:0] a_address_a;
reg [6:0] a_address_b;
reg a_write_enable_a;
reg a_write_enable_b;
reg [31:0] a_in_a;
reg [31:0] a_in_b;
wire [31:0] a_out_a;
wire [31:0] a_out_b;

// @a = internal unnamed_addr global [100 x i32] zeroinitializer, align 4
ram_dual_port a (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( a_address_a ),
	.address_b( a_address_b ),
	.wren_a( a_write_enable_a ),
	.wren_b( a_write_enable_b ),
	.data_a( a_in_a ),
	.data_b( a_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( a_out_a ),
	.q_b( a_out_b)
);
defparam a.width_a = 32;
defparam a.width_b = 32;
defparam a.widthad_a = 7;
defparam a.widthad_b = 7;
defparam a.width_be_a = 1;
defparam a.width_be_b = 1;
defparam a.numwords_a = 100;
defparam a.numwords_b = 100;
defparam a.latency = ram_latency;
defparam a.init_file = "a.mif";
wire [`MEMORY_CONTROLLER_TAG_SIZE-1:0] tag_a;
assign tag_a = memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:`MEMORY_CONTROLLER_ADDR_SIZE-`MEMORY_CONTROLLER_TAG_SIZE];
reg [2:0] prevAddr_a;
reg [1:0] prevSize_a;
reg [2:0] prevSize_a_and;

always @(posedge clk)
if (!memory_controller_waitrequest)
begin
	prevAddr_a <= memory_controller_address_a[2:0];
	prevSize_a <= memory_controller_size_a;
end
wire [`MEMORY_CONTROLLER_TAG_SIZE-1:0] tag_b;
assign tag_b = memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:`MEMORY_CONTROLLER_ADDR_SIZE-`MEMORY_CONTROLLER_TAG_SIZE];
reg [2:0] prevAddr_b;
reg [1:0] prevSize_b;
reg [2:0] prevSize_b_and;

always @(posedge clk)
if (!memory_controller_waitrequest)
begin
	prevAddr_b <= memory_controller_address_b[2:0];
	prevSize_b <= memory_controller_size_b;
end

reg [2:0] select_not_struct_a;

wire select_a_a;
assign select_a_a = (tag_a == `TAG_g_a);
reg [ram_latency:0] select_a_reg_a;
wire [31:0] memory_controller_a_out_a;
assign memory_controller_a_out_a = {32{ select_a_reg_a[ram_latency]}} & a_out_a;

always @(*)
begin
	a_address_a = memory_controller_address_a [7-1+2:2] & {7{select_a_a}};
	a_write_enable_a = memory_controller_write_enable_a & select_a_a;
	a_in_a [32-1:0] = memory_controller_in_a[32-1:0];

end
always @(*)
begin
	select_not_struct_a [2:0] = 3'b0 | {2{select_a_reg_a[ram_latency]}};
	if (prevAddr_a[2:0] & select_not_struct_a[2:0] != 0 && memory_controller_enable_a)
	begin
		$display("Error: memory address not aligned to ram word size!");
		$finish;
	end

	prevSize_a_and[0] = prevSize_a[1] | prevSize_a[0];
	prevSize_a_and[1] = prevSize_a[1];
	prevSize_a_and[2] = prevSize_a[1] & prevSize_a[0];
	if ((prevAddr_a & prevSize_a_and) != 0 && memory_controller_enable_a)
	begin
		$display("Error: memory address not aligned to ram word size!");
		$finish;
	end
	memory_controller_out_prev_a = memory_controller_out_reg_a & { 64{!memory_controller_enable_reg_a}};
	memory_controller_out_a = 1'b0 | memory_controller_out_prev_a | memory_controller_a_out_a;
end

always @(posedge clk)
if (!memory_controller_waitrequest)
begin
memory_controller_out_reg_a <= memory_controller_out_a;
memory_controller_enable_reg_a <= memory_controller_enable_a;
end

always @(posedge clk)
if (!memory_controller_waitrequest)
for (j = 0; j < ram_latency; j=j+1)
begin
select_a_reg_a[j+1] <= select_a_reg_a[j];
end
always @(*)
begin
select_a_reg_a[0] <= select_a_a;
end

reg [2:0] select_not_struct_b;

wire select_a_b;
assign select_a_b = (tag_b == `TAG_g_a);
reg [ram_latency:0] select_a_reg_b;
wire [31:0] memory_controller_a_out_b;
assign memory_controller_a_out_b = {32{ select_a_reg_b[ram_latency]}} & a_out_b;

always @(*)
begin
	a_address_b = memory_controller_address_b [7-1+2:2] & {7{select_a_b}};
	a_write_enable_b = memory_controller_write_enable_b & select_a_b;
	a_in_b [32-1:0] = memory_controller_in_b[32-1:0];

end
always @(*)
begin
	select_not_struct_b [2:0] = 3'b0 | {2{select_a_reg_b[ram_latency]}};
	if (prevAddr_b[2:0] & select_not_struct_b[2:0] != 0 && memory_controller_enable_b)
	begin
		$display("Error: memory address not aligned to ram word size!");
		$finish;
	end

	prevSize_b_and[0] = prevSize_b[1] | prevSize_b[0];
	prevSize_b_and[1] = prevSize_b[1];
	prevSize_b_and[2] = prevSize_b[1] & prevSize_b[0];
	if ((prevAddr_b & prevSize_b_and) != 0 && memory_controller_enable_b)
	begin
		$display("Error: memory address not aligned to ram word size!");
		$finish;
	end
	memory_controller_out_prev_b = memory_controller_out_reg_b & { 64{!memory_controller_enable_reg_b}};
	memory_controller_out_b = 1'b0 | memory_controller_out_prev_b | memory_controller_a_out_b;
end

always @(posedge clk)
if (!memory_controller_waitrequest)
begin
memory_controller_out_reg_b <= memory_controller_out_b;
memory_controller_enable_reg_b <= memory_controller_enable_b;
end

always @(posedge clk)
if (!memory_controller_waitrequest)
for (j = 0; j < ram_latency; j=j+1)
begin
select_a_reg_b[j+1] <= select_a_reg_b[j];
end
always @(*)
begin
select_a_reg_b[0] <= select_a_b;
end

endmodule 

`timescale 1 ns / 1 ns
module main
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	memory_controller_waitrequest,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b,
	return_val
);

parameter [1:0] LEGUP_0 = 2'd0;
parameter [1:0] LEGUP_loop_pipeline_wait_loop6_1_1 = 2'd1;
parameter [1:0] LEGUP_F_main_BB__6_2 = 2'd2;
parameter [8:0] tag_offset = 9'd0;
parameter [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tag_addr_offset = {tag_offset, 23'd0};

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
input  memory_controller_waitrequest;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
output reg [31:0] return_val;
reg [1:0] cur_state;
reg [1:0] next_state;
reg [31:0] main_1_i01;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_1_scevgep;
reg [31:0] main_1_2;
reg [31:0] main_1_3;
reg [31:0] main_1_4;
reg [31:0] main_1_5;
reg  loop6_1_pipeline_start;
reg  loop6_1_started;
reg  loop6_1_ii_state;
reg [31:0] loop6_1_i_stage0;
reg  loop6_1_epilogue;
reg  loop6_1_valid_bit_0;
reg  loop6_1_valid_bit_1;
reg  loop6_1_valid_bit_2;
reg  loop6_1_valid_bit_3;
reg  loop6_1_valid_bit_4;
reg  loop6_1_valid_bit_5;
reg  loop6_1_valid_bit_6;
reg  loop6_1_valid_bit_7;
reg  loop6_1_valid_bit_8;
reg  loop6_1_valid_bit_9;
reg  loop6_1_valid_bit_10;
reg  loop6_1_valid_bit_11;
reg  loop6_1_valid_bit_12;
reg  loop6_1_valid_bit_13;
reg  loop6_1_valid_bit_14;
reg  loop6_1_valid_bit_15;
reg  loop6_1_valid_bit_16;
reg  loop6_1_valid_bit_17;
reg  loop6_1_valid_bit_18;
reg  loop6_1_valid_bit_19;
reg  loop6_1_valid_bit_20;
reg  loop6_1_valid_bit_21;
reg  loop6_1_valid_bit_22;
reg  loop6_1_valid_bit_23;
reg  loop6_1_valid_bit_24;
reg  loop6_1_valid_bit_25;
reg  loop6_1_valid_bit_26;
reg  loop6_1_valid_bit_27;
reg  loop6_1_valid_bit_28;
reg  loop6_1_valid_bit_29;
reg  loop6_1_valid_bit_30;
reg  loop6_1_valid_bit_31;
reg  loop6_1_valid_bit_32;
reg  loop6_1_valid_bit_33;
reg  loop6_1_valid_bit_34;
reg  loop6_1_valid_bit_35;
reg  loop6_1_valid_bit_36;
reg  loop6_1_valid_bit_37;
reg  loop6_1_valid_bit_38;
reg  loop6_1_valid_bit_39;
reg  loop6_1_valid_bit_40;
reg  loop6_1_valid_bit_41;
reg  loop6_1_valid_bit_42;
reg  loop6_1_valid_bit_43;
reg  loop6_1_valid_bit_44;
reg  loop6_1_valid_bit_45;
reg  loop6_1_valid_bit_46;
reg  loop6_1_valid_bit_47;
reg  loop6_1_valid_bit_48;
reg  loop6_1_valid_bit_49;
reg  loop6_1_valid_bit_50;
reg  loop6_1_valid_bit_51;
reg  loop6_1_valid_bit_52;
reg  loop6_1_valid_bit_53;
reg  loop6_1_valid_bit_54;
reg  loop6_1_valid_bit_55;
reg  loop6_1_valid_bit_56;
reg  loop6_1_valid_bit_57;
reg  loop6_1_valid_bit_58;
reg  loop6_1_valid_bit_59;
reg  loop6_1_valid_bit_60;
reg  loop6_1_valid_bit_61;
reg  loop6_1_valid_bit_62;
reg  loop6_1_valid_bit_63;
reg  loop6_1_valid_bit_64;
reg  loop6_1_valid_bit_65;
reg  loop6_1_valid_bit_66;
reg  loop6_1_valid_bit_67;
reg  loop6_1_valid_bit_68;
reg  loop6_1_valid_bit_69;
reg  loop6_1_valid_bit_70;
reg [31:0] main_1_i01_reg_stage0;
reg [31:0] main_1_i01_reg_stage1;
reg [31:0] main_1_i01_reg_stage2;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_1_scevgep_reg_stage0;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_1_scevgep_reg_stage1;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_1_scevgep_reg_stage2;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_1_scevgep_reg_stage3;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_1_scevgep_reg_stage4;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_1_scevgep_reg_stage5;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_1_scevgep_reg_stage6;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_1_scevgep_reg_stage7;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_1_scevgep_reg_stage8;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_1_scevgep_reg_stage9;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_1_scevgep_reg_stage10;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_1_scevgep_reg_stage11;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_1_scevgep_reg_stage12;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_1_scevgep_reg_stage13;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_1_scevgep_reg_stage14;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_1_scevgep_reg_stage15;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_1_scevgep_reg_stage16;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_1_scevgep_reg_stage17;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_1_scevgep_reg_stage18;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_1_scevgep_reg_stage19;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_1_scevgep_reg_stage20;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_1_scevgep_reg_stage21;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_1_scevgep_reg_stage22;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_1_scevgep_reg_stage23;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_1_scevgep_reg_stage24;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_1_scevgep_reg_stage25;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_1_scevgep_reg_stage26;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_1_scevgep_reg_stage27;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_1_scevgep_reg_stage28;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_1_scevgep_reg_stage29;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_1_scevgep_reg_stage30;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_1_scevgep_reg_stage31;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_1_scevgep_reg_stage32;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_1_scevgep_reg_stage33;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_1_scevgep_reg_stage34;
reg [31:0] main_1_2_reg_stage1;
reg [31:0] main_1_2_reg_stage2;
reg [31:0] main_1_2_reg_stage3;
reg [31:0] main_1_2_reg_stage4;
reg [31:0] main_1_2_reg_stage5;
reg [31:0] main_1_2_reg_stage6;
reg [31:0] main_1_2_reg_stage7;
reg [31:0] main_1_2_reg_stage8;
reg [31:0] main_1_2_reg_stage9;
reg [31:0] main_1_2_reg_stage10;
reg [31:0] main_1_2_reg_stage11;
reg [31:0] main_1_2_reg_stage12;
reg [31:0] main_1_2_reg_stage13;
reg [31:0] main_1_2_reg_stage14;
reg [31:0] main_1_2_reg_stage15;
reg [31:0] main_1_2_reg_stage16;
reg [31:0] main_1_2_reg_stage17;
reg [31:0] main_1_2_reg_stage18;
reg [31:0] main_1_3_reg_stage2;
reg [31:0] main_1_5_reg_stage34;
reg  loop6_1_pipeline_exit_cond;
reg  loop6_1_pipeline_finish;
reg [31:0] main_signed_divide_32_0_op0;
reg [31:0] main_signed_divide_32_0_op1;
wire [31:0] lpm_divide_main_1_4_temp_out;
wire [31:0] main_1_4_unused;
reg  lpm_divide_main_1_4_en;
reg [31:0] lpm_divide_main_1_4_out;
reg [31:0] main_signed_divide_32_0;
reg [31:0] main_signed_divide_32_1_op0;
reg [31:0] main_signed_divide_32_1_op1;
wire [31:0] lpm_divide_main_1_5_temp_out;
wire [31:0] main_1_5_unused;
reg  lpm_divide_main_1_5_en;
reg [31:0] lpm_divide_main_1_5_out;
reg [31:0] main_signed_divide_32_1;

/*   %4 = sdiv i32 %i.01, %3, !legup.pipeline.start_time !10, !legup.pipeline.avail_time !11, !legup.pipeline.stage !8*/
lpm_divide lpm_divide_main_1_4 (
	.quotient (lpm_divide_main_1_4_temp_out),
	.remain (main_1_4_unused),
	.clock (clk),
	.aclr (1'd0),
	.clken (lpm_divide_main_1_4_en),
	.numer (main_signed_divide_32_0_op0),
	.denom (main_signed_divide_32_0_op1)
);

defparam
	lpm_divide_main_1_4.lpm_pipeline = 32,
	lpm_divide_main_1_4.lpm_widthn = 32,
	lpm_divide_main_1_4.lpm_widthd = 32,
	lpm_divide_main_1_4.lpm_drepresentation = "SIGNED",
	lpm_divide_main_1_4.lpm_nrepresentation = "SIGNED",
	lpm_divide_main_1_4.lpm_hint = "LPM_REMAINDERPOSITIVE=FALSE";

/*   %5 = sdiv i32 %2, %4, !legup.pipeline.start_time !11, !legup.pipeline.avail_time !12, !legup.pipeline.stage !13*/
lpm_divide lpm_divide_main_1_5 (
	.quotient (lpm_divide_main_1_5_temp_out),
	.remain (main_1_5_unused),
	.clock (clk),
	.aclr (1'd0),
	.clken (lpm_divide_main_1_5_en),
	.numer (main_signed_divide_32_1_op0),
	.denom (main_signed_divide_32_1_op1)
);

defparam
	lpm_divide_main_1_5.lpm_pipeline = 32,
	lpm_divide_main_1_5.lpm_widthn = 32,
	lpm_divide_main_1_5.lpm_widthd = 32,
	lpm_divide_main_1_5.lpm_drepresentation = "SIGNED",
	lpm_divide_main_1_5.lpm_nrepresentation = "SIGNED",
	lpm_divide_main_1_5.lpm_hint = "LPM_REMAINDERPOSITIVE=FALSE";


/* Unsynthesizable Statements */
always @(posedge clk)
	if (!memory_controller_waitrequest) begin
	/* main: %6*/
	/*   %7 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([14 x i8]* @.str1, i32 0, i32 0)) #2*/
	if ((cur_state == LEGUP_F_main_BB__6_2)) begin
		$write("RESULT: PASS\n");
	end
end
always @(posedge clk) begin
if (reset == 1'b1)
	cur_state <= LEGUP_0;
else if (memory_controller_waitrequest == 1'd1)
	cur_state <= cur_state;
else
	cur_state <= next_state;
end

always @(*)
begin
next_state = cur_state;
case(cur_state)  // synthesis parallel_case  
LEGUP_0:
	if ((start == 1'd1))
		next_state = LEGUP_loop_pipeline_wait_loop6_1_1;
LEGUP_F_main_BB__6_2:
		next_state = LEGUP_0;
LEGUP_loop_pipeline_wait_loop6_1_1:
	if ((loop6_1_pipeline_finish == 1'd1))
		next_state = LEGUP_F_main_BB__6_2;
	else if ((loop6_1_pipeline_finish == 1'd1))
		next_state = LEGUP_F_main_BB__6_2;
default:
	next_state = cur_state;
endcase

end
always @(*) begin
	/* main: %1*/
	/*   %i.01 = add i32 %indvar, 1, !legup.pipeline.start_time !3, !legup.pipeline.avail_time !3, !legup.pipeline.stage !3
	start_time: 0 avail_time: 0 stage: 0 II: 2 start_ii_state = 0 % 2 = 0 avail_ii_state = 0 % 2 = 0*/
		main_1_i01 = (loop6_1_i_stage0 + 32'd1);
end
always @(*) begin
	/* main: %1*/
	/*   %scevgep = getelementptr [100 x i32]* @a, i32 0, i32 %i.01, !legup.pipeline.start_time !3, !legup.pipeline.avail_time !3, !legup.pipeline.stage !3
	start_time: 0 avail_time: 0 stage: 0 II: 2 start_ii_state = 0 % 2 = 0 avail_ii_state = 0 % 2 = 0*/
		main_1_scevgep = (`TAG_g_a_a + (4 * main_1_i01));
end
always @(*) begin
	/* main: %1*/
	/*   %2 = load i32* %scevgep, align 4, !tbaa !4, !legup.pipeline.start_time !3, !legup.pipeline.avail_time !8, !legup.pipeline.stage !3
	start_time: 0 avail_time: 2 stage: 0 II: 2 start_ii_state = 0 % 2 = 0 avail_ii_state = 2 % 2 = 0*/
		main_1_2 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* main: %1*/
	/*   %3 = add nsw i32 %2, 1, !legup.pipeline.start_time !9, !legup.pipeline.avail_time !9, !legup.pipeline.stage !2
	start_time: 3 avail_time: 3 stage: 1 II: 2 start_ii_state = 3 % 2 = 1 avail_ii_state = 3 % 2 = 1*/
		main_1_3 = (main_1_2_reg_stage1 + 32'd1);
end
always @(*) begin
	main_1_4 = main_signed_divide_32_0;
end
always @(*) begin
	main_1_5 = main_signed_divide_32_1;
end
always @(*) begin
	loop6_1_pipeline_start = 1'd0;
	if (reset) begin
		loop6_1_pipeline_start = 1'd0;
	end
	if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd1))) begin
		loop6_1_pipeline_start = 1'd1;
	end
end
always @(posedge clk) begin
	if (reset) begin
		loop6_1_started <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop6_1_started"); $finish; end
	end
	if (((memory_controller_waitrequest == 1'd0) & (loop6_1_pipeline_start & ~(loop6_1_started)))) begin
		loop6_1_started <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop6_1_started"); $finish; end
	end
	if (((memory_controller_waitrequest == 1'd0) & (loop6_1_epilogue & (~(loop6_1_valid_bit_69) & loop6_1_valid_bit_70)))) begin
		loop6_1_started <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop6_1_started"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset) begin
		loop6_1_ii_state <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop6_1_ii_state"); $finish; end
	end
	if (((memory_controller_waitrequest == 1'd0) & (loop6_1_pipeline_start & ~(loop6_1_started)))) begin
		loop6_1_ii_state <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop6_1_ii_state"); $finish; end
	end
	if (((memory_controller_waitrequest == 1'd0) & (loop6_1_ii_state == 1'd0))) begin
		loop6_1_ii_state <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop6_1_ii_state"); $finish; end
	end
	if (((memory_controller_waitrequest == 1'd0) & (loop6_1_ii_state == 1'd1))) begin
		loop6_1_ii_state <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop6_1_ii_state"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset) begin
		loop6_1_i_stage0 <= 0;
		if (start == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop6_1_i_stage0"); $finish; end
	end
	if (((memory_controller_waitrequest == 1'd0) & (loop6_1_pipeline_start & ~(loop6_1_started)))) begin
		loop6_1_i_stage0 <= 0;
		if (start == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop6_1_i_stage0"); $finish; end
	end
	if (((memory_controller_waitrequest == 1'd0) & (((memory_controller_waitrequest == 1'd0) & (loop6_1_ii_state == 1'd1)) & loop6_1_valid_bit_1))) begin
		loop6_1_i_stage0 <= (loop6_1_i_stage0 + 1'd1);
		if (start == 1'b0 && ^((loop6_1_i_stage0 + 1'd1)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop6_1_i_stage0"); $finish; end
	end
	if (reset) begin
		loop6_1_i_stage0 <= 0;
		if (start == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop6_1_i_stage0"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset) begin
		loop6_1_epilogue <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop6_1_epilogue"); $finish; end
	end
	if (((memory_controller_waitrequest == 1'd0) & (loop6_1_started & ((loop6_1_ii_state == 1'd0) & loop6_1_pipeline_exit_cond)))) begin
		loop6_1_epilogue <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop6_1_epilogue"); $finish; end
	end
	if (((memory_controller_waitrequest == 1'd0) & (loop6_1_epilogue & (~(loop6_1_valid_bit_69) & loop6_1_valid_bit_70)))) begin
		loop6_1_epilogue <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop6_1_epilogue"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop6_1_valid_bit_0 <= (((memory_controller_waitrequest == 1'd0) & (loop6_1_pipeline_start & ~(loop6_1_started))) | ((loop6_1_started & ~(loop6_1_epilogue)) & ~(((memory_controller_waitrequest == 1'd0) & (loop6_1_started & ((loop6_1_ii_state == 1'd0) & loop6_1_pipeline_exit_cond))))));
		if (start == 1'b0 && ^((((memory_controller_waitrequest == 1'd0) & (loop6_1_pipeline_start & ~(loop6_1_started))) | ((loop6_1_started & ~(loop6_1_epilogue)) & ~(((memory_controller_waitrequest == 1'd0) & (loop6_1_started & ((loop6_1_ii_state == 1'd0) & loop6_1_pipeline_exit_cond))))))) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop6_1_valid_bit_0"); $finish; end
	end
	if (reset) begin
		loop6_1_valid_bit_0 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop6_1_valid_bit_0"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop6_1_valid_bit_1 <= loop6_1_valid_bit_0;
		if (start == 1'b0 && ^(loop6_1_valid_bit_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop6_1_valid_bit_1"); $finish; end
	end
	if (reset) begin
		loop6_1_valid_bit_1 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop6_1_valid_bit_1"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop6_1_valid_bit_2 <= loop6_1_valid_bit_1;
		if (start == 1'b0 && ^(loop6_1_valid_bit_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop6_1_valid_bit_2"); $finish; end
	end
	if (reset) begin
		loop6_1_valid_bit_2 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop6_1_valid_bit_2"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop6_1_valid_bit_3 <= loop6_1_valid_bit_2;
		if (start == 1'b0 && ^(loop6_1_valid_bit_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop6_1_valid_bit_3"); $finish; end
	end
	if (reset) begin
		loop6_1_valid_bit_3 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop6_1_valid_bit_3"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop6_1_valid_bit_4 <= loop6_1_valid_bit_3;
		if (start == 1'b0 && ^(loop6_1_valid_bit_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop6_1_valid_bit_4"); $finish; end
	end
	if (reset) begin
		loop6_1_valid_bit_4 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop6_1_valid_bit_4"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop6_1_valid_bit_5 <= loop6_1_valid_bit_4;
		if (start == 1'b0 && ^(loop6_1_valid_bit_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop6_1_valid_bit_5"); $finish; end
	end
	if (reset) begin
		loop6_1_valid_bit_5 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop6_1_valid_bit_5"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop6_1_valid_bit_6 <= loop6_1_valid_bit_5;
		if (start == 1'b0 && ^(loop6_1_valid_bit_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop6_1_valid_bit_6"); $finish; end
	end
	if (reset) begin
		loop6_1_valid_bit_6 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop6_1_valid_bit_6"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop6_1_valid_bit_7 <= loop6_1_valid_bit_6;
		if (start == 1'b0 && ^(loop6_1_valid_bit_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop6_1_valid_bit_7"); $finish; end
	end
	if (reset) begin
		loop6_1_valid_bit_7 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop6_1_valid_bit_7"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop6_1_valid_bit_8 <= loop6_1_valid_bit_7;
		if (start == 1'b0 && ^(loop6_1_valid_bit_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop6_1_valid_bit_8"); $finish; end
	end
	if (reset) begin
		loop6_1_valid_bit_8 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop6_1_valid_bit_8"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop6_1_valid_bit_9 <= loop6_1_valid_bit_8;
		if (start == 1'b0 && ^(loop6_1_valid_bit_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop6_1_valid_bit_9"); $finish; end
	end
	if (reset) begin
		loop6_1_valid_bit_9 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop6_1_valid_bit_9"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop6_1_valid_bit_10 <= loop6_1_valid_bit_9;
		if (start == 1'b0 && ^(loop6_1_valid_bit_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop6_1_valid_bit_10"); $finish; end
	end
	if (reset) begin
		loop6_1_valid_bit_10 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop6_1_valid_bit_10"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop6_1_valid_bit_11 <= loop6_1_valid_bit_10;
		if (start == 1'b0 && ^(loop6_1_valid_bit_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop6_1_valid_bit_11"); $finish; end
	end
	if (reset) begin
		loop6_1_valid_bit_11 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop6_1_valid_bit_11"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop6_1_valid_bit_12 <= loop6_1_valid_bit_11;
		if (start == 1'b0 && ^(loop6_1_valid_bit_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop6_1_valid_bit_12"); $finish; end
	end
	if (reset) begin
		loop6_1_valid_bit_12 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop6_1_valid_bit_12"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop6_1_valid_bit_13 <= loop6_1_valid_bit_12;
		if (start == 1'b0 && ^(loop6_1_valid_bit_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop6_1_valid_bit_13"); $finish; end
	end
	if (reset) begin
		loop6_1_valid_bit_13 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop6_1_valid_bit_13"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop6_1_valid_bit_14 <= loop6_1_valid_bit_13;
		if (start == 1'b0 && ^(loop6_1_valid_bit_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop6_1_valid_bit_14"); $finish; end
	end
	if (reset) begin
		loop6_1_valid_bit_14 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop6_1_valid_bit_14"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop6_1_valid_bit_15 <= loop6_1_valid_bit_14;
		if (start == 1'b0 && ^(loop6_1_valid_bit_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop6_1_valid_bit_15"); $finish; end
	end
	if (reset) begin
		loop6_1_valid_bit_15 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop6_1_valid_bit_15"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop6_1_valid_bit_16 <= loop6_1_valid_bit_15;
		if (start == 1'b0 && ^(loop6_1_valid_bit_15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop6_1_valid_bit_16"); $finish; end
	end
	if (reset) begin
		loop6_1_valid_bit_16 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop6_1_valid_bit_16"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop6_1_valid_bit_17 <= loop6_1_valid_bit_16;
		if (start == 1'b0 && ^(loop6_1_valid_bit_16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop6_1_valid_bit_17"); $finish; end
	end
	if (reset) begin
		loop6_1_valid_bit_17 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop6_1_valid_bit_17"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop6_1_valid_bit_18 <= loop6_1_valid_bit_17;
		if (start == 1'b0 && ^(loop6_1_valid_bit_17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop6_1_valid_bit_18"); $finish; end
	end
	if (reset) begin
		loop6_1_valid_bit_18 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop6_1_valid_bit_18"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop6_1_valid_bit_19 <= loop6_1_valid_bit_18;
		if (start == 1'b0 && ^(loop6_1_valid_bit_18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop6_1_valid_bit_19"); $finish; end
	end
	if (reset) begin
		loop6_1_valid_bit_19 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop6_1_valid_bit_19"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop6_1_valid_bit_20 <= loop6_1_valid_bit_19;
		if (start == 1'b0 && ^(loop6_1_valid_bit_19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop6_1_valid_bit_20"); $finish; end
	end
	if (reset) begin
		loop6_1_valid_bit_20 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop6_1_valid_bit_20"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop6_1_valid_bit_21 <= loop6_1_valid_bit_20;
		if (start == 1'b0 && ^(loop6_1_valid_bit_20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop6_1_valid_bit_21"); $finish; end
	end
	if (reset) begin
		loop6_1_valid_bit_21 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop6_1_valid_bit_21"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop6_1_valid_bit_22 <= loop6_1_valid_bit_21;
		if (start == 1'b0 && ^(loop6_1_valid_bit_21) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop6_1_valid_bit_22"); $finish; end
	end
	if (reset) begin
		loop6_1_valid_bit_22 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop6_1_valid_bit_22"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop6_1_valid_bit_23 <= loop6_1_valid_bit_22;
		if (start == 1'b0 && ^(loop6_1_valid_bit_22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop6_1_valid_bit_23"); $finish; end
	end
	if (reset) begin
		loop6_1_valid_bit_23 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop6_1_valid_bit_23"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop6_1_valid_bit_24 <= loop6_1_valid_bit_23;
		if (start == 1'b0 && ^(loop6_1_valid_bit_23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop6_1_valid_bit_24"); $finish; end
	end
	if (reset) begin
		loop6_1_valid_bit_24 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop6_1_valid_bit_24"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop6_1_valid_bit_25 <= loop6_1_valid_bit_24;
		if (start == 1'b0 && ^(loop6_1_valid_bit_24) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop6_1_valid_bit_25"); $finish; end
	end
	if (reset) begin
		loop6_1_valid_bit_25 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop6_1_valid_bit_25"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop6_1_valid_bit_26 <= loop6_1_valid_bit_25;
		if (start == 1'b0 && ^(loop6_1_valid_bit_25) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop6_1_valid_bit_26"); $finish; end
	end
	if (reset) begin
		loop6_1_valid_bit_26 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop6_1_valid_bit_26"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop6_1_valid_bit_27 <= loop6_1_valid_bit_26;
		if (start == 1'b0 && ^(loop6_1_valid_bit_26) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop6_1_valid_bit_27"); $finish; end
	end
	if (reset) begin
		loop6_1_valid_bit_27 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop6_1_valid_bit_27"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop6_1_valid_bit_28 <= loop6_1_valid_bit_27;
		if (start == 1'b0 && ^(loop6_1_valid_bit_27) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop6_1_valid_bit_28"); $finish; end
	end
	if (reset) begin
		loop6_1_valid_bit_28 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop6_1_valid_bit_28"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop6_1_valid_bit_29 <= loop6_1_valid_bit_28;
		if (start == 1'b0 && ^(loop6_1_valid_bit_28) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop6_1_valid_bit_29"); $finish; end
	end
	if (reset) begin
		loop6_1_valid_bit_29 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop6_1_valid_bit_29"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop6_1_valid_bit_30 <= loop6_1_valid_bit_29;
		if (start == 1'b0 && ^(loop6_1_valid_bit_29) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop6_1_valid_bit_30"); $finish; end
	end
	if (reset) begin
		loop6_1_valid_bit_30 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop6_1_valid_bit_30"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop6_1_valid_bit_31 <= loop6_1_valid_bit_30;
		if (start == 1'b0 && ^(loop6_1_valid_bit_30) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop6_1_valid_bit_31"); $finish; end
	end
	if (reset) begin
		loop6_1_valid_bit_31 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop6_1_valid_bit_31"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop6_1_valid_bit_32 <= loop6_1_valid_bit_31;
		if (start == 1'b0 && ^(loop6_1_valid_bit_31) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop6_1_valid_bit_32"); $finish; end
	end
	if (reset) begin
		loop6_1_valid_bit_32 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop6_1_valid_bit_32"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop6_1_valid_bit_33 <= loop6_1_valid_bit_32;
		if (start == 1'b0 && ^(loop6_1_valid_bit_32) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop6_1_valid_bit_33"); $finish; end
	end
	if (reset) begin
		loop6_1_valid_bit_33 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop6_1_valid_bit_33"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop6_1_valid_bit_34 <= loop6_1_valid_bit_33;
		if (start == 1'b0 && ^(loop6_1_valid_bit_33) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop6_1_valid_bit_34"); $finish; end
	end
	if (reset) begin
		loop6_1_valid_bit_34 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop6_1_valid_bit_34"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop6_1_valid_bit_35 <= loop6_1_valid_bit_34;
		if (start == 1'b0 && ^(loop6_1_valid_bit_34) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop6_1_valid_bit_35"); $finish; end
	end
	if (reset) begin
		loop6_1_valid_bit_35 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop6_1_valid_bit_35"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop6_1_valid_bit_36 <= loop6_1_valid_bit_35;
		if (start == 1'b0 && ^(loop6_1_valid_bit_35) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop6_1_valid_bit_36"); $finish; end
	end
	if (reset) begin
		loop6_1_valid_bit_36 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop6_1_valid_bit_36"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop6_1_valid_bit_37 <= loop6_1_valid_bit_36;
		if (start == 1'b0 && ^(loop6_1_valid_bit_36) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop6_1_valid_bit_37"); $finish; end
	end
	if (reset) begin
		loop6_1_valid_bit_37 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop6_1_valid_bit_37"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop6_1_valid_bit_38 <= loop6_1_valid_bit_37;
		if (start == 1'b0 && ^(loop6_1_valid_bit_37) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop6_1_valid_bit_38"); $finish; end
	end
	if (reset) begin
		loop6_1_valid_bit_38 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop6_1_valid_bit_38"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop6_1_valid_bit_39 <= loop6_1_valid_bit_38;
		if (start == 1'b0 && ^(loop6_1_valid_bit_38) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop6_1_valid_bit_39"); $finish; end
	end
	if (reset) begin
		loop6_1_valid_bit_39 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop6_1_valid_bit_39"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop6_1_valid_bit_40 <= loop6_1_valid_bit_39;
		if (start == 1'b0 && ^(loop6_1_valid_bit_39) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop6_1_valid_bit_40"); $finish; end
	end
	if (reset) begin
		loop6_1_valid_bit_40 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop6_1_valid_bit_40"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop6_1_valid_bit_41 <= loop6_1_valid_bit_40;
		if (start == 1'b0 && ^(loop6_1_valid_bit_40) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop6_1_valid_bit_41"); $finish; end
	end
	if (reset) begin
		loop6_1_valid_bit_41 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop6_1_valid_bit_41"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop6_1_valid_bit_42 <= loop6_1_valid_bit_41;
		if (start == 1'b0 && ^(loop6_1_valid_bit_41) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop6_1_valid_bit_42"); $finish; end
	end
	if (reset) begin
		loop6_1_valid_bit_42 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop6_1_valid_bit_42"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop6_1_valid_bit_43 <= loop6_1_valid_bit_42;
		if (start == 1'b0 && ^(loop6_1_valid_bit_42) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop6_1_valid_bit_43"); $finish; end
	end
	if (reset) begin
		loop6_1_valid_bit_43 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop6_1_valid_bit_43"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop6_1_valid_bit_44 <= loop6_1_valid_bit_43;
		if (start == 1'b0 && ^(loop6_1_valid_bit_43) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop6_1_valid_bit_44"); $finish; end
	end
	if (reset) begin
		loop6_1_valid_bit_44 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop6_1_valid_bit_44"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop6_1_valid_bit_45 <= loop6_1_valid_bit_44;
		if (start == 1'b0 && ^(loop6_1_valid_bit_44) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop6_1_valid_bit_45"); $finish; end
	end
	if (reset) begin
		loop6_1_valid_bit_45 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop6_1_valid_bit_45"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop6_1_valid_bit_46 <= loop6_1_valid_bit_45;
		if (start == 1'b0 && ^(loop6_1_valid_bit_45) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop6_1_valid_bit_46"); $finish; end
	end
	if (reset) begin
		loop6_1_valid_bit_46 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop6_1_valid_bit_46"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop6_1_valid_bit_47 <= loop6_1_valid_bit_46;
		if (start == 1'b0 && ^(loop6_1_valid_bit_46) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop6_1_valid_bit_47"); $finish; end
	end
	if (reset) begin
		loop6_1_valid_bit_47 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop6_1_valid_bit_47"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop6_1_valid_bit_48 <= loop6_1_valid_bit_47;
		if (start == 1'b0 && ^(loop6_1_valid_bit_47) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop6_1_valid_bit_48"); $finish; end
	end
	if (reset) begin
		loop6_1_valid_bit_48 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop6_1_valid_bit_48"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop6_1_valid_bit_49 <= loop6_1_valid_bit_48;
		if (start == 1'b0 && ^(loop6_1_valid_bit_48) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop6_1_valid_bit_49"); $finish; end
	end
	if (reset) begin
		loop6_1_valid_bit_49 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop6_1_valid_bit_49"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop6_1_valid_bit_50 <= loop6_1_valid_bit_49;
		if (start == 1'b0 && ^(loop6_1_valid_bit_49) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop6_1_valid_bit_50"); $finish; end
	end
	if (reset) begin
		loop6_1_valid_bit_50 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop6_1_valid_bit_50"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop6_1_valid_bit_51 <= loop6_1_valid_bit_50;
		if (start == 1'b0 && ^(loop6_1_valid_bit_50) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop6_1_valid_bit_51"); $finish; end
	end
	if (reset) begin
		loop6_1_valid_bit_51 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop6_1_valid_bit_51"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop6_1_valid_bit_52 <= loop6_1_valid_bit_51;
		if (start == 1'b0 && ^(loop6_1_valid_bit_51) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop6_1_valid_bit_52"); $finish; end
	end
	if (reset) begin
		loop6_1_valid_bit_52 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop6_1_valid_bit_52"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop6_1_valid_bit_53 <= loop6_1_valid_bit_52;
		if (start == 1'b0 && ^(loop6_1_valid_bit_52) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop6_1_valid_bit_53"); $finish; end
	end
	if (reset) begin
		loop6_1_valid_bit_53 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop6_1_valid_bit_53"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop6_1_valid_bit_54 <= loop6_1_valid_bit_53;
		if (start == 1'b0 && ^(loop6_1_valid_bit_53) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop6_1_valid_bit_54"); $finish; end
	end
	if (reset) begin
		loop6_1_valid_bit_54 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop6_1_valid_bit_54"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop6_1_valid_bit_55 <= loop6_1_valid_bit_54;
		if (start == 1'b0 && ^(loop6_1_valid_bit_54) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop6_1_valid_bit_55"); $finish; end
	end
	if (reset) begin
		loop6_1_valid_bit_55 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop6_1_valid_bit_55"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop6_1_valid_bit_56 <= loop6_1_valid_bit_55;
		if (start == 1'b0 && ^(loop6_1_valid_bit_55) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop6_1_valid_bit_56"); $finish; end
	end
	if (reset) begin
		loop6_1_valid_bit_56 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop6_1_valid_bit_56"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop6_1_valid_bit_57 <= loop6_1_valid_bit_56;
		if (start == 1'b0 && ^(loop6_1_valid_bit_56) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop6_1_valid_bit_57"); $finish; end
	end
	if (reset) begin
		loop6_1_valid_bit_57 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop6_1_valid_bit_57"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop6_1_valid_bit_58 <= loop6_1_valid_bit_57;
		if (start == 1'b0 && ^(loop6_1_valid_bit_57) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop6_1_valid_bit_58"); $finish; end
	end
	if (reset) begin
		loop6_1_valid_bit_58 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop6_1_valid_bit_58"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop6_1_valid_bit_59 <= loop6_1_valid_bit_58;
		if (start == 1'b0 && ^(loop6_1_valid_bit_58) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop6_1_valid_bit_59"); $finish; end
	end
	if (reset) begin
		loop6_1_valid_bit_59 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop6_1_valid_bit_59"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop6_1_valid_bit_60 <= loop6_1_valid_bit_59;
		if (start == 1'b0 && ^(loop6_1_valid_bit_59) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop6_1_valid_bit_60"); $finish; end
	end
	if (reset) begin
		loop6_1_valid_bit_60 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop6_1_valid_bit_60"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop6_1_valid_bit_61 <= loop6_1_valid_bit_60;
		if (start == 1'b0 && ^(loop6_1_valid_bit_60) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop6_1_valid_bit_61"); $finish; end
	end
	if (reset) begin
		loop6_1_valid_bit_61 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop6_1_valid_bit_61"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop6_1_valid_bit_62 <= loop6_1_valid_bit_61;
		if (start == 1'b0 && ^(loop6_1_valid_bit_61) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop6_1_valid_bit_62"); $finish; end
	end
	if (reset) begin
		loop6_1_valid_bit_62 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop6_1_valid_bit_62"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop6_1_valid_bit_63 <= loop6_1_valid_bit_62;
		if (start == 1'b0 && ^(loop6_1_valid_bit_62) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop6_1_valid_bit_63"); $finish; end
	end
	if (reset) begin
		loop6_1_valid_bit_63 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop6_1_valid_bit_63"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop6_1_valid_bit_64 <= loop6_1_valid_bit_63;
		if (start == 1'b0 && ^(loop6_1_valid_bit_63) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop6_1_valid_bit_64"); $finish; end
	end
	if (reset) begin
		loop6_1_valid_bit_64 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop6_1_valid_bit_64"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop6_1_valid_bit_65 <= loop6_1_valid_bit_64;
		if (start == 1'b0 && ^(loop6_1_valid_bit_64) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop6_1_valid_bit_65"); $finish; end
	end
	if (reset) begin
		loop6_1_valid_bit_65 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop6_1_valid_bit_65"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop6_1_valid_bit_66 <= loop6_1_valid_bit_65;
		if (start == 1'b0 && ^(loop6_1_valid_bit_65) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop6_1_valid_bit_66"); $finish; end
	end
	if (reset) begin
		loop6_1_valid_bit_66 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop6_1_valid_bit_66"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop6_1_valid_bit_67 <= loop6_1_valid_bit_66;
		if (start == 1'b0 && ^(loop6_1_valid_bit_66) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop6_1_valid_bit_67"); $finish; end
	end
	if (reset) begin
		loop6_1_valid_bit_67 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop6_1_valid_bit_67"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop6_1_valid_bit_68 <= loop6_1_valid_bit_67;
		if (start == 1'b0 && ^(loop6_1_valid_bit_67) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop6_1_valid_bit_68"); $finish; end
	end
	if (reset) begin
		loop6_1_valid_bit_68 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop6_1_valid_bit_68"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop6_1_valid_bit_69 <= loop6_1_valid_bit_68;
		if (start == 1'b0 && ^(loop6_1_valid_bit_68) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop6_1_valid_bit_69"); $finish; end
	end
	if (reset) begin
		loop6_1_valid_bit_69 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop6_1_valid_bit_69"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop6_1_valid_bit_70 <= loop6_1_valid_bit_69;
		if (start == 1'b0 && ^(loop6_1_valid_bit_69) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop6_1_valid_bit_70"); $finish; end
	end
	if (reset) begin
		loop6_1_valid_bit_70 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop6_1_valid_bit_70"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop6_1_ii_state == 1'd0) & loop6_1_valid_bit_0))) begin
		main_1_i01_reg_stage0 <= main_1_i01;
		if (start == 1'b0 && ^(main_1_i01) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_i01_reg_stage0"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop6_1_ii_state == 1'd1) & loop6_1_valid_bit_1))) begin
		main_1_i01_reg_stage1 <= main_1_i01_reg_stage0;
		if (start == 1'b0 && ^(main_1_i01_reg_stage0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_i01_reg_stage1"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop6_1_ii_state == 1'd1) & loop6_1_valid_bit_3))) begin
		main_1_i01_reg_stage2 <= main_1_i01_reg_stage1;
		if (start == 1'b0 && ^(main_1_i01_reg_stage1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_i01_reg_stage2"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop6_1_ii_state == 1'd0) & loop6_1_valid_bit_0))) begin
		main_1_scevgep_reg_stage0 <= main_1_scevgep;
		if (start == 1'b0 && ^(main_1_scevgep) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_scevgep_reg_stage0"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop6_1_ii_state == 1'd1) & loop6_1_valid_bit_1))) begin
		main_1_scevgep_reg_stage1 <= main_1_scevgep_reg_stage0;
		if (start == 1'b0 && ^(main_1_scevgep_reg_stage0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_scevgep_reg_stage1"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop6_1_ii_state == 1'd1) & loop6_1_valid_bit_3))) begin
		main_1_scevgep_reg_stage2 <= main_1_scevgep_reg_stage1;
		if (start == 1'b0 && ^(main_1_scevgep_reg_stage1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_scevgep_reg_stage2"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop6_1_ii_state == 1'd1) & loop6_1_valid_bit_5))) begin
		main_1_scevgep_reg_stage3 <= main_1_scevgep_reg_stage2;
		if (start == 1'b0 && ^(main_1_scevgep_reg_stage2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_scevgep_reg_stage3"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop6_1_ii_state == 1'd1) & loop6_1_valid_bit_7))) begin
		main_1_scevgep_reg_stage4 <= main_1_scevgep_reg_stage3;
		if (start == 1'b0 && ^(main_1_scevgep_reg_stage3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_scevgep_reg_stage4"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop6_1_ii_state == 1'd1) & loop6_1_valid_bit_9))) begin
		main_1_scevgep_reg_stage5 <= main_1_scevgep_reg_stage4;
		if (start == 1'b0 && ^(main_1_scevgep_reg_stage4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_scevgep_reg_stage5"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop6_1_ii_state == 1'd1) & loop6_1_valid_bit_11))) begin
		main_1_scevgep_reg_stage6 <= main_1_scevgep_reg_stage5;
		if (start == 1'b0 && ^(main_1_scevgep_reg_stage5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_scevgep_reg_stage6"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop6_1_ii_state == 1'd1) & loop6_1_valid_bit_13))) begin
		main_1_scevgep_reg_stage7 <= main_1_scevgep_reg_stage6;
		if (start == 1'b0 && ^(main_1_scevgep_reg_stage6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_scevgep_reg_stage7"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop6_1_ii_state == 1'd1) & loop6_1_valid_bit_15))) begin
		main_1_scevgep_reg_stage8 <= main_1_scevgep_reg_stage7;
		if (start == 1'b0 && ^(main_1_scevgep_reg_stage7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_scevgep_reg_stage8"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop6_1_ii_state == 1'd1) & loop6_1_valid_bit_17))) begin
		main_1_scevgep_reg_stage9 <= main_1_scevgep_reg_stage8;
		if (start == 1'b0 && ^(main_1_scevgep_reg_stage8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_scevgep_reg_stage9"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop6_1_ii_state == 1'd1) & loop6_1_valid_bit_19))) begin
		main_1_scevgep_reg_stage10 <= main_1_scevgep_reg_stage9;
		if (start == 1'b0 && ^(main_1_scevgep_reg_stage9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_scevgep_reg_stage10"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop6_1_ii_state == 1'd1) & loop6_1_valid_bit_21))) begin
		main_1_scevgep_reg_stage11 <= main_1_scevgep_reg_stage10;
		if (start == 1'b0 && ^(main_1_scevgep_reg_stage10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_scevgep_reg_stage11"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop6_1_ii_state == 1'd1) & loop6_1_valid_bit_23))) begin
		main_1_scevgep_reg_stage12 <= main_1_scevgep_reg_stage11;
		if (start == 1'b0 && ^(main_1_scevgep_reg_stage11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_scevgep_reg_stage12"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop6_1_ii_state == 1'd1) & loop6_1_valid_bit_25))) begin
		main_1_scevgep_reg_stage13 <= main_1_scevgep_reg_stage12;
		if (start == 1'b0 && ^(main_1_scevgep_reg_stage12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_scevgep_reg_stage13"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop6_1_ii_state == 1'd1) & loop6_1_valid_bit_27))) begin
		main_1_scevgep_reg_stage14 <= main_1_scevgep_reg_stage13;
		if (start == 1'b0 && ^(main_1_scevgep_reg_stage13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_scevgep_reg_stage14"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop6_1_ii_state == 1'd1) & loop6_1_valid_bit_29))) begin
		main_1_scevgep_reg_stage15 <= main_1_scevgep_reg_stage14;
		if (start == 1'b0 && ^(main_1_scevgep_reg_stage14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_scevgep_reg_stage15"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop6_1_ii_state == 1'd1) & loop6_1_valid_bit_31))) begin
		main_1_scevgep_reg_stage16 <= main_1_scevgep_reg_stage15;
		if (start == 1'b0 && ^(main_1_scevgep_reg_stage15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_scevgep_reg_stage16"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop6_1_ii_state == 1'd1) & loop6_1_valid_bit_33))) begin
		main_1_scevgep_reg_stage17 <= main_1_scevgep_reg_stage16;
		if (start == 1'b0 && ^(main_1_scevgep_reg_stage16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_scevgep_reg_stage17"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop6_1_ii_state == 1'd1) & loop6_1_valid_bit_35))) begin
		main_1_scevgep_reg_stage18 <= main_1_scevgep_reg_stage17;
		if (start == 1'b0 && ^(main_1_scevgep_reg_stage17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_scevgep_reg_stage18"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop6_1_ii_state == 1'd1) & loop6_1_valid_bit_37))) begin
		main_1_scevgep_reg_stage19 <= main_1_scevgep_reg_stage18;
		if (start == 1'b0 && ^(main_1_scevgep_reg_stage18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_scevgep_reg_stage19"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop6_1_ii_state == 1'd1) & loop6_1_valid_bit_39))) begin
		main_1_scevgep_reg_stage20 <= main_1_scevgep_reg_stage19;
		if (start == 1'b0 && ^(main_1_scevgep_reg_stage19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_scevgep_reg_stage20"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop6_1_ii_state == 1'd1) & loop6_1_valid_bit_41))) begin
		main_1_scevgep_reg_stage21 <= main_1_scevgep_reg_stage20;
		if (start == 1'b0 && ^(main_1_scevgep_reg_stage20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_scevgep_reg_stage21"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop6_1_ii_state == 1'd1) & loop6_1_valid_bit_43))) begin
		main_1_scevgep_reg_stage22 <= main_1_scevgep_reg_stage21;
		if (start == 1'b0 && ^(main_1_scevgep_reg_stage21) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_scevgep_reg_stage22"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop6_1_ii_state == 1'd1) & loop6_1_valid_bit_45))) begin
		main_1_scevgep_reg_stage23 <= main_1_scevgep_reg_stage22;
		if (start == 1'b0 && ^(main_1_scevgep_reg_stage22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_scevgep_reg_stage23"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop6_1_ii_state == 1'd1) & loop6_1_valid_bit_47))) begin
		main_1_scevgep_reg_stage24 <= main_1_scevgep_reg_stage23;
		if (start == 1'b0 && ^(main_1_scevgep_reg_stage23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_scevgep_reg_stage24"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop6_1_ii_state == 1'd1) & loop6_1_valid_bit_49))) begin
		main_1_scevgep_reg_stage25 <= main_1_scevgep_reg_stage24;
		if (start == 1'b0 && ^(main_1_scevgep_reg_stage24) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_scevgep_reg_stage25"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop6_1_ii_state == 1'd1) & loop6_1_valid_bit_51))) begin
		main_1_scevgep_reg_stage26 <= main_1_scevgep_reg_stage25;
		if (start == 1'b0 && ^(main_1_scevgep_reg_stage25) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_scevgep_reg_stage26"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop6_1_ii_state == 1'd1) & loop6_1_valid_bit_53))) begin
		main_1_scevgep_reg_stage27 <= main_1_scevgep_reg_stage26;
		if (start == 1'b0 && ^(main_1_scevgep_reg_stage26) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_scevgep_reg_stage27"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop6_1_ii_state == 1'd1) & loop6_1_valid_bit_55))) begin
		main_1_scevgep_reg_stage28 <= main_1_scevgep_reg_stage27;
		if (start == 1'b0 && ^(main_1_scevgep_reg_stage27) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_scevgep_reg_stage28"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop6_1_ii_state == 1'd1) & loop6_1_valid_bit_57))) begin
		main_1_scevgep_reg_stage29 <= main_1_scevgep_reg_stage28;
		if (start == 1'b0 && ^(main_1_scevgep_reg_stage28) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_scevgep_reg_stage29"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop6_1_ii_state == 1'd1) & loop6_1_valid_bit_59))) begin
		main_1_scevgep_reg_stage30 <= main_1_scevgep_reg_stage29;
		if (start == 1'b0 && ^(main_1_scevgep_reg_stage29) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_scevgep_reg_stage30"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop6_1_ii_state == 1'd1) & loop6_1_valid_bit_61))) begin
		main_1_scevgep_reg_stage31 <= main_1_scevgep_reg_stage30;
		if (start == 1'b0 && ^(main_1_scevgep_reg_stage30) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_scevgep_reg_stage31"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop6_1_ii_state == 1'd1) & loop6_1_valid_bit_63))) begin
		main_1_scevgep_reg_stage32 <= main_1_scevgep_reg_stage31;
		if (start == 1'b0 && ^(main_1_scevgep_reg_stage31) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_scevgep_reg_stage32"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop6_1_ii_state == 1'd1) & loop6_1_valid_bit_65))) begin
		main_1_scevgep_reg_stage33 <= main_1_scevgep_reg_stage32;
		if (start == 1'b0 && ^(main_1_scevgep_reg_stage32) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_scevgep_reg_stage33"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop6_1_ii_state == 1'd1) & loop6_1_valid_bit_67))) begin
		main_1_scevgep_reg_stage34 <= main_1_scevgep_reg_stage33;
		if (start == 1'b0 && ^(main_1_scevgep_reg_stage33) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_scevgep_reg_stage34"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop6_1_ii_state == 1'd0) & loop6_1_valid_bit_2))) begin
		main_1_2_reg_stage1 <= main_1_2;
		if (start == 1'b0 && ^(main_1_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_2_reg_stage1"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop6_1_ii_state == 1'd1) & loop6_1_valid_bit_3))) begin
		main_1_2_reg_stage2 <= main_1_2_reg_stage1;
		if (start == 1'b0 && ^(main_1_2_reg_stage1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_2_reg_stage2"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop6_1_ii_state == 1'd1) & loop6_1_valid_bit_5))) begin
		main_1_2_reg_stage3 <= main_1_2_reg_stage2;
		if (start == 1'b0 && ^(main_1_2_reg_stage2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_2_reg_stage3"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop6_1_ii_state == 1'd1) & loop6_1_valid_bit_7))) begin
		main_1_2_reg_stage4 <= main_1_2_reg_stage3;
		if (start == 1'b0 && ^(main_1_2_reg_stage3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_2_reg_stage4"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop6_1_ii_state == 1'd1) & loop6_1_valid_bit_9))) begin
		main_1_2_reg_stage5 <= main_1_2_reg_stage4;
		if (start == 1'b0 && ^(main_1_2_reg_stage4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_2_reg_stage5"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop6_1_ii_state == 1'd1) & loop6_1_valid_bit_11))) begin
		main_1_2_reg_stage6 <= main_1_2_reg_stage5;
		if (start == 1'b0 && ^(main_1_2_reg_stage5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_2_reg_stage6"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop6_1_ii_state == 1'd1) & loop6_1_valid_bit_13))) begin
		main_1_2_reg_stage7 <= main_1_2_reg_stage6;
		if (start == 1'b0 && ^(main_1_2_reg_stage6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_2_reg_stage7"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop6_1_ii_state == 1'd1) & loop6_1_valid_bit_15))) begin
		main_1_2_reg_stage8 <= main_1_2_reg_stage7;
		if (start == 1'b0 && ^(main_1_2_reg_stage7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_2_reg_stage8"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop6_1_ii_state == 1'd1) & loop6_1_valid_bit_17))) begin
		main_1_2_reg_stage9 <= main_1_2_reg_stage8;
		if (start == 1'b0 && ^(main_1_2_reg_stage8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_2_reg_stage9"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop6_1_ii_state == 1'd1) & loop6_1_valid_bit_19))) begin
		main_1_2_reg_stage10 <= main_1_2_reg_stage9;
		if (start == 1'b0 && ^(main_1_2_reg_stage9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_2_reg_stage10"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop6_1_ii_state == 1'd1) & loop6_1_valid_bit_21))) begin
		main_1_2_reg_stage11 <= main_1_2_reg_stage10;
		if (start == 1'b0 && ^(main_1_2_reg_stage10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_2_reg_stage11"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop6_1_ii_state == 1'd1) & loop6_1_valid_bit_23))) begin
		main_1_2_reg_stage12 <= main_1_2_reg_stage11;
		if (start == 1'b0 && ^(main_1_2_reg_stage11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_2_reg_stage12"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop6_1_ii_state == 1'd1) & loop6_1_valid_bit_25))) begin
		main_1_2_reg_stage13 <= main_1_2_reg_stage12;
		if (start == 1'b0 && ^(main_1_2_reg_stage12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_2_reg_stage13"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop6_1_ii_state == 1'd1) & loop6_1_valid_bit_27))) begin
		main_1_2_reg_stage14 <= main_1_2_reg_stage13;
		if (start == 1'b0 && ^(main_1_2_reg_stage13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_2_reg_stage14"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop6_1_ii_state == 1'd1) & loop6_1_valid_bit_29))) begin
		main_1_2_reg_stage15 <= main_1_2_reg_stage14;
		if (start == 1'b0 && ^(main_1_2_reg_stage14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_2_reg_stage15"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop6_1_ii_state == 1'd1) & loop6_1_valid_bit_31))) begin
		main_1_2_reg_stage16 <= main_1_2_reg_stage15;
		if (start == 1'b0 && ^(main_1_2_reg_stage15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_2_reg_stage16"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop6_1_ii_state == 1'd1) & loop6_1_valid_bit_33))) begin
		main_1_2_reg_stage17 <= main_1_2_reg_stage16;
		if (start == 1'b0 && ^(main_1_2_reg_stage16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_2_reg_stage17"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop6_1_ii_state == 1'd1) & loop6_1_valid_bit_35))) begin
		main_1_2_reg_stage18 <= main_1_2_reg_stage17;
		if (start == 1'b0 && ^(main_1_2_reg_stage17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_2_reg_stage18"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop6_1_ii_state == 1'd1) & loop6_1_valid_bit_3))) begin
		main_1_3_reg_stage2 <= main_1_3;
		if (start == 1'b0 && ^(main_1_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_3_reg_stage2"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop6_1_ii_state == 1'd0) & loop6_1_valid_bit_68))) begin
		main_1_5_reg_stage34 <= main_1_5;
		if (start == 1'b0 && ^(main_1_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_5_reg_stage34"); $finish; end
	end
end
always @(*) begin
	loop6_1_pipeline_exit_cond = (loop6_1_i_stage0 == 98);
end
always @(*) begin
	loop6_1_pipeline_finish = ((memory_controller_waitrequest == 1'd0) & (loop6_1_epilogue & (~(loop6_1_valid_bit_69) & loop6_1_valid_bit_70)));
end
always @(*) begin
	/* main: %1*/
	/*   %4 = sdiv i32 %i.01, %3, !legup.pipeline.start_time !10, !legup.pipeline.avail_time !11, !legup.pipeline.stage !8
	start_time: 4 avail_time: 36 stage: 2 II: 2 start_ii_state = 4 % 2 = 0 avail_ii_state = 36 % 2 = 0*/
		main_signed_divide_32_0_op0 = main_1_i01_reg_stage2;
end
always @(*) begin
	/* main: %1*/
	/*   %4 = sdiv i32 %i.01, %3, !legup.pipeline.start_time !10, !legup.pipeline.avail_time !11, !legup.pipeline.stage !8
	start_time: 4 avail_time: 36 stage: 2 II: 2 start_ii_state = 4 % 2 = 0 avail_ii_state = 36 % 2 = 0*/
		main_signed_divide_32_0_op1 = main_1_3_reg_stage2;
end
always @(*) begin
	lpm_divide_main_1_4_en = (memory_controller_waitrequest == 1'd0);
end
always @(*) begin
	lpm_divide_main_1_4_out = lpm_divide_main_1_4_temp_out;
end
always @(*) begin
	main_signed_divide_32_0 = lpm_divide_main_1_4_out;
end
always @(*) begin
	/* main: %1*/
	/*   %5 = sdiv i32 %2, %4, !legup.pipeline.start_time !11, !legup.pipeline.avail_time !12, !legup.pipeline.stage !13
	start_time: 36 avail_time: 68 stage: 18 II: 2 start_ii_state = 36 % 2 = 0 avail_ii_state = 68 % 2 = 0*/
		main_signed_divide_32_1_op0 = main_1_2_reg_stage18;
end
always @(*) begin
	/* main: %1*/
	/*   %5 = sdiv i32 %2, %4, !legup.pipeline.start_time !11, !legup.pipeline.avail_time !12, !legup.pipeline.stage !13
	start_time: 36 avail_time: 68 stage: 18 II: 2 start_ii_state = 36 % 2 = 0 avail_ii_state = 68 % 2 = 0*/
		main_signed_divide_32_1_op1 = main_1_4;
end
always @(*) begin
	lpm_divide_main_1_5_en = (memory_controller_waitrequest == 1'd0);
end
always @(*) begin
	lpm_divide_main_1_5_out = lpm_divide_main_1_5_temp_out;
end
always @(*) begin
	main_signed_divide_32_1 = lpm_divide_main_1_5_out;
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		finish <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
	/* main: %6*/
	/*   ret i32 0*/
	if ((cur_state == LEGUP_F_main_BB__6_2)) begin
		finish <= (memory_controller_waitrequest == 1'd0);
		if (start == 1'b0 && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
end
always @(*) begin
	memory_controller_enable_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_enable_a = 1'd0;
	end
	/* main: %1*/
	/*   %2 = load i32* %scevgep, align 4, !tbaa !4, !legup.pipeline.start_time !3, !legup.pipeline.avail_time !8, !legup.pipeline.stage !3
	start_time: 0 avail_time: 2 stage: 0 II: 2 start_ii_state = 0 % 2 = 0 avail_ii_state = 2 % 2 = 0*/
	if (((loop6_1_ii_state == 1'd0) & loop6_1_valid_bit_0)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %1*/
	/*   store i32 %5, i32* %scevgep, align 4, !tbaa !4, !legup.pipeline.start_time !14, !legup.pipeline.avail_time !15, !legup.pipeline.stage !16
	start_time: 69 avail_time: 70 stage: 34 II: 2 start_ii_state = 69 % 2 = 1 avail_ii_state = 70 % 2 = 0*/
	if (((loop6_1_ii_state == 1'd1) & loop6_1_valid_bit_69)) begin
		memory_controller_enable_a = 1'd1;
	end
end
always @(*) begin
	memory_controller_address_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_address_a = 1'd0;
	end
	/* main: %1*/
	/*   %2 = load i32* %scevgep, align 4, !tbaa !4, !legup.pipeline.start_time !3, !legup.pipeline.avail_time !8, !legup.pipeline.stage !3
	start_time: 0 avail_time: 2 stage: 0 II: 2 start_ii_state = 0 % 2 = 0 avail_ii_state = 2 % 2 = 0*/
	if (((loop6_1_ii_state == 1'd0) & loop6_1_valid_bit_0)) begin
		memory_controller_address_a = main_1_scevgep;
	end
	/* main: %1*/
	/*   store i32 %5, i32* %scevgep, align 4, !tbaa !4, !legup.pipeline.start_time !14, !legup.pipeline.avail_time !15, !legup.pipeline.stage !16
	start_time: 69 avail_time: 70 stage: 34 II: 2 start_ii_state = 69 % 2 = 1 avail_ii_state = 70 % 2 = 0*/
	if (((loop6_1_ii_state == 1'd1) & loop6_1_valid_bit_69)) begin
		memory_controller_address_a = main_1_scevgep_reg_stage34;
	end
end
always @(*) begin
	memory_controller_write_enable_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %1*/
	/*   %2 = load i32* %scevgep, align 4, !tbaa !4, !legup.pipeline.start_time !3, !legup.pipeline.avail_time !8, !legup.pipeline.stage !3
	start_time: 0 avail_time: 2 stage: 0 II: 2 start_ii_state = 0 % 2 = 0 avail_ii_state = 2 % 2 = 0*/
	if (((loop6_1_ii_state == 1'd0) & loop6_1_valid_bit_0)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %1*/
	/*   store i32 %5, i32* %scevgep, align 4, !tbaa !4, !legup.pipeline.start_time !14, !legup.pipeline.avail_time !15, !legup.pipeline.stage !16
	start_time: 69 avail_time: 70 stage: 34 II: 2 start_ii_state = 69 % 2 = 1 avail_ii_state = 70 % 2 = 0*/
	if (((loop6_1_ii_state == 1'd1) & loop6_1_valid_bit_69)) begin
		memory_controller_write_enable_a = 1'd1;
	end
end
always @(*) begin
	memory_controller_in_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_in_a = 1'd0;
	end
	/* main: %1*/
	/*   store i32 %5, i32* %scevgep, align 4, !tbaa !4, !legup.pipeline.start_time !14, !legup.pipeline.avail_time !15, !legup.pipeline.stage !16
	start_time: 69 avail_time: 70 stage: 34 II: 2 start_ii_state = 69 % 2 = 1 avail_ii_state = 70 % 2 = 0*/
	if (((loop6_1_ii_state == 1'd1) & loop6_1_valid_bit_69)) begin
		memory_controller_in_a = main_1_5_reg_stage34;
	end
end
always @(*) begin
	memory_controller_size_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_size_a = 1'd0;
	end
	/* main: %1*/
	/*   %2 = load i32* %scevgep, align 4, !tbaa !4, !legup.pipeline.start_time !3, !legup.pipeline.avail_time !8, !legup.pipeline.stage !3
	start_time: 0 avail_time: 2 stage: 0 II: 2 start_ii_state = 0 % 2 = 0 avail_ii_state = 2 % 2 = 0*/
	if (((loop6_1_ii_state == 1'd0) & loop6_1_valid_bit_0)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %1*/
	/*   store i32 %5, i32* %scevgep, align 4, !tbaa !4, !legup.pipeline.start_time !14, !legup.pipeline.avail_time !15, !legup.pipeline.stage !16
	start_time: 69 avail_time: 70 stage: 34 II: 2 start_ii_state = 69 % 2 = 1 avail_ii_state = 70 % 2 = 0*/
	if (((loop6_1_ii_state == 1'd1) & loop6_1_valid_bit_69)) begin
		memory_controller_size_a = 2'd2;
	end
end
always @(*) begin
	memory_controller_enable_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_enable_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_address_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_address_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_write_enable_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_write_enable_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_in_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_in_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_size_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_size_b = 1'd0;
	end
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		return_val <= 0;
		if (start == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
	end
	/* main: %6*/
	/*   ret i32 0*/
	if ((cur_state == LEGUP_F_main_BB__6_2)) begin
		return_val <= 32'd0;
		if (start == 1'b0 && ^(32'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
	end
end

endmodule 
module ram_dual_port
(
	clk,
	clken,
	address_a,
	address_b,
	wren_a,
	wren_b,
	data_a,
	data_b,
	byteena_a,
	byteena_b,
	q_a,
	q_b
);

parameter  width_a = 1'd0;
parameter  width_b = 1'd0;
parameter  widthad_a = 1'd0;
parameter  widthad_b = 1'd0;
parameter  numwords_a = 1'd0;
parameter  numwords_b = 1'd0;
parameter  init_file = "UNUSED.mif";
parameter  width_be_a = 1'd0;
parameter  width_be_b = 1'd0;
parameter  latency = 1;

input  clk;
input  clken;
input [(widthad_a-1):0] address_a;
input [(widthad_b-1):0] address_b;
output wire [(width_a-1):0] q_a;
output wire [(width_b-1):0] q_b;
reg [(width_a-1):0] q_a_wire;
reg [(width_b-1):0] q_b_wire;
input  wren_a;
input  wren_b;
input [(width_a-1):0] data_a;
input [(width_b-1):0] data_b;
// byte enable is unsupported by inferred RAMs
input [width_be_a-1:0] byteena_a;
input [width_be_b-1:0] byteena_b;

(* ramstyle = "no_rw_check", ram_init_file = init_file *) reg [width_a-1:0] ram[numwords_a-1:0];

/* synthesis translate_off */
integer i;
ALTERA_MF_MEMORY_INITIALIZATION mem ();
reg [8*256:1] ram_ver_file;
initial begin
	if (init_file == "UNUSED.mif")
    begin
		for (i = 0; i < numwords_a; i = i + 1)
			ram[i] = 0;
    end
	else
    begin
        // modelsim can't read .mif files directly. So use Altera function to
        // convert them to .ver files
        mem.convert_to_ver_file(init_file, width_a, ram_ver_file);
        $readmemh(ram_ver_file, ram);
    end
end
/* synthesis translate_on */

always @ (posedge clk)
if (clken)
begin // Port A
if (wren_a)
begin
    ram[address_a] <= data_a;
    q_a_wire <= {width_a{1'bX}};
end
else
    q_a_wire <= ram[address_a];
end
always @ (posedge clk)
if (clken)
begin // Port b
if (wren_b)
begin
    ram[address_b] <= data_b;
    q_b_wire <= {width_b{1'bX}};
end
else
    q_b_wire <= ram[address_b];
end



integer j;
reg [(width_a-1):0] q_a_reg[latency:1], q_b_reg[latency:1];

always @(*)
begin
   q_a_reg[1] <= q_a_wire;
   q_b_reg[1] <= q_b_wire;
end

always @(posedge clk)
if (clken)
begin
   for (j = 1; j < latency; j=j+1)
   begin
       q_a_reg[j+1] <= q_a_reg[j];
       q_b_reg[j+1] <= q_b_reg[j];
   end
end

assign q_a = (clken) ? q_a_reg[latency] : 0;
assign q_b = (clken) ? q_b_reg[latency] : 0;


endmodule
module rom_dual_port
(
	clk,
	clken,
	address_a,
	address_b,
	q_a,
	q_b
);

parameter  width_a = 1'd0;
parameter  width_b = 1'd0;
parameter  widthad_a = 1'd0;
parameter  widthad_b = 1'd0;
parameter  numwords_a = 1'd0;
parameter  numwords_b = 1'd0;
parameter  init_file = "UNUSED.mif";
parameter  latency = 1;

input  clk;
input  clken;
input [(widthad_a-1):0] address_a;
input [(widthad_b-1):0] address_b;
output wire [(width_a-1):0] q_a;
output wire [(width_b-1):0] q_b;
reg [(width_a-1):0] q_a_wire;
reg [(width_b-1):0] q_b_wire;

(* ramstyle = "no_rw_check", ram_init_file = init_file *) reg [width_a-1:0] ram[numwords_a-1:0];

/* synthesis translate_off */
integer i;
ALTERA_MF_MEMORY_INITIALIZATION mem ();
reg [8*256:1] ram_ver_file;
initial begin
	if (init_file == "UNUSED.mif")
    begin
		for (i = 0; i < numwords_a; i = i + 1)
			ram[i] = 0;
    end
	else
    begin
        // modelsim can't read .mif files directly. So use Altera function to
        // convert them to .ver files
        mem.convert_to_ver_file(init_file, width_a, ram_ver_file);
        $readmemh(ram_ver_file, ram);
    end
end
/* synthesis translate_on */

always @ (posedge clk)
if (clken)
begin
    q_a_wire <= ram[address_a];
    q_b_wire <= ram[address_b];
end



integer j;
reg [(width_a-1):0] q_a_reg[latency:1], q_b_reg[latency:1];

always @(*)
begin
   q_a_reg[1] <= q_a_wire;
   q_b_reg[1] <= q_b_wire;
end

always @(posedge clk)
if (clken)
begin
   for (j = 1; j < latency; j=j+1)
   begin
       q_a_reg[j+1] <= q_a_reg[j];
       q_b_reg[j+1] <= q_b_reg[j];
   end
end

assign q_a = (clken) ? q_a_reg[latency] : 0;
assign q_b = (clken) ? q_b_reg[latency] : 0;


endmodule
// Adding code from verilog file: /home/leandro/myLegUp/4.0/examples/../boards/CycloneII/DE2/top.v


module de2 (
	    CLOCK_50,
	    KEY,
	    SW,
	    HEX0,
	    HEX1,
	    HEX2,
	    HEX3,
	    HEX4,
	    HEX5,
	    HEX6,
	    HEX7,
	    LEDG,
		UART_RXD,
		UART_TXD

	    );

   input CLOCK_50;
   input [3:0] KEY;
   input [17:0] SW;
   output [6:0] HEX0, HEX1,  HEX2,  HEX3,  HEX4,  HEX5,  HEX6,  HEX7;
   reg [6:0] 	hex0, hex1, hex2, hex3, hex4, hex5, hex6, hex7;
   

   output [7:0] LEDG;
    input UART_RXD;
    output UART_TXD;    
	wire clk = CLOCK_50;
	wire go = ~KEY[1];



   wire 	reset = ~KEY[0];
   wire 	start;
   wire [31:0] 	return_val;
   reg  [31:0] 	return_val_reg;
   wire 	finish;
   wire [3:0]	state;

   hex_digits h7( .x(hex7), .hex_LEDs(HEX7));
   hex_digits h6( .x(hex6), .hex_LEDs(HEX6));
   hex_digits h5( .x(hex5), .hex_LEDs(HEX5));
   hex_digits h4( .x(hex4), .hex_LEDs(HEX4));
   hex_digits h3( .x(hex3), .hex_LEDs(HEX3));
   hex_digits h2( .x(hex2), .hex_LEDs(HEX2));
   hex_digits h1( .x(hex1), .hex_LEDs(HEX1));
   hex_digits h0( .x(hex0), .hex_LEDs(HEX0));
   
	always @ (*) begin
		hex7 <= return_val_reg[31:28];
		hex6 <= return_val_reg[27:24];
		hex5 <= return_val_reg[23:20];
		hex4 <= return_val_reg[19:16];
		hex3 <= return_val_reg[15:12];
		hex2 <= return_val_reg[11:8];
		hex1 <= return_val_reg[7:4];
		hex0 <= return_val_reg[3:0];
	end
assign UART_TXD = 1'b0;

    parameter s_WAIT = 3'b001, s_START = 3'b010, s_EXE = 3'b011,
                s_DONE = 3'b100;

    // state registers
    reg [3:0] y_Q, Y_D;

    assign LEDG[3:0] = y_Q;

    // next state
    always @(*)
    begin
        case (y_Q)
            s_WAIT: if (go) Y_D = s_START; else Y_D = y_Q;

            s_START: Y_D = s_EXE;

            s_EXE: if (!finish) Y_D = s_EXE; else Y_D = s_DONE;

            s_DONE: Y_D = s_DONE;

            default: Y_D = 3'bxxx;
        endcase
    end

    // current state
    always @(posedge clk)
    begin
        if (reset) // synchronous clear
            y_Q <= s_WAIT;
        else
            y_Q <= Y_D;
    end

    always @(posedge clk)
        if (y_Q == s_EXE && finish)
            return_val_reg <= return_val;
        else if (y_Q == s_DONE)
            return_val_reg <= return_val_reg;
        else
            return_val_reg <= 0;


    assign start = (y_Q == s_START);

   
   top top_inst (
      .clk (clk),
      .reset (reset),
      .finish (finish),
      .return_val (return_val),
        .start (start)

    );

endmodule

// Adding code from verilog file: /home/leandro/myLegUp/4.0/examples/../boards/StratixIV/DE4/top.v


module de4 ( 
    	     OSC_50_BANK2, 
             BUTTON, 
             LED, 
    	     SEG0_D, 
    	     SEG1_D 
	     ); 
   input OSC_50_BANK2; 
   input [1:0] BUTTON; 
   output [6:0] SEG0_D; 
   output [6:0] SEG1_D; 
   output [7:0] LED; 
   
   de2 de2_inst ( 
		  .CLOCK_50 (OSC_50_BANK2), 
		  .LEDG (LED), 
		  .KEY (BUTTON), 
		  .SW (), 
		  .HEX0 (SEG0_D), 
		  .HEX1 (SEG1_D), 
		  .HEX2 (), 
		  .HEX3 (), 
		  .HEX4 (), 
		  .HEX5 (), 
		  .HEX6 (), 
		  .HEX7 () 
		  ); 
   
endmodule
// Adding code from verilog file: /home/leandro/myLegUp/4.0/examples/../boards/Virtex6/ML605/top.v


module ML605 (
       USER_CLOCK,
	    KEY,
	    SW,	    
       LED,
       LEDG,
		UART_RXD,
		UART_TXD

	    );

   input USER_CLOCK;
   input [4:0] KEY;
   input [7:0] SW;
   output [7:0] LED;
   output [7:0] LEDG;
   wire CLOCK_50;

    input UART_RXD;
    output UART_TXD;    
	wire clk = CLOCK_50;
	wire go = ~KEY[1];



   wire 	reset = ~KEY[0];
   wire 	start;
   wire [31:0] 	return_val;
   reg  [31:0] 	return_val_reg;
   wire 	finish;
   wire [3:0]	state;
   
   reg [6:0]   hex0, hex1, hex2, hex3, hex4, hex5, hex6, hex7;

   assign CLOCK_50 = USER_CLOCK;
   assign LED = 0;
   
	always @ (*) begin
		hex7 <= return_val_reg[31:28];
		hex6 <= return_val_reg[27:24];
		hex5 <= return_val_reg[23:20];
		hex4 <= return_val_reg[19:16];
		hex3 <= return_val_reg[15:12];
		hex2 <= return_val_reg[11:8];
		hex1 <= return_val_reg[7:4];
		hex0 <= return_val_reg[3:0];
	end
assign UART_TXD = 1'b0;

    parameter s_WAIT = 3'b001, s_START = 3'b010, s_EXE = 3'b011,
                s_DONE = 3'b100;

    // state registers
    reg [3:0] y_Q, Y_D;

    assign LEDG[3:0] = y_Q;

    // next state
    always @(*)
    begin
        case (y_Q)
            s_WAIT: if (go) Y_D = s_START; else Y_D = y_Q;

            s_START: Y_D = s_EXE;

            s_EXE: if (!finish) Y_D = s_EXE; else Y_D = s_DONE;

            s_DONE: Y_D = s_DONE;

            default: Y_D = 3'bxxx;
        endcase
    end

    // current state
    always @(posedge clk)
    begin
        if (reset) // synchronous clear
            y_Q <= s_WAIT;
        else
            y_Q <= Y_D;
    end

    always @(posedge clk)
        if (y_Q == s_EXE && finish)
            return_val_reg <= return_val;
        else if (y_Q == s_DONE)
            return_val_reg <= return_val_reg;
        else
            return_val_reg <= 0;


    assign start = (y_Q == s_START);

   
   top top_inst (
      .clk (clk),
      .reset (reset),
      .finish (finish),
      .return_val (return_val),
        .start (start)

    );

   

endmodule

module circuit_start_control (
    go,
    control_key
);
    input control_key;
    output go;
    assign go = control_key;
endmodule
module hex_digits(x, hex_LEDs);
    input [3:0] x;
    output [6:0] hex_LEDs;
    
    assign hex_LEDs[0] = (~x[3] & ~x[2] & ~x[1] & x[0]) |
                            (~x[3] & x[2] & ~x[1] & ~x[0]) |
                            (x[3] & x[2] & ~x[1] & x[0]) |
                            (x[3] & ~x[2] & x[1] & x[0]);
    assign hex_LEDs[1] = (~x[3] & x[2] & ~x[1] & x[0]) |
                            (x[3] & x[1] & x[0]) |
                            (x[3] & x[2] & ~x[0]) |
                            (x[2] & x[1] & ~x[0]);
    assign hex_LEDs[2] = (x[3] & x[2] & ~x[0]) |
                            (x[3] & x[2] & x[1]) |
                            (~x[3] & ~x[2] & x[1] & ~x[0]);
    assign hex_LEDs[3] = (~x[3] & ~x[2] & ~x[1] & x[0]) | 
                            (~x[3] & x[2] & ~x[1] & ~x[0]) | 
                            (x[2] & x[1] & x[0]) | 
                            (x[3] & ~x[2] & x[1] & ~x[0]);
    assign hex_LEDs[4] = (~x[3] & x[0]) |
                            (~x[3] & x[2] & ~x[1]) |
                            (~x[2] & ~x[1] & x[0]);
    assign hex_LEDs[5] = (~x[3] & ~x[2] & x[0]) | 
                            (~x[3] & ~x[2] & x[1]) | 
                            (~x[3] & x[1] & x[0]) | 
                            (x[3] & x[2] & ~x[1] & x[0]);
    assign hex_LEDs[6] = (~x[3] & ~x[2] & ~x[1]) | 
                            (x[3] & x[2] & ~x[1] & ~x[0]) | 
                            (~x[3] & x[2] & x[1] & x[0]);
    
endmodule
`timescale 1 ns / 1 ns
module main_tb
(
);

reg  clk;
reg  reset;
reg  start;
reg  waitrequest;
wire [31:0] return_val;
wire  finish;


top top_inst (
	.clk (clk),
	.reset (reset),
	.start (start),
	.waitrequest (waitrequest),
	.finish (finish),
	.return_val (return_val)
);




initial 
    clk = 0;
always @(clk)
    clk <= #10 ~clk;

initial begin
//$monitor("At t=%t clk=%b %b %b %b %d", $time, clk, reset, start, finish, return_val);
@(negedge clk);
reset <= 1;
@(negedge clk);
reset <= 0;
start <= 1;
@(negedge clk);
start <= 0;
end

always@(finish) begin
    if (finish == 1) begin
        $display("At t=%t clk=%b finish=%b return_val=%d", $time, clk, finish, return_val);
        $display("Cycles: %d", ($time-50)/20);
        $finish;
    end
end

initial begin
waitrequest <= 1;
@(negedge clk);
@(negedge clk);
waitrequest <= 0;
end


endmodule 
