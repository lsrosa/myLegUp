//----------------------------------------------------------------------------//
// Generated by LegUp High-Level Synthesis Tool Version 4.0 (http://legup.org)
// Compiled: Mon May 14 17:19:25 2018
// University of Toronto
// For research and academic purposes only. Commercial use is prohibited.
// Please send bugs to: legup@eecg.toronto.edu
// Date: Thu May 24 13:20:34 2018
//----------------------------------------------------------------------------//

`define MEMORY_CONTROLLER_ADDR_SIZE 32
`define MEMORY_CONTROLLER_DATA_SIZE 64
// Number of RAM elements: 4
`define MEMORY_CONTROLLER_TAG_SIZE 9
// @a1 = internal global [12 x i32] [i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12], align 4
`define TAG_g_a1 `MEMORY_CONTROLLER_TAG_SIZE'd3
`define TAG_g_a1_a {`TAG_g_a1, 23'd0}
// @a2 = internal global [12 x i32] [i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12], align 4
`define TAG_g_a2 `MEMORY_CONTROLLER_TAG_SIZE'd4
`define TAG_g_a2_a {`TAG_g_a2, 23'd0}
// @array = internal global [12 x i32] [i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12], align 4
`define TAG_g_array `MEMORY_CONTROLLER_TAG_SIZE'd2
// @array2 = internal global [12 x i32] zeroinitializer, align 4
`define TAG_g_array2 `MEMORY_CONTROLLER_TAG_SIZE'd5
`define TAG_g_array2_a {`TAG_g_array2, 23'd0}
`define TAG_g_array_a {`TAG_g_array, 23'd0}

// Turn off warning 'ignoring unsupported system task'
// altera message_off 10175

`timescale 1 ns / 1 ns
module top
	(
		clk,
		reset,
		start,
		finish,
		waitrequest,
		return_val
	);
input clk;
input reset;
input start;
output wire finish;
input waitrequest;
output wire [31:0] return_val;
wire memory_controller_waitrequest;
wire memory_controller_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
wire memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
wire [1:0] memory_controller_size_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;

wire memory_controller_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
wire memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
wire [1:0] memory_controller_size_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;

/* synthesis translate_off */
assign memory_controller_waitrequest = waitrequest;
/* synthesis translate_on */

memory_controller memory_controller_inst (
	.clk( clk ),
	.memory_controller_enable_a( memory_controller_enable_a ),
	.memory_controller_enable_b( memory_controller_enable_b ),
	.memory_controller_address_a( memory_controller_address_a ),
	.memory_controller_address_b( memory_controller_address_b ),
	.memory_controller_write_enable_a( memory_controller_write_enable_a ),
	.memory_controller_write_enable_b( memory_controller_write_enable_b ),
	.memory_controller_in_a( memory_controller_in_a ),
	.memory_controller_in_b( memory_controller_in_b ),
	.memory_controller_size_a( memory_controller_size_a ),
	.memory_controller_size_b( memory_controller_size_b ),
	.memory_controller_waitrequest( memory_controller_waitrequest ),
	.memory_controller_out_reg_a( memory_controller_out_a ),
	.memory_controller_out_reg_b( memory_controller_out_b )
);

main main_inst(
	.clk( clk ),
	.clk2x( clk2x ),
	.clk1x_follower( clk1x_follower ),
	.reset( reset ),
	.start( start ),
	.finish( finish ),
	.return_val( return_val ),
	.memory_controller_waitrequest(memory_controller_waitrequest),
	.memory_controller_enable_a(memory_controller_enable_a),
	.memory_controller_address_a(memory_controller_address_a),
	.memory_controller_write_enable_a(memory_controller_write_enable_a),
	.memory_controller_in_a(memory_controller_in_a),
	.memory_controller_size_a(memory_controller_size_a),
	.memory_controller_out_a(memory_controller_out_a),
	.memory_controller_enable_b(memory_controller_enable_b),
	.memory_controller_address_b(memory_controller_address_b),
	.memory_controller_write_enable_b(memory_controller_write_enable_b),
	.memory_controller_in_b(memory_controller_in_b),
	.memory_controller_size_b(memory_controller_size_b),
	.memory_controller_out_b(memory_controller_out_b)
);

endmodule

`timescale 1 ns / 1 ns
module memory_controller
(
	clk,
	memory_controller_address_a,
	memory_controller_address_b,
	memory_controller_enable_a,
	memory_controller_enable_b,
	memory_controller_write_enable_a,
	memory_controller_write_enable_b,
	memory_controller_in_a,
	memory_controller_in_b,
	memory_controller_size_a,
	memory_controller_size_b,
	memory_controller_waitrequest,
	memory_controller_out_reg_a,
	memory_controller_out_reg_b
);

parameter latency = 2;

parameter ram_latency = latency-1;

integer j;

input clk;
input memory_controller_waitrequest;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
input memory_controller_enable_a;
input memory_controller_write_enable_a;
input [64-1:0] memory_controller_in_a;
input [1:0] memory_controller_size_a;
output reg [64-1:0] memory_controller_out_reg_a;
reg [64-1:0] memory_controller_out_prev_a;
reg [64-1:0] memory_controller_out_a;

reg memory_controller_enable_reg_a;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
input memory_controller_enable_b;
input memory_controller_write_enable_b;
input [64-1:0] memory_controller_in_b;
input [1:0] memory_controller_size_b;
output reg [64-1:0] memory_controller_out_reg_b;
reg [64-1:0] memory_controller_out_prev_b;
reg [64-1:0] memory_controller_out_b;

reg memory_controller_enable_reg_b;

reg [3:0] array_address_a;
reg [3:0] array_address_b;
reg array_write_enable_a;
reg array_write_enable_b;
reg [31:0] array_in_a;
reg [31:0] array_in_b;
wire [31:0] array_out_a;
wire [31:0] array_out_b;

// @array = internal global [12 x i32] [i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12], align 4
ram_dual_port array (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( array_address_a ),
	.address_b( array_address_b ),
	.wren_a( array_write_enable_a ),
	.wren_b( array_write_enable_b ),
	.data_a( array_in_a ),
	.data_b( array_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( array_out_a ),
	.q_b( array_out_b)
);
defparam array.width_a = 32;
defparam array.width_b = 32;
defparam array.widthad_a = 4;
defparam array.widthad_b = 4;
defparam array.width_be_a = 1;
defparam array.width_be_b = 1;
defparam array.numwords_a = 12;
defparam array.numwords_b = 12;
defparam array.latency = ram_latency;
defparam array.init_file = "array.mif";

reg [3:0] a1_address_a;
reg [3:0] a1_address_b;
reg a1_write_enable_a;
reg a1_write_enable_b;
reg [31:0] a1_in_a;
reg [31:0] a1_in_b;
wire [31:0] a1_out_a;
wire [31:0] a1_out_b;

// @a1 = internal global [12 x i32] [i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12], align 4
ram_dual_port a1 (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( a1_address_a ),
	.address_b( a1_address_b ),
	.wren_a( a1_write_enable_a ),
	.wren_b( a1_write_enable_b ),
	.data_a( a1_in_a ),
	.data_b( a1_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( a1_out_a ),
	.q_b( a1_out_b)
);
defparam a1.width_a = 32;
defparam a1.width_b = 32;
defparam a1.widthad_a = 4;
defparam a1.widthad_b = 4;
defparam a1.width_be_a = 1;
defparam a1.width_be_b = 1;
defparam a1.numwords_a = 12;
defparam a1.numwords_b = 12;
defparam a1.latency = ram_latency;
defparam a1.init_file = "a1.mif";

reg [3:0] a2_address_a;
reg [3:0] a2_address_b;
reg a2_write_enable_a;
reg a2_write_enable_b;
reg [31:0] a2_in_a;
reg [31:0] a2_in_b;
wire [31:0] a2_out_a;
wire [31:0] a2_out_b;

// @a2 = internal global [12 x i32] [i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12], align 4
ram_dual_port a2 (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( a2_address_a ),
	.address_b( a2_address_b ),
	.wren_a( a2_write_enable_a ),
	.wren_b( a2_write_enable_b ),
	.data_a( a2_in_a ),
	.data_b( a2_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( a2_out_a ),
	.q_b( a2_out_b)
);
defparam a2.width_a = 32;
defparam a2.width_b = 32;
defparam a2.widthad_a = 4;
defparam a2.widthad_b = 4;
defparam a2.width_be_a = 1;
defparam a2.width_be_b = 1;
defparam a2.numwords_a = 12;
defparam a2.numwords_b = 12;
defparam a2.latency = ram_latency;
defparam a2.init_file = "a2.mif";

reg [3:0] array2_address_a;
reg [3:0] array2_address_b;
reg array2_write_enable_a;
reg array2_write_enable_b;
reg [31:0] array2_in_a;
reg [31:0] array2_in_b;
wire [31:0] array2_out_a;
wire [31:0] array2_out_b;

// @array2 = internal global [12 x i32] zeroinitializer, align 4
ram_dual_port array2 (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( array2_address_a ),
	.address_b( array2_address_b ),
	.wren_a( array2_write_enable_a ),
	.wren_b( array2_write_enable_b ),
	.data_a( array2_in_a ),
	.data_b( array2_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( array2_out_a ),
	.q_b( array2_out_b)
);
defparam array2.width_a = 32;
defparam array2.width_b = 32;
defparam array2.widthad_a = 4;
defparam array2.widthad_b = 4;
defparam array2.width_be_a = 1;
defparam array2.width_be_b = 1;
defparam array2.numwords_a = 12;
defparam array2.numwords_b = 12;
defparam array2.latency = ram_latency;
defparam array2.init_file = "array2.mif";
wire [`MEMORY_CONTROLLER_TAG_SIZE-1:0] tag_a;
assign tag_a = memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:`MEMORY_CONTROLLER_ADDR_SIZE-`MEMORY_CONTROLLER_TAG_SIZE];
reg [2:0] prevAddr_a;
reg [1:0] prevSize_a;
reg [2:0] prevSize_a_and;

always @(posedge clk)
if (!memory_controller_waitrequest)
begin
	prevAddr_a <= memory_controller_address_a[2:0];
	prevSize_a <= memory_controller_size_a;
end
wire [`MEMORY_CONTROLLER_TAG_SIZE-1:0] tag_b;
assign tag_b = memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:`MEMORY_CONTROLLER_ADDR_SIZE-`MEMORY_CONTROLLER_TAG_SIZE];
reg [2:0] prevAddr_b;
reg [1:0] prevSize_b;
reg [2:0] prevSize_b_and;

always @(posedge clk)
if (!memory_controller_waitrequest)
begin
	prevAddr_b <= memory_controller_address_b[2:0];
	prevSize_b <= memory_controller_size_b;
end

reg [2:0] select_not_struct_a;

wire select_array_a;
assign select_array_a = (tag_a == `TAG_g_array);
reg [ram_latency:0] select_array_reg_a;
wire [31:0] memory_controller_array_out_a;
assign memory_controller_array_out_a = {32{ select_array_reg_a[ram_latency]}} & array_out_a;

wire select_a1_a;
assign select_a1_a = (tag_a == `TAG_g_a1);
reg [ram_latency:0] select_a1_reg_a;
wire [31:0] memory_controller_a1_out_a;
assign memory_controller_a1_out_a = {32{ select_a1_reg_a[ram_latency]}} & a1_out_a;

wire select_a2_a;
assign select_a2_a = (tag_a == `TAG_g_a2);
reg [ram_latency:0] select_a2_reg_a;
wire [31:0] memory_controller_a2_out_a;
assign memory_controller_a2_out_a = {32{ select_a2_reg_a[ram_latency]}} & a2_out_a;

wire select_array2_a;
assign select_array2_a = (tag_a == `TAG_g_array2);
reg [ram_latency:0] select_array2_reg_a;
wire [31:0] memory_controller_array2_out_a;
assign memory_controller_array2_out_a = {32{ select_array2_reg_a[ram_latency]}} & array2_out_a;

always @(*)
begin
	array_address_a = memory_controller_address_a [4-1+2:2] & {4{select_array_a}};
	array_write_enable_a = memory_controller_write_enable_a & select_array_a;
	array_in_a [32-1:0] = memory_controller_in_a[32-1:0];

	a1_address_a = memory_controller_address_a [4-1+2:2] & {4{select_a1_a}};
	a1_write_enable_a = memory_controller_write_enable_a & select_a1_a;
	a1_in_a [32-1:0] = memory_controller_in_a[32-1:0];

	a2_address_a = memory_controller_address_a [4-1+2:2] & {4{select_a2_a}};
	a2_write_enable_a = memory_controller_write_enable_a & select_a2_a;
	a2_in_a [32-1:0] = memory_controller_in_a[32-1:0];

	array2_address_a = memory_controller_address_a [4-1+2:2] & {4{select_array2_a}};
	array2_write_enable_a = memory_controller_write_enable_a & select_array2_a;
	array2_in_a [32-1:0] = memory_controller_in_a[32-1:0];

end
always @(*)
begin
	select_not_struct_a [2:0] = 3'b0 | {2{select_array_reg_a[ram_latency]}} | {2{select_a1_reg_a[ram_latency]}} | {2{select_a2_reg_a[ram_latency]}} | {2{select_array2_reg_a[ram_latency]}};
	if (prevAddr_a[2:0] & select_not_struct_a[2:0] != 0 && memory_controller_enable_a)
	begin
		$display("Error: memory address not aligned to ram word size!");
		$finish;
	end

	prevSize_a_and[0] = prevSize_a[1] | prevSize_a[0];
	prevSize_a_and[1] = prevSize_a[1];
	prevSize_a_and[2] = prevSize_a[1] & prevSize_a[0];
	if ((prevAddr_a & prevSize_a_and) != 0 && memory_controller_enable_a)
	begin
		$display("Error: memory address not aligned to ram word size!");
		$finish;
	end
	memory_controller_out_prev_a = memory_controller_out_reg_a & { 64{!memory_controller_enable_reg_a}};
	memory_controller_out_a = 1'b0 | memory_controller_out_prev_a | memory_controller_array_out_a | memory_controller_a1_out_a | memory_controller_a2_out_a | memory_controller_array2_out_a;
end

always @(posedge clk)
if (!memory_controller_waitrequest)
begin
memory_controller_out_reg_a <= memory_controller_out_a;
memory_controller_enable_reg_a <= memory_controller_enable_a;
end

always @(posedge clk)
if (!memory_controller_waitrequest)
for (j = 0; j < ram_latency; j=j+1)
begin
select_array_reg_a[j+1] <= select_array_reg_a[j];
select_a1_reg_a[j+1] <= select_a1_reg_a[j];
select_a2_reg_a[j+1] <= select_a2_reg_a[j];
select_array2_reg_a[j+1] <= select_array2_reg_a[j];
end
always @(*)
begin
select_array_reg_a[0] <= select_array_a;
select_a1_reg_a[0] <= select_a1_a;
select_a2_reg_a[0] <= select_a2_a;
select_array2_reg_a[0] <= select_array2_a;
end

reg [2:0] select_not_struct_b;

wire select_array_b;
assign select_array_b = (tag_b == `TAG_g_array);
reg [ram_latency:0] select_array_reg_b;
wire [31:0] memory_controller_array_out_b;
assign memory_controller_array_out_b = {32{ select_array_reg_b[ram_latency]}} & array_out_b;

wire select_a1_b;
assign select_a1_b = (tag_b == `TAG_g_a1);
reg [ram_latency:0] select_a1_reg_b;
wire [31:0] memory_controller_a1_out_b;
assign memory_controller_a1_out_b = {32{ select_a1_reg_b[ram_latency]}} & a1_out_b;

wire select_a2_b;
assign select_a2_b = (tag_b == `TAG_g_a2);
reg [ram_latency:0] select_a2_reg_b;
wire [31:0] memory_controller_a2_out_b;
assign memory_controller_a2_out_b = {32{ select_a2_reg_b[ram_latency]}} & a2_out_b;

wire select_array2_b;
assign select_array2_b = (tag_b == `TAG_g_array2);
reg [ram_latency:0] select_array2_reg_b;
wire [31:0] memory_controller_array2_out_b;
assign memory_controller_array2_out_b = {32{ select_array2_reg_b[ram_latency]}} & array2_out_b;

always @(*)
begin
	array_address_b = memory_controller_address_b [4-1+2:2] & {4{select_array_b}};
	array_write_enable_b = memory_controller_write_enable_b & select_array_b;
	array_in_b [32-1:0] = memory_controller_in_b[32-1:0];

	a1_address_b = memory_controller_address_b [4-1+2:2] & {4{select_a1_b}};
	a1_write_enable_b = memory_controller_write_enable_b & select_a1_b;
	a1_in_b [32-1:0] = memory_controller_in_b[32-1:0];

	a2_address_b = memory_controller_address_b [4-1+2:2] & {4{select_a2_b}};
	a2_write_enable_b = memory_controller_write_enable_b & select_a2_b;
	a2_in_b [32-1:0] = memory_controller_in_b[32-1:0];

	array2_address_b = memory_controller_address_b [4-1+2:2] & {4{select_array2_b}};
	array2_write_enable_b = memory_controller_write_enable_b & select_array2_b;
	array2_in_b [32-1:0] = memory_controller_in_b[32-1:0];

end
always @(*)
begin
	select_not_struct_b [2:0] = 3'b0 | {2{select_array_reg_b[ram_latency]}} | {2{select_a1_reg_b[ram_latency]}} | {2{select_a2_reg_b[ram_latency]}} | {2{select_array2_reg_b[ram_latency]}};
	if (prevAddr_b[2:0] & select_not_struct_b[2:0] != 0 && memory_controller_enable_b)
	begin
		$display("Error: memory address not aligned to ram word size!");
		$finish;
	end

	prevSize_b_and[0] = prevSize_b[1] | prevSize_b[0];
	prevSize_b_and[1] = prevSize_b[1];
	prevSize_b_and[2] = prevSize_b[1] & prevSize_b[0];
	if ((prevAddr_b & prevSize_b_and) != 0 && memory_controller_enable_b)
	begin
		$display("Error: memory address not aligned to ram word size!");
		$finish;
	end
	memory_controller_out_prev_b = memory_controller_out_reg_b & { 64{!memory_controller_enable_reg_b}};
	memory_controller_out_b = 1'b0 | memory_controller_out_prev_b | memory_controller_array_out_b | memory_controller_a1_out_b | memory_controller_a2_out_b | memory_controller_array2_out_b;
end

always @(posedge clk)
if (!memory_controller_waitrequest)
begin
memory_controller_out_reg_b <= memory_controller_out_b;
memory_controller_enable_reg_b <= memory_controller_enable_b;
end

always @(posedge clk)
if (!memory_controller_waitrequest)
for (j = 0; j < ram_latency; j=j+1)
begin
select_array_reg_b[j+1] <= select_array_reg_b[j];
select_a1_reg_b[j+1] <= select_a1_reg_b[j];
select_a2_reg_b[j+1] <= select_a2_reg_b[j];
select_array2_reg_b[j+1] <= select_array2_reg_b[j];
end
always @(*)
begin
select_array_reg_b[0] <= select_array_b;
select_a1_reg_b[0] <= select_a1_b;
select_a2_reg_b[0] <= select_a2_b;
select_array2_reg_b[0] <= select_array2_b;
end

endmodule 

`timescale 1 ns / 1 ns
module fct
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	memory_controller_waitrequest,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b,
	return_val
);

parameter [3:0] LEGUP_0 = 4'd0;
parameter [3:0] LEGUP_F_fct_BB__1_1 = 4'd1;
parameter [3:0] LEGUP_F_fct_BB_preheaderpreheader_2 = 4'd2;
parameter [3:0] LEGUP_F_fct_BB__3_3 = 4'd3;
parameter [3:0] LEGUP_F_fct_BB__3_4 = 4'd4;
parameter [3:0] LEGUP_F_fct_BB__3_5 = 4'd5;
parameter [3:0] LEGUP_F_fct_BB__3_6 = 4'd6;
parameter [3:0] LEGUP_F_fct_BB__3_7 = 4'd7;
parameter [3:0] LEGUP_F_fct_BB__3_8 = 4'd8;
parameter [3:0] LEGUP_F_fct_BB_preheader_9 = 4'd9;
parameter [3:0] LEGUP_F_fct_BB__10_10 = 4'd10;
parameter [3:0] LEGUP_F_fct_BB__10_11 = 4'd11;
parameter [3:0] LEGUP_F_fct_BB__10_12 = 4'd12;
parameter [3:0] LEGUP_F_fct_BB__14_13 = 4'd13;
parameter [8:0] tag_offset = 9'd0;
parameter [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tag_addr_offset = {tag_offset, 23'd0};

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
input  memory_controller_waitrequest;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
output reg [31:0] return_val;
reg [3:0] cur_state;
reg [3:0] next_state;
reg [31:0] fct_1_2;
reg [31:0] fct_1_2_reg;
reg  fct_1_exitcond;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fct_3_scevgep4;
reg [31:0] fct_3_4;
reg [31:0] fct_3_4_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fct_3_scevgep3;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fct_3_scevgep2;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fct_3_scevgep2_reg;
reg [31:0] fct_3_5;
reg [31:0] fct_3_5_reg;
reg [31:0] fct_3_6;
reg [31:0] fct_3_7;
reg [31:0] fct_3_8;
reg [31:0] fct_3_8_reg;
reg [31:0] fct_preheader_9;
reg [31:0] fct_preheader_9_reg;
reg [31:0] fct_preheader_result0;
reg [31:0] fct_preheader_result0_reg;
reg  fct_preheader_exitcond2;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fct_10_scevgep;
reg [31:0] fct_10_11;
reg [31:0] fct_10_12;
reg [31:0] fct_10_13;
reg [31:0] fct_10_13_reg;
reg  lpm_mult_fct_3_7_en;
reg [31:0] fct_3_7_stage0_reg;


always @(posedge clk) begin
if (reset == 1'b1)
	cur_state <= LEGUP_0;
else if (memory_controller_waitrequest == 1'd1)
	cur_state <= cur_state;
else
	cur_state <= next_state;
end

always @(*)
begin
next_state = cur_state;
case(cur_state)  // synthesis parallel_case  
LEGUP_0:
	if ((start == 1'd1))
		next_state = LEGUP_F_fct_BB__1_1;
LEGUP_F_fct_BB__10_10:
		next_state = LEGUP_F_fct_BB__10_11;
LEGUP_F_fct_BB__10_11:
		next_state = LEGUP_F_fct_BB__10_12;
LEGUP_F_fct_BB__10_12:
		next_state = LEGUP_F_fct_BB_preheader_9;
LEGUP_F_fct_BB__14_13:
		next_state = LEGUP_0;
LEGUP_F_fct_BB__1_1:
	if ((fct_1_exitcond == 1'd1))
		next_state = LEGUP_F_fct_BB_preheaderpreheader_2;
	else if ((fct_1_exitcond == 1'd0))
		next_state = LEGUP_F_fct_BB__3_3;
LEGUP_F_fct_BB__3_3:
		next_state = LEGUP_F_fct_BB__3_4;
LEGUP_F_fct_BB__3_4:
		next_state = LEGUP_F_fct_BB__3_5;
LEGUP_F_fct_BB__3_5:
		next_state = LEGUP_F_fct_BB__3_6;
LEGUP_F_fct_BB__3_6:
		next_state = LEGUP_F_fct_BB__3_7;
LEGUP_F_fct_BB__3_7:
		next_state = LEGUP_F_fct_BB__3_8;
LEGUP_F_fct_BB__3_8:
		next_state = LEGUP_F_fct_BB__1_1;
LEGUP_F_fct_BB_preheader_9:
	if ((fct_preheader_exitcond2 == 1'd1))
		next_state = LEGUP_F_fct_BB__14_13;
	else if ((fct_preheader_exitcond2 == 1'd0))
		next_state = LEGUP_F_fct_BB__10_10;
LEGUP_F_fct_BB_preheaderpreheader_2:
		next_state = LEGUP_F_fct_BB_preheader_9;
default:
	next_state = cur_state;
endcase

end
always @(*) begin
	/* fct: %1*/
	/*   %2 = phi i32 [ 0, %0 ], [ %8, %3 ]*/
	if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd1))) begin
		fct_1_2 = 32'd0;
	end
	/* fct: %1*/
	/*   %2 = phi i32 [ 0, %0 ], [ %8, %3 ]*/
	else /* if (((cur_state == LEGUP_F_fct_BB__3_8) & (memory_controller_waitrequest == 1'd0))) */ begin
		fct_1_2 = fct_3_8_reg;
	end
end
always @(posedge clk) begin
	/* fct: %1*/
	/*   %2 = phi i32 [ 0, %0 ], [ %8, %3 ]*/
	if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd1))) begin
		fct_1_2_reg <= fct_1_2;
		if (start == 1'b0 && ^(fct_1_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fct_1_2_reg"); $finish; end
	end
	/* fct: %1*/
	/*   %2 = phi i32 [ 0, %0 ], [ %8, %3 ]*/
	if (((cur_state == LEGUP_F_fct_BB__3_8) & (memory_controller_waitrequest == 1'd0))) begin
		fct_1_2_reg <= fct_1_2;
		if (start == 1'b0 && ^(fct_1_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fct_1_2_reg"); $finish; end
	end
end
always @(*) begin
	/* fct: %1*/
	/*   %exitcond = icmp eq i32 %2, 12*/
		fct_1_exitcond = (fct_1_2_reg == 32'd12);
end
always @(*) begin
	/* fct: %3*/
	/*   %scevgep4 = getelementptr [12 x i32]* @a1, i32 0, i32 %2*/
		fct_3_scevgep4 = (`TAG_g_a1_a + (4 * fct_1_2_reg));
end
always @(*) begin
	/* fct: %3*/
	/*   %4 = add i32 %2, -2*/
		fct_3_4 = (fct_1_2_reg + -32'd2);
end
always @(posedge clk) begin
	/* fct: %3*/
	/*   %4 = add i32 %2, -2*/
	if ((cur_state == LEGUP_F_fct_BB__3_3)) begin
		fct_3_4_reg <= fct_3_4;
		if (start == 1'b0 && ^(fct_3_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fct_3_4_reg"); $finish; end
	end
end
always @(*) begin
	/* fct: %3*/
	/*   %scevgep3 = getelementptr [12 x i32]* @a2, i32 0, i32 %4*/
		fct_3_scevgep3 = (`TAG_g_a2_a + (4 * fct_3_4_reg));
end
always @(*) begin
	/* fct: %3*/
	/*   %scevgep2 = getelementptr [12 x i32]* @array2, i32 0, i32 %2*/
		fct_3_scevgep2 = (`TAG_g_array2_a + (4 * fct_1_2_reg));
end
always @(posedge clk) begin
	/* fct: %3*/
	/*   %scevgep2 = getelementptr [12 x i32]* @array2, i32 0, i32 %2*/
	if ((cur_state == LEGUP_F_fct_BB__3_3)) begin
		fct_3_scevgep2_reg <= fct_3_scevgep2;
		if (start == 1'b0 && ^(fct_3_scevgep2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fct_3_scevgep2_reg"); $finish; end
	end
end
always @(*) begin
	/* fct: %3*/
	/*   %5 = load volatile i32* %scevgep4, align 4*/
		fct_3_5 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* fct: %3*/
	/*   %5 = load volatile i32* %scevgep4, align 4*/
	if ((cur_state == LEGUP_F_fct_BB__3_5)) begin
		fct_3_5_reg <= fct_3_5;
		if (start == 1'b0 && ^(fct_3_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fct_3_5_reg"); $finish; end
	end
end
always @(*) begin
	/* fct: %3*/
	/*   %6 = load volatile i32* %scevgep3, align 4*/
		fct_3_6 = memory_controller_out_a[31:0];
end
always @(*) begin
	fct_3_7 = fct_3_7_stage0_reg;
end
always @(*) begin
	/* fct: %3*/
	/*   %8 = add nsw i32 %2, 1*/
		fct_3_8 = (fct_1_2_reg + 32'd1);
end
always @(posedge clk) begin
	/* fct: %3*/
	/*   %8 = add nsw i32 %2, 1*/
	if ((cur_state == LEGUP_F_fct_BB__3_3)) begin
		fct_3_8_reg <= fct_3_8;
		if (start == 1'b0 && ^(fct_3_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fct_3_8_reg"); $finish; end
	end
end
always @(*) begin
	/* fct: %.preheader*/
	/*   %9 = phi i32 [ %13, %10 ], [ 0, %.preheader.preheader ]*/
	if (((cur_state == LEGUP_F_fct_BB_preheaderpreheader_2) & (memory_controller_waitrequest == 1'd0))) begin
		fct_preheader_9 = 32'd0;
	end
	/* fct: %.preheader*/
	/*   %9 = phi i32 [ %13, %10 ], [ 0, %.preheader.preheader ]*/
	else /* if (((cur_state == LEGUP_F_fct_BB__10_12) & (memory_controller_waitrequest == 1'd0))) */ begin
		fct_preheader_9 = fct_10_13_reg;
	end
end
always @(posedge clk) begin
	/* fct: %.preheader*/
	/*   %9 = phi i32 [ %13, %10 ], [ 0, %.preheader.preheader ]*/
	if (((cur_state == LEGUP_F_fct_BB_preheaderpreheader_2) & (memory_controller_waitrequest == 1'd0))) begin
		fct_preheader_9_reg <= fct_preheader_9;
		if (start == 1'b0 && ^(fct_preheader_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fct_preheader_9_reg"); $finish; end
	end
	/* fct: %.preheader*/
	/*   %9 = phi i32 [ %13, %10 ], [ 0, %.preheader.preheader ]*/
	if (((cur_state == LEGUP_F_fct_BB__10_12) & (memory_controller_waitrequest == 1'd0))) begin
		fct_preheader_9_reg <= fct_preheader_9;
		if (start == 1'b0 && ^(fct_preheader_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fct_preheader_9_reg"); $finish; end
	end
end
always @(*) begin
	/* fct: %.preheader*/
	/*   %result.0 = phi i32 [ %12, %10 ], [ 0, %.preheader.preheader ]*/
	if (((cur_state == LEGUP_F_fct_BB_preheaderpreheader_2) & (memory_controller_waitrequest == 1'd0))) begin
		fct_preheader_result0 = 32'd0;
	end
	/* fct: %.preheader*/
	/*   %result.0 = phi i32 [ %12, %10 ], [ 0, %.preheader.preheader ]*/
	else /* if (((cur_state == LEGUP_F_fct_BB__10_12) & (memory_controller_waitrequest == 1'd0))) */ begin
		fct_preheader_result0 = fct_10_12;
	end
end
always @(posedge clk) begin
	/* fct: %.preheader*/
	/*   %result.0 = phi i32 [ %12, %10 ], [ 0, %.preheader.preheader ]*/
	if (((cur_state == LEGUP_F_fct_BB_preheaderpreheader_2) & (memory_controller_waitrequest == 1'd0))) begin
		fct_preheader_result0_reg <= fct_preheader_result0;
		if (start == 1'b0 && ^(fct_preheader_result0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fct_preheader_result0_reg"); $finish; end
	end
	/* fct: %.preheader*/
	/*   %result.0 = phi i32 [ %12, %10 ], [ 0, %.preheader.preheader ]*/
	if (((cur_state == LEGUP_F_fct_BB__10_12) & (memory_controller_waitrequest == 1'd0))) begin
		fct_preheader_result0_reg <= fct_preheader_result0;
		if (start == 1'b0 && ^(fct_preheader_result0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fct_preheader_result0_reg"); $finish; end
	end
end
always @(*) begin
	/* fct: %.preheader*/
	/*   %exitcond2 = icmp eq i32 %9, 12*/
		fct_preheader_exitcond2 = (fct_preheader_9_reg == 32'd12);
end
always @(*) begin
	/* fct: %10*/
	/*   %scevgep = getelementptr [12 x i32]* @array2, i32 0, i32 %9*/
		fct_10_scevgep = (`TAG_g_array2_a + (4 * fct_preheader_9_reg));
end
always @(*) begin
	/* fct: %10*/
	/*   %11 = load volatile i32* %scevgep, align 4*/
		fct_10_11 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* fct: %10*/
	/*   %12 = add nsw i32 %result.0, %11*/
		fct_10_12 = (fct_preheader_result0_reg + fct_10_11);
end
always @(*) begin
	/* fct: %10*/
	/*   %13 = add nsw i32 %9, 1*/
		fct_10_13 = (fct_preheader_9_reg + 32'd1);
end
always @(posedge clk) begin
	/* fct: %10*/
	/*   %13 = add nsw i32 %9, 1*/
	if ((cur_state == LEGUP_F_fct_BB__10_10)) begin
		fct_10_13_reg <= fct_10_13;
		if (start == 1'b0 && ^(fct_10_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fct_10_13_reg"); $finish; end
	end
end
always @(*) begin
	lpm_mult_fct_3_7_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
	/* fct: %3*/
	/*   %7 = mul nsw i32 %5, %6*/
	if ((lpm_mult_fct_3_7_en == 1'd1)) begin
		fct_3_7_stage0_reg <= (fct_3_5_reg * fct_3_6);
	end
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		finish <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
	/* fct: %14*/
	/*   ret i32 %result.0*/
	if ((cur_state == LEGUP_F_fct_BB__14_13)) begin
		finish <= (memory_controller_waitrequest == 1'd0);
		if (start == 1'b0 && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
end
always @(*) begin
	memory_controller_enable_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_enable_a = 1'd0;
	end
	/* fct: %3*/
	/*   %5 = load volatile i32* %scevgep4, align 4*/
	if ((cur_state == LEGUP_F_fct_BB__3_3)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* fct: %3*/
	/*   %6 = load volatile i32* %scevgep3, align 4*/
	if ((cur_state == LEGUP_F_fct_BB__3_4)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* fct: %3*/
	/*   store volatile i32 %7, i32* %scevgep2, align 4*/
	if ((cur_state == LEGUP_F_fct_BB__3_7)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* fct: %10*/
	/*   %11 = load volatile i32* %scevgep, align 4*/
	if ((cur_state == LEGUP_F_fct_BB__10_10)) begin
		memory_controller_enable_a = 1'd1;
	end
end
always @(*) begin
	memory_controller_address_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_address_a = 1'd0;
	end
	/* fct: %3*/
	/*   %5 = load volatile i32* %scevgep4, align 4*/
	if ((cur_state == LEGUP_F_fct_BB__3_3)) begin
		memory_controller_address_a = fct_3_scevgep4;
	end
	/* fct: %3*/
	/*   %6 = load volatile i32* %scevgep3, align 4*/
	if ((cur_state == LEGUP_F_fct_BB__3_4)) begin
		memory_controller_address_a = fct_3_scevgep3;
	end
	/* fct: %3*/
	/*   store volatile i32 %7, i32* %scevgep2, align 4*/
	if ((cur_state == LEGUP_F_fct_BB__3_7)) begin
		memory_controller_address_a = fct_3_scevgep2_reg;
	end
	/* fct: %10*/
	/*   %11 = load volatile i32* %scevgep, align 4*/
	if ((cur_state == LEGUP_F_fct_BB__10_10)) begin
		memory_controller_address_a = fct_10_scevgep;
	end
end
always @(*) begin
	memory_controller_write_enable_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* fct: %3*/
	/*   %5 = load volatile i32* %scevgep4, align 4*/
	if ((cur_state == LEGUP_F_fct_BB__3_3)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* fct: %3*/
	/*   %6 = load volatile i32* %scevgep3, align 4*/
	if ((cur_state == LEGUP_F_fct_BB__3_4)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* fct: %3*/
	/*   store volatile i32 %7, i32* %scevgep2, align 4*/
	if ((cur_state == LEGUP_F_fct_BB__3_7)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* fct: %10*/
	/*   %11 = load volatile i32* %scevgep, align 4*/
	if ((cur_state == LEGUP_F_fct_BB__10_10)) begin
		memory_controller_write_enable_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_in_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_in_a = 1'd0;
	end
	/* fct: %3*/
	/*   store volatile i32 %7, i32* %scevgep2, align 4*/
	if ((cur_state == LEGUP_F_fct_BB__3_7)) begin
		memory_controller_in_a = fct_3_7;
	end
end
always @(*) begin
	memory_controller_size_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_size_a = 1'd0;
	end
	/* fct: %3*/
	/*   %5 = load volatile i32* %scevgep4, align 4*/
	if ((cur_state == LEGUP_F_fct_BB__3_3)) begin
		memory_controller_size_a = 2'd2;
	end
	/* fct: %3*/
	/*   %6 = load volatile i32* %scevgep3, align 4*/
	if ((cur_state == LEGUP_F_fct_BB__3_4)) begin
		memory_controller_size_a = 2'd2;
	end
	/* fct: %3*/
	/*   store volatile i32 %7, i32* %scevgep2, align 4*/
	if ((cur_state == LEGUP_F_fct_BB__3_7)) begin
		memory_controller_size_a = 2'd2;
	end
	/* fct: %10*/
	/*   %11 = load volatile i32* %scevgep, align 4*/
	if ((cur_state == LEGUP_F_fct_BB__10_10)) begin
		memory_controller_size_a = 2'd2;
	end
end
always @(*) begin
	memory_controller_enable_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_enable_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_address_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_address_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_write_enable_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_write_enable_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_in_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_in_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_size_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_size_b = 1'd0;
	end
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		return_val <= 0;
		if (start == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
	end
	/* fct: %14*/
	/*   ret i32 %result.0*/
	if ((cur_state == LEGUP_F_fct_BB__14_13)) begin
		return_val <= fct_preheader_result0_reg;
		if (start == 1'b0 && ^(fct_preheader_result0_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
	end
end

endmodule 
`timescale 1 ns / 1 ns
module main
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	memory_controller_waitrequest,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b,
	return_val
);

parameter [5:0] LEGUP_0 = 6'd0;
parameter [5:0] LEGUP_F_main_BB__1_1 = 6'd1;
parameter [5:0] LEGUP_F_main_BB__1_2 = 6'd2;
parameter [5:0] LEGUP_F_main_BB__6_3 = 6'd3;
parameter [5:0] LEGUP_F_main_BB__7_4 = 6'd4;
parameter [5:0] LEGUP_F_main_BB__7_5 = 6'd5;
parameter [5:0] LEGUP_F_main_BB__13_6 = 6'd6;
parameter [5:0] LEGUP_F_main_BB__13_7 = 6'd7;
parameter [5:0] LEGUP_F_main_BB__13_8 = 6'd8;
parameter [5:0] LEGUP_F_main_BB__13_9 = 6'd9;
parameter [5:0] LEGUP_F_main_BB__13_10 = 6'd10;
parameter [5:0] LEGUP_F_main_BB__13_11 = 6'd11;
parameter [5:0] LEGUP_F_main_BB__13_12 = 6'd12;
parameter [5:0] LEGUP_F_main_BB__13_13 = 6'd13;
parameter [5:0] LEGUP_F_main_BB__13_14 = 6'd14;
parameter [5:0] LEGUP_F_main_BB__13_15 = 6'd15;
parameter [5:0] LEGUP_F_main_BB__13_16 = 6'd16;
parameter [5:0] LEGUP_F_main_BB__13_17 = 6'd17;
parameter [5:0] LEGUP_F_main_BB__13_18 = 6'd18;
parameter [5:0] LEGUP_F_main_BB__13_19 = 6'd19;
parameter [5:0] LEGUP_F_main_BB__13_20 = 6'd20;
parameter [5:0] LEGUP_F_main_BB__13_21 = 6'd21;
parameter [5:0] LEGUP_F_main_BB__13_22 = 6'd22;
parameter [5:0] LEGUP_F_main_BB__13_23 = 6'd23;
parameter [5:0] LEGUP_F_main_BB__13_24 = 6'd24;
parameter [5:0] LEGUP_F_main_BB__13_25 = 6'd25;
parameter [5:0] LEGUP_F_main_BB__13_26 = 6'd26;
parameter [5:0] LEGUP_F_main_BB__13_27 = 6'd27;
parameter [5:0] LEGUP_F_main_BB__13_28 = 6'd28;
parameter [5:0] LEGUP_F_main_BB__13_29 = 6'd29;
parameter [5:0] LEGUP_F_main_BB__13_30 = 6'd30;
parameter [5:0] LEGUP_F_main_BB__13_31 = 6'd31;
parameter [5:0] LEGUP_F_main_BB__13_32 = 6'd32;
parameter [5:0] LEGUP_F_main_BB__13_33 = 6'd33;
parameter [5:0] LEGUP_F_main_BB__13_34 = 6'd34;
parameter [5:0] LEGUP_F_main_BB__13_35 = 6'd35;
parameter [5:0] LEGUP_F_main_BB__13_36 = 6'd36;
parameter [5:0] LEGUP_F_main_BB__13_37 = 6'd37;
parameter [5:0] LEGUP_F_main_BB__13_38 = 6'd38;
parameter [5:0] LEGUP_F_main_BB__13_39 = 6'd39;
parameter [5:0] LEGUP_F_main_BB__13_40 = 6'd40;
parameter [5:0] LEGUP_F_main_BB__17_41 = 6'd41;
parameter [5:0] LEGUP_F_main_BB__19_42 = 6'd42;
parameter [5:0] LEGUP_F_main_BB__19_43 = 6'd43;
parameter [5:0] LEGUP_F_main_BB__19_44 = 6'd44;
parameter [5:0] LEGUP_F_main_BB__19_45 = 6'd45;
parameter [5:0] LEGUP_F_main_BB__27_46 = 6'd46;
parameter [5:0] LEGUP_F_main_BB__29_47 = 6'd47;
parameter [5:0] LEGUP_F_main_BB__31_48 = 6'd48;
parameter [5:0] LEGUP_F_main_BB__31_50 = 6'd50;
parameter [5:0] LEGUP_F_main_BB__36_51 = 6'd51;
parameter [5:0] LEGUP_F_main_BB__38_52 = 6'd52;
parameter [5:0] LEGUP_F_main_BB__40_53 = 6'd53;
parameter [8:0] tag_offset = 9'd0;
parameter [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tag_addr_offset = {tag_offset, 23'd0};
parameter [5:0] LEGUP_function_call_49 = 6'd49;

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
input  memory_controller_waitrequest;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
output reg [31:0] return_val;
reg [5:0] cur_state;
reg [5:0] next_state;
reg [31:0] main_1_2;
reg [31:0] main_1_2_reg;
reg [31:0] main_1_result0;
reg [31:0] main_1_result0_reg;
reg [31:0] main_1_3;
reg [31:0] main_1_3_reg;
reg [31:0] main_1_4;
reg [31:0] main_1_4_reg;
reg [31:0] main_1_5;
reg [31:0] main_1_5_reg;
reg  main_1_exitcond7;
reg  main_1_exitcond7_reg;
reg [31:0] main_7_8;
reg [31:0] main_7_8_reg;
reg [31:0] main_7_result1;
reg [31:0] main_7_result1_reg;
reg [31:0] main_7_9;
reg [31:0] main_7_10;
reg [31:0] main_7_10_reg;
reg [31:0] main_7_11;
reg [31:0] main_7_11_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_7_scevgep6;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_7_scevgep6_reg;
reg [31:0] main_7_12;
reg [31:0] main_7_12_reg;
reg  main_7_exitcond;
reg  main_7_exitcond_reg;
reg [31:0] main_13_14;
reg [31:0] main_13_15;
reg [31:0] main_13_16;
reg [31:0] main_17_result2;
reg [31:0] main_17_result2_reg;
reg [31:0] main_17_18;
reg [31:0] main_17_18_reg;
reg  main_17_exitcond1;
reg [31:0] main_19_20;
reg [31:0] main_19_20_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_19_scevgep1;
reg [31:0] main_19_21;
reg [31:0] main_19_21_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_19_scevgep;
reg [31:0] main_19_22;
reg [31:0] main_19_23;
reg [31:0] main_19_24;
reg [31:0] main_19_25;
reg [31:0] main_19_26;
reg [31:0] main_19_26_reg;
reg [31:0] main_27_28;
reg [31:0] main_29_30;
reg [31:0] main_31_32;
reg [31:0] main_31_32_reg;
reg [31:0] main_31_33;
reg [31:0] main_31_33_reg;
reg  main_31_35;
reg  fct_start;
wire  fct_memory_controller_enable_a;
wire  fct_memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fct_memory_controller_address_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] fct_memory_controller_in_a;
wire [1:0] fct_memory_controller_size_a;
wire  fct_memory_controller_enable_b;
wire  fct_memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fct_memory_controller_address_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] fct_memory_controller_in_b;
wire [1:0] fct_memory_controller_size_b;
reg  fct_finish_final;
reg  fct_finish_reg;
wire  fct_finish;
wire [31:0] fct_return_val;
reg [31:0] fct_return_val_reg;
reg  legup_function_call;
reg [31:0] main_signed_divide_32_0_op0;
reg [31:0] main_signed_divide_32_0_op1;
wire [31:0] lpm_divide_main_13_16_temp_out;
wire [31:0] main_13_16_unused;
reg  lpm_divide_main_13_16_en;
reg [31:0] lpm_divide_main_13_16_out;
reg [31:0] main_signed_divide_32_0;
reg  lpm_mult_main_1_3_en;
reg [31:0] main_1_3_stage0_reg;

/*   %16 = sdiv i32 %14, %15*/
lpm_divide lpm_divide_main_13_16 (
	.quotient (lpm_divide_main_13_16_temp_out),
	.remain (main_13_16_unused),
	.clock (clk),
	.aclr (1'd0),
	.clken (lpm_divide_main_13_16_en),
	.numer (main_signed_divide_32_0_op0),
	.denom (main_signed_divide_32_0_op1)
);

defparam
	lpm_divide_main_13_16.lpm_pipeline = 32,
	lpm_divide_main_13_16.lpm_widthn = 32,
	lpm_divide_main_13_16.lpm_widthd = 32,
	lpm_divide_main_13_16.lpm_drepresentation = "SIGNED",
	lpm_divide_main_13_16.lpm_nrepresentation = "SIGNED",
	lpm_divide_main_13_16.lpm_hint = "LPM_REMAINDERPOSITIVE=FALSE";


fct fct (
	.memory_controller_waitrequest (memory_controller_waitrequest),
	.memory_controller_enable_a (fct_memory_controller_enable_a),
	.memory_controller_address_a (fct_memory_controller_address_a),
	.memory_controller_write_enable_a (fct_memory_controller_write_enable_a),
	.memory_controller_in_a (fct_memory_controller_in_a),
	.memory_controller_size_a (fct_memory_controller_size_a),
	.memory_controller_out_a (memory_controller_out_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.memory_controller_enable_b (fct_memory_controller_enable_b),
	.memory_controller_address_b (fct_memory_controller_address_b),
	.memory_controller_write_enable_b (fct_memory_controller_write_enable_b),
	.memory_controller_in_b (fct_memory_controller_in_b),
	.memory_controller_size_b (fct_memory_controller_size_b),
	.memory_controller_out_b (memory_controller_out_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.clk (clk),
	.clk2x (clk2x),
	.clk1x_follower (clk1x_follower),
	.reset (reset),
	.start (fct_start),
	.finish (fct_finish),
	.return_val (fct_return_val)
);

defparam
	fct.tag_offset = tag_offset;


/* Unsynthesizable Statements */
always @(posedge clk)
	if (!memory_controller_waitrequest) begin
	/* main: %31*/
	/*   %34 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([12 x i8]* @.str5, i32 0, i32 0), i32 %33) #3*/
	if ((cur_state == LEGUP_F_main_BB__31_50)) begin
		$write("Result: %d\n", $signed(main_31_33));
		// to fix quartus warning
		if (reset == 1'b0 && ^(main_31_33) === 1'bX) finish <= 0;
	end
	/* main: %36*/
	/*   %37 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([14 x i8]* @.str6, i32 0, i32 0)) #3*/
	if ((cur_state == LEGUP_F_main_BB__36_51)) begin
		$write("RESULT: PASS\n");
	end
	/* main: %38*/
	/*   %39 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([14 x i8]* @.str7, i32 0, i32 0)) #3*/
	if ((cur_state == LEGUP_F_main_BB__38_52)) begin
		$write("RESULT: FAIL\n");
	end
end
always @(posedge clk) begin
if (reset == 1'b1)
	cur_state <= LEGUP_0;
else if (memory_controller_waitrequest == 1'd1)
	cur_state <= cur_state;
else
	cur_state <= next_state;
end

always @(*)
begin
next_state = cur_state;
case(cur_state)  // synthesis parallel_case  
LEGUP_0:
	if ((start == 1'd1))
		next_state = LEGUP_F_main_BB__1_1;
LEGUP_F_main_BB__13_10:
		next_state = LEGUP_F_main_BB__13_11;
LEGUP_F_main_BB__13_11:
		next_state = LEGUP_F_main_BB__13_12;
LEGUP_F_main_BB__13_12:
		next_state = LEGUP_F_main_BB__13_13;
LEGUP_F_main_BB__13_13:
		next_state = LEGUP_F_main_BB__13_14;
LEGUP_F_main_BB__13_14:
		next_state = LEGUP_F_main_BB__13_15;
LEGUP_F_main_BB__13_15:
		next_state = LEGUP_F_main_BB__13_16;
LEGUP_F_main_BB__13_16:
		next_state = LEGUP_F_main_BB__13_17;
LEGUP_F_main_BB__13_17:
		next_state = LEGUP_F_main_BB__13_18;
LEGUP_F_main_BB__13_18:
		next_state = LEGUP_F_main_BB__13_19;
LEGUP_F_main_BB__13_19:
		next_state = LEGUP_F_main_BB__13_20;
LEGUP_F_main_BB__13_20:
		next_state = LEGUP_F_main_BB__13_21;
LEGUP_F_main_BB__13_21:
		next_state = LEGUP_F_main_BB__13_22;
LEGUP_F_main_BB__13_22:
		next_state = LEGUP_F_main_BB__13_23;
LEGUP_F_main_BB__13_23:
		next_state = LEGUP_F_main_BB__13_24;
LEGUP_F_main_BB__13_24:
		next_state = LEGUP_F_main_BB__13_25;
LEGUP_F_main_BB__13_25:
		next_state = LEGUP_F_main_BB__13_26;
LEGUP_F_main_BB__13_26:
		next_state = LEGUP_F_main_BB__13_27;
LEGUP_F_main_BB__13_27:
		next_state = LEGUP_F_main_BB__13_28;
LEGUP_F_main_BB__13_28:
		next_state = LEGUP_F_main_BB__13_29;
LEGUP_F_main_BB__13_29:
		next_state = LEGUP_F_main_BB__13_30;
LEGUP_F_main_BB__13_30:
		next_state = LEGUP_F_main_BB__13_31;
LEGUP_F_main_BB__13_31:
		next_state = LEGUP_F_main_BB__13_32;
LEGUP_F_main_BB__13_32:
		next_state = LEGUP_F_main_BB__13_33;
LEGUP_F_main_BB__13_33:
		next_state = LEGUP_F_main_BB__13_34;
LEGUP_F_main_BB__13_34:
		next_state = LEGUP_F_main_BB__13_35;
LEGUP_F_main_BB__13_35:
		next_state = LEGUP_F_main_BB__13_36;
LEGUP_F_main_BB__13_36:
		next_state = LEGUP_F_main_BB__13_37;
LEGUP_F_main_BB__13_37:
		next_state = LEGUP_F_main_BB__13_38;
LEGUP_F_main_BB__13_38:
		next_state = LEGUP_F_main_BB__13_39;
LEGUP_F_main_BB__13_39:
		next_state = LEGUP_F_main_BB__13_40;
LEGUP_F_main_BB__13_40:
		next_state = LEGUP_F_main_BB__17_41;
LEGUP_F_main_BB__13_6:
		next_state = LEGUP_F_main_BB__13_7;
LEGUP_F_main_BB__13_7:
		next_state = LEGUP_F_main_BB__13_8;
LEGUP_F_main_BB__13_8:
		next_state = LEGUP_F_main_BB__13_9;
LEGUP_F_main_BB__13_9:
		next_state = LEGUP_F_main_BB__13_10;
LEGUP_F_main_BB__17_41:
	if ((main_17_exitcond1 == 1'd1))
		next_state = LEGUP_F_main_BB__27_46;
	else if ((main_17_exitcond1 == 1'd0))
		next_state = LEGUP_F_main_BB__19_42;
LEGUP_F_main_BB__19_42:
		next_state = LEGUP_F_main_BB__19_43;
LEGUP_F_main_BB__19_43:
		next_state = LEGUP_F_main_BB__19_44;
LEGUP_F_main_BB__19_44:
		next_state = LEGUP_F_main_BB__19_45;
LEGUP_F_main_BB__19_45:
		next_state = LEGUP_F_main_BB__17_41;
LEGUP_F_main_BB__1_1:
		next_state = LEGUP_F_main_BB__1_2;
LEGUP_F_main_BB__1_2:
	if ((main_1_exitcond7_reg == 1'd1))
		next_state = LEGUP_F_main_BB__31_48;
	else if ((main_1_exitcond7_reg == 1'd0))
		next_state = LEGUP_F_main_BB__6_3;
LEGUP_F_main_BB__27_46:
		next_state = LEGUP_F_main_BB__7_4;
LEGUP_F_main_BB__29_47:
		next_state = LEGUP_F_main_BB__1_1;
LEGUP_F_main_BB__31_48:
		next_state = LEGUP_function_call_49;
LEGUP_F_main_BB__31_50:
	if ((main_31_35 == 1'd1))
		next_state = LEGUP_F_main_BB__36_51;
	else if ((main_31_35 == 1'd0))
		next_state = LEGUP_F_main_BB__38_52;
LEGUP_F_main_BB__36_51:
		next_state = LEGUP_F_main_BB__40_53;
LEGUP_F_main_BB__38_52:
		next_state = LEGUP_F_main_BB__40_53;
LEGUP_F_main_BB__40_53:
		next_state = LEGUP_0;
LEGUP_F_main_BB__6_3:
		next_state = LEGUP_F_main_BB__7_4;
LEGUP_F_main_BB__7_4:
		next_state = LEGUP_F_main_BB__7_5;
LEGUP_F_main_BB__7_5:
	if ((main_7_exitcond_reg == 1'd1))
		next_state = LEGUP_F_main_BB__29_47;
	else if ((main_7_exitcond_reg == 1'd0))
		next_state = LEGUP_F_main_BB__13_6;
LEGUP_function_call_49:
	if ((fct_finish_final == 1'd1))
		next_state = LEGUP_F_main_BB__31_50;
default:
	next_state = cur_state;
endcase

end
always @(*) begin
	/* main: %1*/
	/*   %2 = phi i32 [ 0, %0 ], [ %30, %29 ]*/
	if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd1))) begin
		main_1_2 = 32'd0;
	end
	/* main: %1*/
	/*   %2 = phi i32 [ 0, %0 ], [ %30, %29 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__29_47) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_1_2 = main_29_30;
	end
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %2 = phi i32 [ 0, %0 ], [ %30, %29 ]*/
	if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd1))) begin
		main_1_2_reg <= main_1_2;
		if (start == 1'b0 && ^(main_1_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_2_reg"); $finish; end
	end
	/* main: %1*/
	/*   %2 = phi i32 [ 0, %0 ], [ %30, %29 ]*/
	if (((cur_state == LEGUP_F_main_BB__29_47) & (memory_controller_waitrequest == 1'd0))) begin
		main_1_2_reg <= main_1_2;
		if (start == 1'b0 && ^(main_1_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_2_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %result.0 = phi i32 [ 0, %0 ], [ %result.1, %29 ]*/
	if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd1))) begin
		main_1_result0 = 32'd0;
	end
	/* main: %1*/
	/*   %result.0 = phi i32 [ 0, %0 ], [ %result.1, %29 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__29_47) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_1_result0 = main_7_result1_reg;
	end
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %result.0 = phi i32 [ 0, %0 ], [ %result.1, %29 ]*/
	if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd1))) begin
		main_1_result0_reg <= main_1_result0;
		if (start == 1'b0 && ^(main_1_result0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_result0_reg"); $finish; end
	end
	/* main: %1*/
	/*   %result.0 = phi i32 [ 0, %0 ], [ %result.1, %29 ]*/
	if (((cur_state == LEGUP_F_main_BB__29_47) & (memory_controller_waitrequest == 1'd0))) begin
		main_1_result0_reg <= main_1_result0;
		if (start == 1'b0 && ^(main_1_result0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_result0_reg"); $finish; end
	end
end
always @(*) begin
	main_1_3 = main_1_3_stage0_reg;
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %3 = mul i32 %2, 3*/
	if ((cur_state == LEGUP_F_main_BB__1_2)) begin
		main_1_3_reg <= main_1_3;
		if (start == 1'b0 && ^(main_1_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_3_reg"); $finish; end
	end
	/* main: %1*/
	/*   %3 = mul i32 %2, 3*/
	if ((cur_state == LEGUP_F_main_BB__1_2)) begin
		main_1_3_reg <= main_1_3;
		if (start == 1'b0 && ^(main_1_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_3_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %4 = shl i32 %2, 1*/
		main_1_4 = (main_1_2_reg <<< (32'd1 % 32));
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %4 = shl i32 %2, 1*/
	if ((cur_state == LEGUP_F_main_BB__1_1)) begin
		main_1_4_reg <= main_1_4;
		if (start == 1'b0 && ^(main_1_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_4_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %5 = add i32 %4, 3*/
		main_1_5 = (main_1_4 + 32'd3);
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %5 = add i32 %4, 3*/
	if ((cur_state == LEGUP_F_main_BB__1_1)) begin
		main_1_5_reg <= main_1_5;
		if (start == 1'b0 && ^(main_1_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_5_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %exitcond7 = icmp eq i32 %2, 2*/
		main_1_exitcond7 = (main_1_2_reg == 32'd2);
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %exitcond7 = icmp eq i32 %2, 2*/
	if ((cur_state == LEGUP_F_main_BB__1_1)) begin
		main_1_exitcond7_reg <= main_1_exitcond7;
		if (start == 1'b0 && ^(main_1_exitcond7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_exitcond7_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %7*/
	/*   %8 = phi i32 [ 0, %6 ], [ %28, %27 ]*/
	if (((cur_state == LEGUP_F_main_BB__6_3) & (memory_controller_waitrequest == 1'd0))) begin
		main_7_8 = 32'd0;
	end
	/* main: %7*/
	/*   %8 = phi i32 [ 0, %6 ], [ %28, %27 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__27_46) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_7_8 = main_27_28;
	end
end
always @(posedge clk) begin
	/* main: %7*/
	/*   %8 = phi i32 [ 0, %6 ], [ %28, %27 ]*/
	if (((cur_state == LEGUP_F_main_BB__6_3) & (memory_controller_waitrequest == 1'd0))) begin
		main_7_8_reg <= main_7_8;
		if (start == 1'b0 && ^(main_7_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_7_8_reg"); $finish; end
	end
	/* main: %7*/
	/*   %8 = phi i32 [ 0, %6 ], [ %28, %27 ]*/
	if (((cur_state == LEGUP_F_main_BB__27_46) & (memory_controller_waitrequest == 1'd0))) begin
		main_7_8_reg <= main_7_8;
		if (start == 1'b0 && ^(main_7_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_7_8_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %7*/
	/*   %result.1 = phi i32 [ %result.0, %6 ], [ %result.2, %27 ]*/
	if (((cur_state == LEGUP_F_main_BB__6_3) & (memory_controller_waitrequest == 1'd0))) begin
		main_7_result1 = main_1_result0_reg;
	end
	/* main: %7*/
	/*   %result.1 = phi i32 [ %result.0, %6 ], [ %result.2, %27 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__27_46) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_7_result1 = main_17_result2_reg;
	end
end
always @(posedge clk) begin
	/* main: %7*/
	/*   %result.1 = phi i32 [ %result.0, %6 ], [ %result.2, %27 ]*/
	if (((cur_state == LEGUP_F_main_BB__6_3) & (memory_controller_waitrequest == 1'd0))) begin
		main_7_result1_reg <= main_7_result1;
		if (start == 1'b0 && ^(main_7_result1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_7_result1_reg"); $finish; end
	end
	/* main: %7*/
	/*   %result.1 = phi i32 [ %result.0, %6 ], [ %result.2, %27 ]*/
	if (((cur_state == LEGUP_F_main_BB__27_46) & (memory_controller_waitrequest == 1'd0))) begin
		main_7_result1_reg <= main_7_result1;
		if (start == 1'b0 && ^(main_7_result1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_7_result1_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %7*/
	/*   %9 = shl i32 %8, 1*/
		main_7_9 = (main_7_8_reg <<< (32'd1 % 32));
end
always @(*) begin
	/* main: %7*/
	/*   %10 = add i32 %3, %9*/
		main_7_10 = (main_1_3_reg + main_7_9);
end
always @(posedge clk) begin
	/* main: %7*/
	/*   %10 = add i32 %3, %9*/
	if ((cur_state == LEGUP_F_main_BB__7_4)) begin
		main_7_10_reg <= main_7_10;
		if (start == 1'b0 && ^(main_7_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_7_10_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %7*/
	/*   %11 = add i32 %5, %9*/
		main_7_11 = (main_1_5_reg + main_7_9);
end
always @(posedge clk) begin
	/* main: %7*/
	/*   %11 = add i32 %5, %9*/
	if ((cur_state == LEGUP_F_main_BB__7_4)) begin
		main_7_11_reg <= main_7_11;
		if (start == 1'b0 && ^(main_7_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_7_11_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %7*/
	/*   %scevgep6 = getelementptr [12 x i32]* @array, i32 0, i32 %11*/
		main_7_scevgep6 = (`TAG_g_array_a + (4 * main_7_11_reg));
end
always @(posedge clk) begin
	/* main: %7*/
	/*   %scevgep6 = getelementptr [12 x i32]* @array, i32 0, i32 %11*/
	if ((cur_state == LEGUP_F_main_BB__7_5)) begin
		main_7_scevgep6_reg <= main_7_scevgep6;
		if (start == 1'b0 && ^(main_7_scevgep6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_7_scevgep6_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %7*/
	/*   %12 = add i32 %4, %9*/
		main_7_12 = (main_1_4_reg + main_7_9);
end
always @(posedge clk) begin
	/* main: %7*/
	/*   %12 = add i32 %4, %9*/
	if ((cur_state == LEGUP_F_main_BB__7_4)) begin
		main_7_12_reg <= main_7_12;
		if (start == 1'b0 && ^(main_7_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_7_12_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %7*/
	/*   %exitcond = icmp eq i32 %8, 2*/
		main_7_exitcond = (main_7_8_reg == 32'd2);
end
always @(posedge clk) begin
	/* main: %7*/
	/*   %exitcond = icmp eq i32 %8, 2*/
	if ((cur_state == LEGUP_F_main_BB__7_4)) begin
		main_7_exitcond_reg <= main_7_exitcond;
		if (start == 1'b0 && ^(main_7_exitcond) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_7_exitcond_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %13*/
	/*   %14 = load volatile i32* %scevgep6, align 4*/
		main_13_14 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* main: %13*/
	/*   %15 = load volatile i32* %scevgep6, align 4*/
		main_13_15 = memory_controller_out_b[31:0];
end
always @(*) begin
	main_13_16 = main_signed_divide_32_0;
end
always @(*) begin
	/* main: %17*/
	/*   %result.2 = phi i32 [ %16, %13 ], [ %25, %19 ]*/
	if (((cur_state == LEGUP_F_main_BB__13_40) & (memory_controller_waitrequest == 1'd0))) begin
		main_17_result2 = main_13_16;
	end
	/* main: %17*/
	/*   %result.2 = phi i32 [ %16, %13 ], [ %25, %19 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__19_45) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_17_result2 = main_19_25;
	end
end
always @(posedge clk) begin
	/* main: %17*/
	/*   %result.2 = phi i32 [ %16, %13 ], [ %25, %19 ]*/
	if (((cur_state == LEGUP_F_main_BB__13_40) & (memory_controller_waitrequest == 1'd0))) begin
		main_17_result2_reg <= main_17_result2;
		if (start == 1'b0 && ^(main_17_result2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_17_result2_reg"); $finish; end
	end
	/* main: %17*/
	/*   %result.2 = phi i32 [ %16, %13 ], [ %25, %19 ]*/
	if (((cur_state == LEGUP_F_main_BB__19_45) & (memory_controller_waitrequest == 1'd0))) begin
		main_17_result2_reg <= main_17_result2;
		if (start == 1'b0 && ^(main_17_result2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_17_result2_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %17*/
	/*   %18 = phi i32 [ 0, %13 ], [ %26, %19 ]*/
	if (((cur_state == LEGUP_F_main_BB__13_40) & (memory_controller_waitrequest == 1'd0))) begin
		main_17_18 = 32'd0;
	end
	/* main: %17*/
	/*   %18 = phi i32 [ 0, %13 ], [ %26, %19 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__19_45) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_17_18 = main_19_26_reg;
	end
end
always @(posedge clk) begin
	/* main: %17*/
	/*   %18 = phi i32 [ 0, %13 ], [ %26, %19 ]*/
	if (((cur_state == LEGUP_F_main_BB__13_40) & (memory_controller_waitrequest == 1'd0))) begin
		main_17_18_reg <= main_17_18;
		if (start == 1'b0 && ^(main_17_18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_17_18_reg"); $finish; end
	end
	/* main: %17*/
	/*   %18 = phi i32 [ 0, %13 ], [ %26, %19 ]*/
	if (((cur_state == LEGUP_F_main_BB__19_45) & (memory_controller_waitrequest == 1'd0))) begin
		main_17_18_reg <= main_17_18;
		if (start == 1'b0 && ^(main_17_18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_17_18_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %17*/
	/*   %exitcond1 = icmp eq i32 %18, 3*/
		main_17_exitcond1 = (main_17_18_reg == 32'd3);
end
always @(*) begin
	/* main: %19*/
	/*   %20 = add i32 %12, %18*/
		main_19_20 = (main_7_12_reg + main_17_18_reg);
end
always @(posedge clk) begin
	/* main: %19*/
	/*   %20 = add i32 %12, %18*/
	if ((cur_state == LEGUP_F_main_BB__19_42)) begin
		main_19_20_reg <= main_19_20;
		if (start == 1'b0 && ^(main_19_20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_19_20_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %19*/
	/*   %scevgep1 = getelementptr [12 x i32]* @array, i32 0, i32 %20*/
		main_19_scevgep1 = (`TAG_g_array_a + (4 * main_19_20_reg));
end
always @(*) begin
	/* main: %19*/
	/*   %21 = add i32 %10, %18*/
		main_19_21 = (main_7_10_reg + main_17_18_reg);
end
always @(posedge clk) begin
	/* main: %19*/
	/*   %21 = add i32 %10, %18*/
	if ((cur_state == LEGUP_F_main_BB__19_42)) begin
		main_19_21_reg <= main_19_21;
		if (start == 1'b0 && ^(main_19_21) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_19_21_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %19*/
	/*   %scevgep = getelementptr [12 x i32]* @array, i32 0, i32 %21*/
		main_19_scevgep = (`TAG_g_array_a + (4 * main_19_21_reg));
end
always @(*) begin
	/* main: %19*/
	/*   %22 = load volatile i32* %scevgep1, align 4*/
		main_19_22 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* main: %19*/
	/*   %23 = load volatile i32* %scevgep, align 4*/
		main_19_23 = memory_controller_out_b[31:0];
end
always @(*) begin
	/* main: %19*/
	/*   %24 = add nsw i32 %22, %23*/
		main_19_24 = (main_19_22 + main_19_23);
end
always @(*) begin
	/* main: %19*/
	/*   %25 = add nsw i32 %result.2, %24*/
		main_19_25 = (main_17_result2_reg + main_19_24);
end
always @(*) begin
	/* main: %19*/
	/*   %26 = add nsw i32 %18, 1*/
		main_19_26 = (main_17_18_reg + 32'd1);
end
always @(posedge clk) begin
	/* main: %19*/
	/*   %26 = add nsw i32 %18, 1*/
	if ((cur_state == LEGUP_F_main_BB__19_42)) begin
		main_19_26_reg <= main_19_26;
		if (start == 1'b0 && ^(main_19_26) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_19_26_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %27*/
	/*   %28 = add nsw i32 %8, 1*/
		main_27_28 = (main_7_8_reg + 32'd1);
end
always @(*) begin
	/* main: %29*/
	/*   %30 = add nsw i32 %2, 1*/
		main_29_30 = (main_1_2_reg + 32'd1);
end
always @(*) begin
	/* main: %31*/
	/*   %32 = call fastcc i32 @fct() #4*/
		main_31_32 = fct_return_val_reg;
end
always @(posedge clk) begin
	/* main: %31*/
	/*   %32 = call fastcc i32 @fct() #4*/
	if ((cur_state == LEGUP_function_call_49)) begin
		main_31_32_reg <= main_31_32;
		if (start == 1'b0 && ^(main_31_32) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_31_32_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %31*/
	/*   %33 = add nsw i32 %result.0, %32*/
		main_31_33 = (main_1_result0_reg + main_31_32_reg);
end
always @(posedge clk) begin
	/* main: %31*/
	/*   %33 = add nsw i32 %result.0, %32*/
	if ((cur_state == LEGUP_F_main_BB__31_50)) begin
		main_31_33_reg <= main_31_33;
		if (start == 1'b0 && ^(main_31_33) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_31_33_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %31*/
	/*   %35 = icmp eq i32 %33, 156*/
		main_31_35 = (main_31_33 == 32'd156);
end
always @(posedge clk) begin
	/* main: %31*/
	/*   %32 = call fastcc i32 @fct() #4*/
	if ((cur_state == LEGUP_F_main_BB__31_48)) begin
		fct_start <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fct_start"); $finish; end
	end
	if ((cur_state == LEGUP_function_call_49)) begin
		fct_start <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fct_start"); $finish; end
	end
end
always @(*) begin
	fct_finish_final = fct_finish_reg;
end
always @(posedge clk) begin
	if ((reset | (cur_state == LEGUP_F_main_BB__31_48))) begin
		fct_finish_reg <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fct_finish_reg"); $finish; end
	end
	if (fct_finish) begin
		fct_finish_reg <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fct_finish_reg"); $finish; end
	end
end
always @(posedge clk) begin
	if ((reset | (cur_state == LEGUP_F_main_BB__31_48))) begin
		fct_return_val_reg <= 0;
		if (start == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fct_return_val_reg"); $finish; end
	end
	if (fct_finish) begin
		fct_return_val_reg <= fct_return_val;
		if (start == 1'b0 && ^(fct_return_val) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fct_return_val_reg"); $finish; end
	end
end
always @(*) begin
	legup_function_call = 1'd0;
	/* main: %31*/
	/*   %32 = call fastcc i32 @fct() #4*/
	if ((cur_state == LEGUP_function_call_49)) begin
		legup_function_call = 1'd1;
	end
end
always @(*) begin
	/* main: %13*/
	/*   %16 = sdiv i32 %14, %15*/
		main_signed_divide_32_0_op0 = main_13_14;
end
always @(*) begin
	/* main: %13*/
	/*   %16 = sdiv i32 %14, %15*/
		main_signed_divide_32_0_op1 = main_13_15;
end
always @(*) begin
	lpm_divide_main_13_16_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(*) begin
	lpm_divide_main_13_16_out = lpm_divide_main_13_16_temp_out;
end
always @(*) begin
	main_signed_divide_32_0 = lpm_divide_main_13_16_out;
end
always @(*) begin
	lpm_mult_main_1_3_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %3 = mul i32 %2, 3*/
	if ((lpm_mult_main_1_3_en == 1'd1)) begin
		main_1_3_stage0_reg <= (main_1_2_reg * 32'd3);
	end
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		finish <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
	/* main: %40*/
	/*   ret i32 %33*/
	if ((cur_state == LEGUP_F_main_BB__40_53)) begin
		finish <= (memory_controller_waitrequest == 1'd0);
		if (start == 1'b0 && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
end
always @(*) begin
	memory_controller_enable_a = 1'd0;
	/* main: %31*/
	/*   %32 = call fastcc i32 @fct() #4*/
	if ((cur_state == LEGUP_function_call_49)) begin
		memory_controller_enable_a = fct_memory_controller_enable_a;
	end
	/* main: %31*/
	/*   %32 = call fastcc i32 @fct() #4*/
	if ((cur_state == LEGUP_function_call_49)) begin
		memory_controller_enable_a = fct_memory_controller_enable_a;
	end
	/* main: %13*/
	/*   %14 = load volatile i32* %scevgep6, align 4*/
	if ((cur_state == LEGUP_F_main_BB__13_6)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %19*/
	/*   %22 = load volatile i32* %scevgep1, align 4*/
	if ((cur_state == LEGUP_F_main_BB__19_43)) begin
		memory_controller_enable_a = 1'd1;
	end
end
always @(*) begin
	memory_controller_address_a = 1'd0;
	/* main: %31*/
	/*   %32 = call fastcc i32 @fct() #4*/
	if ((cur_state == LEGUP_function_call_49)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = fct_memory_controller_address_a;
	end
	/* main: %31*/
	/*   %32 = call fastcc i32 @fct() #4*/
	if ((cur_state == LEGUP_function_call_49)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = fct_memory_controller_address_a;
	end
	/* main: %13*/
	/*   %14 = load volatile i32* %scevgep6, align 4*/
	if ((cur_state == LEGUP_F_main_BB__13_6)) begin
		memory_controller_address_a = main_7_scevgep6_reg;
	end
	/* main: %19*/
	/*   %22 = load volatile i32* %scevgep1, align 4*/
	if ((cur_state == LEGUP_F_main_BB__19_43)) begin
		memory_controller_address_a = main_19_scevgep1;
	end
end
always @(*) begin
	memory_controller_write_enable_a = 1'd0;
	/* main: %31*/
	/*   %32 = call fastcc i32 @fct() #4*/
	if ((cur_state == LEGUP_function_call_49)) begin
		memory_controller_write_enable_a = fct_memory_controller_write_enable_a;
	end
	/* main: %31*/
	/*   %32 = call fastcc i32 @fct() #4*/
	if ((cur_state == LEGUP_function_call_49)) begin
		memory_controller_write_enable_a = fct_memory_controller_write_enable_a;
	end
	/* main: %13*/
	/*   %14 = load volatile i32* %scevgep6, align 4*/
	if ((cur_state == LEGUP_F_main_BB__13_6)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %19*/
	/*   %22 = load volatile i32* %scevgep1, align 4*/
	if ((cur_state == LEGUP_F_main_BB__19_43)) begin
		memory_controller_write_enable_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_in_a = 1'd0;
	/* main: %31*/
	/*   %32 = call fastcc i32 @fct() #4*/
	if ((cur_state == LEGUP_function_call_49)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = fct_memory_controller_in_a;
	end
	/* main: %31*/
	/*   %32 = call fastcc i32 @fct() #4*/
	if ((cur_state == LEGUP_function_call_49)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = fct_memory_controller_in_a;
	end
end
always @(*) begin
	memory_controller_size_a = 1'd0;
	if ((cur_state == LEGUP_function_call_49)) begin
		memory_controller_size_a[1:0] = fct_memory_controller_size_a;
	end
	/* main: %31*/
	/*   %32 = call fastcc i32 @fct() #4*/
	if ((cur_state == LEGUP_function_call_49)) begin
		memory_controller_size_a[1:0] = fct_memory_controller_size_a;
	end
	/* main: %13*/
	/*   %14 = load volatile i32* %scevgep6, align 4*/
	if ((cur_state == LEGUP_F_main_BB__13_6)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %19*/
	/*   %22 = load volatile i32* %scevgep1, align 4*/
	if ((cur_state == LEGUP_F_main_BB__19_43)) begin
		memory_controller_size_a = 2'd2;
	end
end
always @(*) begin
	memory_controller_enable_b = 1'd0;
	/* main: %31*/
	/*   %32 = call fastcc i32 @fct() #4*/
	if ((cur_state == LEGUP_function_call_49)) begin
		memory_controller_enable_b = fct_memory_controller_enable_b;
	end
	/* main: %31*/
	/*   %32 = call fastcc i32 @fct() #4*/
	if ((cur_state == LEGUP_function_call_49)) begin
		memory_controller_enable_b = fct_memory_controller_enable_b;
	end
	/* main: %13*/
	/*   %15 = load volatile i32* %scevgep6, align 4*/
	if ((cur_state == LEGUP_F_main_BB__13_6)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %19*/
	/*   %23 = load volatile i32* %scevgep, align 4*/
	if ((cur_state == LEGUP_F_main_BB__19_43)) begin
		memory_controller_enable_b = 1'd1;
	end
end
always @(*) begin
	memory_controller_address_b = 1'd0;
	/* main: %31*/
	/*   %32 = call fastcc i32 @fct() #4*/
	if ((cur_state == LEGUP_function_call_49)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = fct_memory_controller_address_b;
	end
	/* main: %31*/
	/*   %32 = call fastcc i32 @fct() #4*/
	if ((cur_state == LEGUP_function_call_49)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = fct_memory_controller_address_b;
	end
	/* main: %13*/
	/*   %15 = load volatile i32* %scevgep6, align 4*/
	if ((cur_state == LEGUP_F_main_BB__13_6)) begin
		memory_controller_address_b = main_7_scevgep6_reg;
	end
	/* main: %19*/
	/*   %23 = load volatile i32* %scevgep, align 4*/
	if ((cur_state == LEGUP_F_main_BB__19_43)) begin
		memory_controller_address_b = main_19_scevgep;
	end
end
always @(*) begin
	memory_controller_write_enable_b = 1'd0;
	/* main: %31*/
	/*   %32 = call fastcc i32 @fct() #4*/
	if ((cur_state == LEGUP_function_call_49)) begin
		memory_controller_write_enable_b = fct_memory_controller_write_enable_b;
	end
	/* main: %31*/
	/*   %32 = call fastcc i32 @fct() #4*/
	if ((cur_state == LEGUP_function_call_49)) begin
		memory_controller_write_enable_b = fct_memory_controller_write_enable_b;
	end
	/* main: %13*/
	/*   %15 = load volatile i32* %scevgep6, align 4*/
	if ((cur_state == LEGUP_F_main_BB__13_6)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %19*/
	/*   %23 = load volatile i32* %scevgep, align 4*/
	if ((cur_state == LEGUP_F_main_BB__19_43)) begin
		memory_controller_write_enable_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_in_b = 1'd0;
	/* main: %31*/
	/*   %32 = call fastcc i32 @fct() #4*/
	if ((cur_state == LEGUP_function_call_49)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = fct_memory_controller_in_b;
	end
	/* main: %31*/
	/*   %32 = call fastcc i32 @fct() #4*/
	if ((cur_state == LEGUP_function_call_49)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = fct_memory_controller_in_b;
	end
end
always @(*) begin
	memory_controller_size_b = 1'd0;
	if ((cur_state == LEGUP_function_call_49)) begin
		memory_controller_size_b[1:0] = fct_memory_controller_size_b;
	end
	/* main: %31*/
	/*   %32 = call fastcc i32 @fct() #4*/
	if ((cur_state == LEGUP_function_call_49)) begin
		memory_controller_size_b[1:0] = fct_memory_controller_size_b;
	end
	/* main: %13*/
	/*   %15 = load volatile i32* %scevgep6, align 4*/
	if ((cur_state == LEGUP_F_main_BB__13_6)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %19*/
	/*   %23 = load volatile i32* %scevgep, align 4*/
	if ((cur_state == LEGUP_F_main_BB__19_43)) begin
		memory_controller_size_b = 2'd2;
	end
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		return_val <= 0;
		if (start == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
	end
	/* main: %40*/
	/*   ret i32 %33*/
	if ((cur_state == LEGUP_F_main_BB__40_53)) begin
		return_val <= main_31_33_reg;
		if (start == 1'b0 && ^(main_31_33_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
	end
end

endmodule 
module ram_dual_port
(
	clk,
	clken,
	address_a,
	address_b,
	wren_a,
	wren_b,
	data_a,
	data_b,
	byteena_a,
	byteena_b,
	q_a,
	q_b
);

parameter  width_a = 1'd0;
parameter  width_b = 1'd0;
parameter  widthad_a = 1'd0;
parameter  widthad_b = 1'd0;
parameter  numwords_a = 1'd0;
parameter  numwords_b = 1'd0;
parameter  init_file = "UNUSED.mif";
parameter  width_be_a = 1'd0;
parameter  width_be_b = 1'd0;
parameter  latency = 1;

input  clk;
input  clken;
input [(widthad_a-1):0] address_a;
input [(widthad_b-1):0] address_b;
output wire [(width_a-1):0] q_a;
output wire [(width_b-1):0] q_b;
reg [(width_a-1):0] q_a_wire;
reg [(width_b-1):0] q_b_wire;
input  wren_a;
input  wren_b;
input [(width_a-1):0] data_a;
input [(width_b-1):0] data_b;
// byte enable is unsupported by inferred RAMs
input [width_be_a-1:0] byteena_a;
input [width_be_b-1:0] byteena_b;

(* ramstyle = "no_rw_check", ram_init_file = init_file *) reg [width_a-1:0] ram[numwords_a-1:0];

/* synthesis translate_off */
integer i;
ALTERA_MF_MEMORY_INITIALIZATION mem ();
reg [8*256:1] ram_ver_file;
initial begin
	if (init_file == "UNUSED.mif")
    begin
		for (i = 0; i < numwords_a; i = i + 1)
			ram[i] = 0;
    end
	else
    begin
        // modelsim can't read .mif files directly. So use Altera function to
        // convert them to .ver files
        mem.convert_to_ver_file(init_file, width_a, ram_ver_file);
        $readmemh(ram_ver_file, ram);
    end
end
/* synthesis translate_on */

always @ (posedge clk)
if (clken)
begin // Port A
if (wren_a)
begin
    ram[address_a] <= data_a;
    q_a_wire <= {width_a{1'bX}};
end
else
    q_a_wire <= ram[address_a];
end
always @ (posedge clk)
if (clken)
begin // Port b
if (wren_b)
begin
    ram[address_b] <= data_b;
    q_b_wire <= {width_b{1'bX}};
end
else
    q_b_wire <= ram[address_b];
end



integer j;
reg [(width_a-1):0] q_a_reg[latency:1], q_b_reg[latency:1];

always @(*)
begin
   q_a_reg[1] <= q_a_wire;
   q_b_reg[1] <= q_b_wire;
end

always @(posedge clk)
if (clken)
begin
   for (j = 1; j < latency; j=j+1)
   begin
       q_a_reg[j+1] <= q_a_reg[j];
       q_b_reg[j+1] <= q_b_reg[j];
   end
end

assign q_a = (clken) ? q_a_reg[latency] : 0;
assign q_b = (clken) ? q_b_reg[latency] : 0;


endmodule
module rom_dual_port
(
	clk,
	clken,
	address_a,
	address_b,
	q_a,
	q_b
);

parameter  width_a = 1'd0;
parameter  width_b = 1'd0;
parameter  widthad_a = 1'd0;
parameter  widthad_b = 1'd0;
parameter  numwords_a = 1'd0;
parameter  numwords_b = 1'd0;
parameter  init_file = "UNUSED.mif";
parameter  latency = 1;

input  clk;
input  clken;
input [(widthad_a-1):0] address_a;
input [(widthad_b-1):0] address_b;
output wire [(width_a-1):0] q_a;
output wire [(width_b-1):0] q_b;
reg [(width_a-1):0] q_a_wire;
reg [(width_b-1):0] q_b_wire;

(* ramstyle = "no_rw_check", ram_init_file = init_file *) reg [width_a-1:0] ram[numwords_a-1:0];

/* synthesis translate_off */
integer i;
ALTERA_MF_MEMORY_INITIALIZATION mem ();
reg [8*256:1] ram_ver_file;
initial begin
	if (init_file == "UNUSED.mif")
    begin
		for (i = 0; i < numwords_a; i = i + 1)
			ram[i] = 0;
    end
	else
    begin
        // modelsim can't read .mif files directly. So use Altera function to
        // convert them to .ver files
        mem.convert_to_ver_file(init_file, width_a, ram_ver_file);
        $readmemh(ram_ver_file, ram);
    end
end
/* synthesis translate_on */

always @ (posedge clk)
if (clken)
begin
    q_a_wire <= ram[address_a];
    q_b_wire <= ram[address_b];
end



integer j;
reg [(width_a-1):0] q_a_reg[latency:1], q_b_reg[latency:1];

always @(*)
begin
   q_a_reg[1] <= q_a_wire;
   q_b_reg[1] <= q_b_wire;
end

always @(posedge clk)
if (clken)
begin
   for (j = 1; j < latency; j=j+1)
   begin
       q_a_reg[j+1] <= q_a_reg[j];
       q_b_reg[j+1] <= q_b_reg[j];
   end
end

assign q_a = (clken) ? q_a_reg[latency] : 0;
assign q_b = (clken) ? q_b_reg[latency] : 0;


endmodule
// Adding code from verilog file: ../../../../boards/CycloneII/DE2/top.v


module de2 (
	    CLOCK_50,
	    KEY,
	    SW,
	    HEX0,
	    HEX1,
	    HEX2,
	    HEX3,
	    HEX4,
	    HEX5,
	    HEX6,
	    HEX7,
	    LEDG,
		UART_RXD,
		UART_TXD

	    );

   input CLOCK_50;
   input [3:0] KEY;
   input [17:0] SW;
   output [6:0] HEX0, HEX1,  HEX2,  HEX3,  HEX4,  HEX5,  HEX6,  HEX7;
   reg [6:0] 	hex0, hex1, hex2, hex3, hex4, hex5, hex6, hex7;
   

   output [7:0] LEDG;
    input UART_RXD;
    output UART_TXD;    
	wire clk = CLOCK_50;
	wire go = ~KEY[1];



   wire 	reset = ~KEY[0];
   wire 	start;
   wire [31:0] 	return_val;
   reg  [31:0] 	return_val_reg;
   wire 	finish;
   wire [3:0]	state;

   hex_digits h7( .x(hex7), .hex_LEDs(HEX7));
   hex_digits h6( .x(hex6), .hex_LEDs(HEX6));
   hex_digits h5( .x(hex5), .hex_LEDs(HEX5));
   hex_digits h4( .x(hex4), .hex_LEDs(HEX4));
   hex_digits h3( .x(hex3), .hex_LEDs(HEX3));
   hex_digits h2( .x(hex2), .hex_LEDs(HEX2));
   hex_digits h1( .x(hex1), .hex_LEDs(HEX1));
   hex_digits h0( .x(hex0), .hex_LEDs(HEX0));
   
	always @ (*) begin
		hex7 <= return_val_reg[31:28];
		hex6 <= return_val_reg[27:24];
		hex5 <= return_val_reg[23:20];
		hex4 <= return_val_reg[19:16];
		hex3 <= return_val_reg[15:12];
		hex2 <= return_val_reg[11:8];
		hex1 <= return_val_reg[7:4];
		hex0 <= return_val_reg[3:0];
	end
assign UART_TXD = 1'b0;

    parameter s_WAIT = 3'b001, s_START = 3'b010, s_EXE = 3'b011,
                s_DONE = 3'b100;

    // state registers
    reg [3:0] y_Q, Y_D;

    assign LEDG[3:0] = y_Q;

    // next state
    always @(*)
    begin
        case (y_Q)
            s_WAIT: if (go) Y_D = s_START; else Y_D = y_Q;

            s_START: Y_D = s_EXE;

            s_EXE: if (!finish) Y_D = s_EXE; else Y_D = s_DONE;

            s_DONE: Y_D = s_DONE;

            default: Y_D = 3'bxxx;
        endcase
    end

    // current state
    always @(posedge clk)
    begin
        if (reset) // synchronous clear
            y_Q <= s_WAIT;
        else
            y_Q <= Y_D;
    end

    always @(posedge clk)
        if (y_Q == s_EXE && finish)
            return_val_reg <= return_val;
        else if (y_Q == s_DONE)
            return_val_reg <= return_val_reg;
        else
            return_val_reg <= 0;


    assign start = (y_Q == s_START);

   
   top top_inst (
      .clk (clk),
      .reset (reset),
      .finish (finish),
      .return_val (return_val),
        .start (start)

    );

endmodule

// Adding code from verilog file: ../../../../boards/Virtex6/ML605/top.v


module ML605 (
       USER_CLOCK,
	    KEY,
	    SW,	    
       LED,
       LEDG,
		UART_RXD,
		UART_TXD

	    );

   input USER_CLOCK;
   input [4:0] KEY;
   input [7:0] SW;
   output [7:0] LED;
   output [7:0] LEDG;
   wire CLOCK_50;

    input UART_RXD;
    output UART_TXD;    
	wire clk = CLOCK_50;
	wire go = ~KEY[1];



   wire 	reset = ~KEY[0];
   wire 	start;
   wire [31:0] 	return_val;
   reg  [31:0] 	return_val_reg;
   wire 	finish;
   wire [3:0]	state;
   
   reg [6:0]   hex0, hex1, hex2, hex3, hex4, hex5, hex6, hex7;

   assign CLOCK_50 = USER_CLOCK;
   assign LED = 0;
   
	always @ (*) begin
		hex7 <= return_val_reg[31:28];
		hex6 <= return_val_reg[27:24];
		hex5 <= return_val_reg[23:20];
		hex4 <= return_val_reg[19:16];
		hex3 <= return_val_reg[15:12];
		hex2 <= return_val_reg[11:8];
		hex1 <= return_val_reg[7:4];
		hex0 <= return_val_reg[3:0];
	end
assign UART_TXD = 1'b0;

    parameter s_WAIT = 3'b001, s_START = 3'b010, s_EXE = 3'b011,
                s_DONE = 3'b100;

    // state registers
    reg [3:0] y_Q, Y_D;

    assign LEDG[3:0] = y_Q;

    // next state
    always @(*)
    begin
        case (y_Q)
            s_WAIT: if (go) Y_D = s_START; else Y_D = y_Q;

            s_START: Y_D = s_EXE;

            s_EXE: if (!finish) Y_D = s_EXE; else Y_D = s_DONE;

            s_DONE: Y_D = s_DONE;

            default: Y_D = 3'bxxx;
        endcase
    end

    // current state
    always @(posedge clk)
    begin
        if (reset) // synchronous clear
            y_Q <= s_WAIT;
        else
            y_Q <= Y_D;
    end

    always @(posedge clk)
        if (y_Q == s_EXE && finish)
            return_val_reg <= return_val;
        else if (y_Q == s_DONE)
            return_val_reg <= return_val_reg;
        else
            return_val_reg <= 0;


    assign start = (y_Q == s_START);

   
   top top_inst (
      .clk (clk),
      .reset (reset),
      .finish (finish),
      .return_val (return_val),
        .start (start)

    );

   

endmodule

// Adding code from verilog file: ../../../../boards/StratixIV/DE4/top.v


module de4 ( 
    	     OSC_50_BANK2, 
             BUTTON, 
             LED, 
    	     SEG0_D, 
    	     SEG1_D 
	     ); 
   input OSC_50_BANK2; 
   input [1:0] BUTTON; 
   output [6:0] SEG0_D; 
   output [6:0] SEG1_D; 
   output [7:0] LED; 
   
   de2 de2_inst ( 
		  .CLOCK_50 (OSC_50_BANK2), 
		  .LEDG (LED), 
		  .KEY (BUTTON), 
		  .SW (), 
		  .HEX0 (SEG0_D), 
		  .HEX1 (SEG1_D), 
		  .HEX2 (), 
		  .HEX3 (), 
		  .HEX4 (), 
		  .HEX5 (), 
		  .HEX6 (), 
		  .HEX7 () 
		  ); 
   
endmodule
module circuit_start_control (
    go,
    control_key
);
    input control_key;
    output go;
    assign go = control_key;
endmodule
module hex_digits(x, hex_LEDs);
    input [3:0] x;
    output [6:0] hex_LEDs;
    
    assign hex_LEDs[0] = (~x[3] & ~x[2] & ~x[1] & x[0]) |
                            (~x[3] & x[2] & ~x[1] & ~x[0]) |
                            (x[3] & x[2] & ~x[1] & x[0]) |
                            (x[3] & ~x[2] & x[1] & x[0]);
    assign hex_LEDs[1] = (~x[3] & x[2] & ~x[1] & x[0]) |
                            (x[3] & x[1] & x[0]) |
                            (x[3] & x[2] & ~x[0]) |
                            (x[2] & x[1] & ~x[0]);
    assign hex_LEDs[2] = (x[3] & x[2] & ~x[0]) |
                            (x[3] & x[2] & x[1]) |
                            (~x[3] & ~x[2] & x[1] & ~x[0]);
    assign hex_LEDs[3] = (~x[3] & ~x[2] & ~x[1] & x[0]) | 
                            (~x[3] & x[2] & ~x[1] & ~x[0]) | 
                            (x[2] & x[1] & x[0]) | 
                            (x[3] & ~x[2] & x[1] & ~x[0]);
    assign hex_LEDs[4] = (~x[3] & x[0]) |
                            (~x[3] & x[2] & ~x[1]) |
                            (~x[2] & ~x[1] & x[0]);
    assign hex_LEDs[5] = (~x[3] & ~x[2] & x[0]) | 
                            (~x[3] & ~x[2] & x[1]) | 
                            (~x[3] & x[1] & x[0]) | 
                            (x[3] & x[2] & ~x[1] & x[0]);
    assign hex_LEDs[6] = (~x[3] & ~x[2] & ~x[1]) | 
                            (x[3] & x[2] & ~x[1] & ~x[0]) | 
                            (~x[3] & x[2] & x[1] & x[0]);
    
endmodule
`timescale 1 ns / 1 ns
module main_tb
(
);

reg  clk;
reg  reset;
reg  start;
reg  waitrequest;
wire [31:0] return_val;
wire  finish;


top top_inst (
	.clk (clk),
	.reset (reset),
	.start (start),
	.waitrequest (waitrequest),
	.finish (finish),
	.return_val (return_val)
);




initial 
    clk = 0;
always @(clk)
    clk <= #10 ~clk;

initial begin
//$monitor("At t=%t clk=%b %b %b %b %d", $time, clk, reset, start, finish, return_val);
@(negedge clk);
reset <= 1;
@(negedge clk);
reset <= 0;
start <= 1;
@(negedge clk);
start <= 0;
end

always@(finish) begin
    if (finish == 1) begin
        $display("At t=%t clk=%b finish=%b return_val=%d", $time, clk, finish, return_val);
        $display("Cycles: %d", ($time-50)/20);
        $finish;
    end
end

initial begin
waitrequest <= 1;
@(negedge clk);
@(negedge clk);
waitrequest <= 0;
end


endmodule 
