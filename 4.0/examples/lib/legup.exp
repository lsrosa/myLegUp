# constants
proc MODELSIM_ERROR {} { return 1 }
proc LEGUP_ERROR {} { return 2 }

# expect that modelsim will give an error
# see unaligned/ for example
proc run-test-modelsim-error { test expected} {
    run-test $test $expected [MODELSIM_ERROR]
}

proc run-test-legup-error { test expected} {
    run-test $test $expected [LEGUP_ERROR]
}

# test an example:
# 1) compile c to verilog
# 2) run modelsim
# 3) check for warnings/errors if expect_error = 0 (default)
# 4) check for expected output

proc run-test-gx { test gxexpected {expect_error 0}} {
    eval exec "make clean"
    set output [run-cmd $test "make emultest"]
    run-regexp "gxemul simulation. Expected: $gxexpected" $gxexpected $output
}

proc run-test-pcie { test pcieexpected {expect_error 0}} {
    # Run make pcieV and ignore stderr
    set output [run-cmd $test "make pcieV 2> /dev/null"]
    run-regexp "PCIe simulation. Expected: $pcieexpected" $pcieexpected $output
}

proc run-test-transcript { test transcriptexpected {expect_error 0}} {
    # Read the transcript from a previous test
    set output [run-cmd $test "cat transcript"]
    run-regexp "PCIe simulation. Expected: $transcriptexpected" $transcriptexpected $output
}

proc run-test-qemu { test expected {expect_error 0}} {
    puts "\n\nStarting QEMU test for: $test"
    eval exec "make clean"

    set output [run-cmd $test "make qemu"]

    run-regexp "QEMU test \"$test\". Expected: \"$expected\"" $expected $output

    puts "Finished QEMU test for: $test\n\n"
}

proc run-test-on-board { test expected {expect_error 0}} {
    puts "\n\nStarting on-board test for: $test"
    eval exec "make clean"

	set allow_failure 1
    set output [run-cmd $test "make sw" $allow_failure]
    append output [run-cmd $test "make run_on_board" $allow_failure]

    run-regexp "on-board test \"$test\". Expected: \"$expected\"" $expected $output

    puts "Finished on-board test for: $test\n\n"
}

proc run-test-sw-once { test expected noinline noopt {expect_error 0}} {

    set ::env(NO_INLINE) "$noinline"
    set ::env(NO_OPT) "$noopt"

    set title "$test sw simulation (NO_INLINE=$noinline, NO_OPT=$noopt)"
    puts "starting pure SW: $title";

    eval exec "make clean"
    # don't fail when we see: Reconnected to license server
    set allow_failure 1
    set output [run-cmd $test "make swsim" $allow_failure]

    # Modelsim Altera edition 14.1 prints message like "Errors: 0, Warnings: 0"
    # at the end of simulation. Remove them from output.
    regsub -all {Errors: 0, Warnings:} $output "" output

    run-regexp "$title Expected: $expected" $expected $output

    if { $expect_error != [MODELSIM_ERROR] } {
        #run-no-regexp "Modelsim warnings" "Warning" $output
        run-no-regexp "Modelsim errors" "Error" $output

        # ignore ModelSim warning about reconnecting to the license server
        run-no-regexp "License server reconnect" "Reconnected to license server" $output \
                      "Reconnected to license server for feature msimhdlsim after 1 retries"
    }

    puts "finished: $test";

    unset ::env(NO_INLINE)
    unset ::env(NO_OPT)
}

proc run-test-profile-sw-once { test expected noinline noopt {expect_error 0}} {

    set ::env(NO_INLINE) "$noinline"
    set ::env(NO_OPT) "$noopt"

    set title "$test sw with profiling simulation (NO_INLINE=$noinline, NO_OPT=$noopt)"
    puts "starting pure SW with profiling: $title";

    eval exec "make clean"
    # don't fail when we see: Reconnected to license server
    set allow_failure 1
    set output [run-cmd $test "make swprofilesim" $allow_failure]

    # Modelsim Altera edition 14.1 prints message like "Errors: 0, Warnings: 0"
    # at the end of simulation. Remove them from output.
    regsub -all {Errors: 0, Warnings:} $output "" output

    run-regexp "$title Expected: $expected" $expected $output

    if { $expect_error != [MODELSIM_ERROR] } {
        #run-no-regexp "Modelsim warnings" "Warning" $output
        run-no-regexp "Modelsim errors" "Error" $output

        # ignore ModelSim warning about reconnecting to the license server
        run-no-regexp "License server reconnect" "Reconnected to license server" $output \
                      "Reconnected to license server for feature msimhdlsim after 1 retries"
    }

    puts "finished: $test";

    unset ::env(NO_INLINE)
    unset ::env(NO_OPT)
}

proc run-test-sw { test expected {expect_error 0}} {

    run-test-sw-once $test $expected 0 0 $expect_error

    # no_inline
    run-test-sw-once $test $expected 1 0 $expect_error

    # no_inline and no_opt
    run-test-sw-once $test $expected 1 1 $expect_error

}

proc run-test-hw-profiler { test benchmark_name expected_function_size_order \
                            noinline noopt printf_off args} {
    set ::env(PROFILER_ON) "DEFINED"
    if {$printf_off == 1} {
        set ::env(PRINTF_OFF) "DEFINED" ;# Trun off printf functions.
    }
    set swexpected {Function <main>} ;# Always expect to see main function.
    run-test-profile-sw-once $test $swexpected $noinline $noopt

    set order_by_size_cmd {make produce_ordered_profiling_results}
#    set order_by_size_cmd {sed "s/^Address.*Hash-Func Number.*Count  // " }
#    append order_by_size_cmd output2/$benchmark_name.sim.profiling.rpt
#    append order_by_size_cmd { | sort -g}
#    append order_by_size_cmd { | sed "s/.*, Function </</"}
#    append order_by_size_cmd { | sed "s/>.*$/>/"}
#    append order_by_size_cmd { | sed ":a;N;$!ba;s/\\n//g"}
    set output [run-cmd $test $order_by_size_cmd]
    regsub -all {\n$} $output "" output
    # Ignore functions listed in $args.
    foreach ignore_func $args {
        regsub $ignore_func $output "" output
    }
    puts "Actual Output:"
    puts $output
    puts "Expected Output:"
    puts $expected_function_size_order

    run-regexp "$test: compare function size order" $expected_function_size_order $output
    unset ::env(PROFILER_ON)
    unset ::env(PRINTF_OFF)
}

proc run-test-hybrid-once-on-board { test hybridexpected {expect_error 0}} {
    puts "starting hybrid: $test"

    # Clear the directory
    eval exec "make clean"

    set allow_failure 1
	set output [run-cmd "$test build" "make hybrid" $allow_failure]
	append output [run-cmd "$test compile" "make hybrid_compile" $allow_failure]
	append output [run-cmd "$test program" "make program_board" $allow_failure]
    append output [run-cmd "$test run" "make run_on_board" $allow_failure]
    set allow_failure 0

    # Modelsim Altera edition 14.1 prints message like "Errors: 0, Warnings: 0"
    # at the end of simulation. Remove them from output.
    regsub -all {Errors: 0, Warnings:} $output "" output

    run-regexp "$test hybrid on-board. Expected $hybridexpected" $hybridexpected $output

    puts "finished: $test";
}

proc run-test-hybridparallel-once-on-board { test hybridexpected {expect_error 0}} {
    puts "starting hybrid: $test"

    # Clear the directory
    eval exec "make clean"

    set allow_failure 1
	set output [run-cmd "$test build" "make hybridparallel" $allow_failure]
	append output [run-cmd "$test compile" "make hybrid_compile" $allow_failure]
	append output [run-cmd "$test program" "make program_board" $allow_failure]
    append output [run-cmd "$test run" "make run_on_board" $allow_failure]
    set allow_failure 0

    # Modelsim Altera edition 14.1 prints message like "Errors: 0, Warnings: 0"
    # at the end of simulation. Remove them from output.
    regsub -all {Errors: 0, Warnings:} $output "" output

    run-regexp "$test hybridparallel on-board. Expected $hybridexpected" $hybridexpected $output

    puts "finished: $test";
}

proc run-test-hybrid { test hybridexpected {expect_error 0}} {

    #do make functionslist to generate functions.list which contains a list of functions
    run-cmd $test "make functionslist"

    #Open up functions.list and for each function, set it as accelerator and call make hybrid
    set in [open "$test.list" r]
    while {[gets $in line] != -1} {
        exec echo "set_accelerator_function \"$line\"" > config.tcl
        set test_function "$test\_$line"
        run-test-hybrid-once $test_function $hybridexpected $expect_error
    }
    close $in

}

proc run-test-hybrid-once { test hybridexpected {expect_error 0}} {
    puts "starting hybrid: $test"
    
    # Clear the directory
    eval exec "make clean"

    set allow_failure 1
    set output [run-cmd $test "make hybridsim" $allow_failure]
    set allow_failure 0

#    cd tiger
#    run-cmd $test "quartus_sh --flow compile tiger_top"
#    cd ..
#    run-cmd $test "mv tiger $test"

    # Modelsim Altera edition 14.1 prints message like "Errors: 0, Warnings: 0"
    # at the end of simulation. Remove them from output.
    regsub -all {Errors: 0, Warnings:} $output "" output

    run-regexp "hybrid simulation. Expected $hybridexpected" $hybridexpected $output

    if { $expect_error != [MODELSIM_ERROR] } {
        #run-no-regexp "Modelsim warnings" "Warning" $output
        run-no-regexp "Modelsim errors" "Error" $output
    }

    puts "finished: $test";
}

proc run-test-hybridparallel-once { test hybridexpected {expect_error 0}} {
    puts "starting hybrid parallel: $test"

    # Clear the directory
    eval exec "make clean"

    set allow_failure 1
    set output [run-cmd $test "make hybridparallelsim" $allow_failure]
    set allow_failure 0

#    cd tiger
#    run-cmd $test "quartus_sh --flow compile tiger_top"
#    cd ..
#    run-cmd $test "mv tiger $test"

    # Modelsim Altera edition 14.1 prints message like "Errors: 0, Warnings: 0"
    # at the end of simulation. Remove them from output.
    regsub -all {Errors: 0, Warnings:} $output "" output

    run-regexp "hybrid simulation. Expected $hybridexpected" $hybridexpected $output

    if { $expect_error != [MODELSIM_ERROR] } {
        #run-no-regexp "Modelsim warnings" "Warning" $output
        run-no-regexp "Modelsim errors" "Error" $output
    }

    puts "finished: $test";
}

proc run-test-parallel-once { test expected {expect_error 0}} {
    puts "starting pure HW parallel: $test"
    set allow_failure 1
    set output [run-cmd $test "make parallelsim" $allow_failure]
    set allow_failure 0

    # Modelsim Altera edition 14.1 prints message like "Errors: 0, Warnings: 0"
    # at the end of simulation. Remove them from output.
    regsub -all {Errors: 0, Warnings:} $output "" output

    run-regexp "parallel pure HW simulation. Expected $expected" $expected $output

    if { $expect_error != [MODELSIM_ERROR] } {
        #run-no-regexp "Modelsim warnings" "Warning" $output
        run-no-regexp "Modelsim errors" "Error" $output
    }

    puts "finished: $test";
}

proc run-test-full { test expected gxexpected {expect_error 0}} {

    # turn off local RAMs for these tests
    set ::env(LEGUP_LOCAL_RAMS) 0

    set ::env(NO_OPT) 0
    set ::env(NO_INLINE) 1

    run-test $test $expected
    run-test-gx $test $gxexpected

    set ::env(NO_OPT) 1

    run-test $test $expected
    run-test-gx $test $gxexpected

    unset ::env(NO_INLINE)
    unset ::env(NO_OPT)

    unset ::env(LEGUP_LOCAL_RAMS)
}

proc run-test { test expected {expect_error 0}} {
    eval exec "make clean"
    if { $expect_error == [LEGUP_ERROR] } {
        set allow_failure 1
        set output [run-cmd $test "make" $allow_failure]
        run-regexp "Error expected: $expected" $expected $output
        # legup is expected to fail so skip modelsim
        return
    } else {
        run-cmd $test "make"
    }

    # test modelsim
    # don't fail when we see: Reconnected to license server
    set allow_failure 1
    set output [run-cmd $test "make v" $allow_failure]

    # Modelsim Altera edition 14.1 prints message like "Errors: 0, Warnings: 0"
    # at the end of simulation. Remove them from output.
    regsub -all {Errors: 0, Warnings:} $output "" output

    if { $expect_error != [MODELSIM_ERROR] } {
        # ignore warning for Altera Modelsim starter edition
        run-no-regexp "Modelsim warnings" "Warning" $output \
                      "Design size .* exceeds .* recommended capacity"
        # ignore ModelSim warning about reconnecting to the license server
        run-no-regexp "License server reconnect" "Reconnected to license server" $output \
                      "Reconnected to license server for feature msimhdlsim after 1 retries"

        run-no-regexp "Modelsim errors" "Error" $output
    }

    run-regexp "Modelsim simulation. Expected: $expected" $expected $output

    # Too slow, need to conditionally enable Quartus
    #set args "main --source=$test.v --family=StratixIV"
    #set output [run-cmd "$test: Quartus Synthesis" "quartus_map $args"]
    #run-no-regexp "Quartus warnings" "Warning" $output

    #run-cmd "$test: Quartus Compile" "quartus_sh --flow compile $test"
}

proc run-regexp { test regexp var} {
    if [regexp $regexp $var] {
        pass "$test"
    } else {
        fail "$test"
    }
}

# make sure regular expression does NOT match
proc run-no-regexp { test regexp var {ignore ""}} {
    if [regexp $regexp $var] {
        if { [string length $ignore] != 0 && [regexp $ignore $var] } { 
            pass "$test"
        } else {
            fail "$test"
        }
    } else {
        pass "$test"
    }
}

proc run-cmd { test cmd {allow_failure 0}} {
  set status 0
  set resultmsg ""
  set retval [ catch { eval exec -keepnewline -- "$cmd" } errmsg ]

  # re-run command once if we fail to checkout a license
  if { [string first "Unable to checkout a license" $errmsg] != -1 } {
    puts $errmsg
    puts "ModelSim could not connect to license server!"
    puts "Re-running command \"$cmd\"."
    # TODO: instead - ping license server until it comes back up?
    eval exec "sleep 30"
    set retval [ catch { eval exec -keepnewline -- "$cmd" } errmsg ]
  }

  if { $retval != 0 } {
    set code [lindex $::errorCode 0]
    switch "$code" {
      CHILDSTATUS {
        set status [lindex $::errorCode 2]
        if { $status != 0 } {
          set resultmsg "$test\nFailed with exit($status)$errmsg"
        }
      }
      CHILDKILLED {
        set signal [lindex $::errorCode 2]
        set resultmsg "$test\nFailed with signal($signal)$errmsg"
      }
      CHILDSUSP {
        set signal [lindex $::errorCode 2]
        set resultmsg "$test\nFailed with suspend($signal)$errmsg"
      }
      POSIX {
        set posixNum [lindex $::errorCode 1]
        set posixMsg [lindex $::errorCode 2]
        set resultmsg "$test\nFailed with posix($posixNum,$posixMsg)$errmsg"
      }
      NONE {
        # Any other error such as stderr output of a program, or syntax error in
        # the cmd
        set resultmsg "$test\nFailed with unknown error (or has stderr output)$errmsg"
      }
      default {
        set resultmsg "$test\nFailed with unknown error$errmsg"
      }
    }
  }


  if {$resultmsg == "" || $allow_failure == 1} {
    pass $test
  } else {
    fail $resultmsg
  }

  verbose "$errmsg" 1
  return "$errmsg"
}

proc run-test-debugger-sim {test level} {
    
    set designPath [pwd]

    run-cmd $test "make"

    set cmd "python3 $level/../dbg/debugger/src/unittests.py $designPath"
    puts "Running cmd: $cmd"
    run-cmd $test $cmd
}
